{
  "address": "0x1C82cdDe4559C28b872657ad20af9A469c99857B",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pid_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "stakingToken_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "rewardToken_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "rewardManager_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "InvalidAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Unauthorized",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "ExtraRewardsCleared",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "RewardAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "RewardPaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Staked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DURATION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NEW_REWARD_RATIO",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_reward",
          "type": "address"
        }
      ],
      "name": "addExtraReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "clearExtraRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "donate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "earned",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "extraRewards",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "extraRewardsLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_claimExtras",
          "type": "bool"
        }
      ],
      "name": "getReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "historicalRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastTimeRewardApplicable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastUpdateTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "operator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "periodFinish",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_rewards",
          "type": "uint256"
        }
      ],
      "name": "queueNewRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "queuedRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardPerToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardPerTokenStored",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakeAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_for",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "stakeFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userRewardPerTokenPaid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_claim",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "_unwrap",
          "type": "bool"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_claim",
          "type": "bool"
        }
      ],
      "name": "withdrawAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_claim",
          "type": "bool"
        }
      ],
      "name": "withdrawAllAndUnwrap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xef73cd27cee0c5d40ad198fd9dafb5d259c44bccd6bba7708033de2647816482",
  "receipt": {
    "to": null,
    "from": "0xbF63Afb77A49159b4502E91CD3f4EbDcc161431f",
    "contractAddress": "0x1C82cdDe4559C28b872657ad20af9A469c99857B",
    "transactionIndex": 5,
    "gasUsed": "1708965",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xddedee9b9daba1f8c0e4f4c1ec1807578f2bc2f689ffc8a51741c01827eb50b1",
    "transactionHash": "0xef73cd27cee0c5d40ad198fd9dafb5d259c44bccd6bba7708033de2647816482",
    "logs": [],
    "blockNumber": 7191109,
    "cumulativeGasUsed": "2150447",
    "status": 1,
    "byzantium": true
  },
  "args": [
    0,
    "0x74c019b9eb58E22fF853F91f18da4917378339C6",
    "0xfa8449189744799ad2ace7e0ebac8bb7575eff47",
    "0x4414D7f87D16420A7073a9Cd7d56f995566c3922",
    "0xB98a506e9fb09871FF63b4e7B56Ce9bB067a5120"
  ],
  "solcInputHash": "a7d91ab37d5735063eec3feef42edd7e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"stakingToken_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardToken_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardManager_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ExtraRewardsCleared\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NEW_REWARD_RATIO\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_reward\",\"type\":\"address\"}],\"name\":\"addExtraReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clearExtraRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"donate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"extraRewards\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"extraRewardsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_claimExtras\",\"type\":\"bool\"}],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"historicalRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTimeRewardApplicable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"periodFinish\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewards\",\"type\":\"uint256\"}],\"name\":\"queueNewRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"queuedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerTokenStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_for\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stakeFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRewardPerTokenPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_claim\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_unwrap\",\"type\":\"bool\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_claim\",\"type\":\"bool\"}],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_claim\",\"type\":\"bool\"}],\"name\":\"withdrawAllAndUnwrap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Rewards contract for Prime Pools is based on the convex contract\",\"kind\":\"dev\",\"methods\":{\"addExtraReward(address)\":{\"details\":\"only `rewardManager` can add extra rewards\",\"params\":{\"_reward\":\"token address of the reward\"}},\"balanceOf(address)\":{\"params\":{\"account\":\"The address of the token holder\"},\"returns\":{\"_0\":\"The `account`'s balance\"}},\"clearExtraRewards()\":{\"details\":\"Only Prime multising has the ability to do this\"},\"donate(uint256)\":{\"params\":{\"_amount\":\"The amount of tokens to donate\"}},\"earned(address)\":{\"params\":{\"account\":\"The address of the token holder\"},\"returns\":{\"_0\":\"The `account`'s earned rewards\"}},\"getReward(address,bool)\":{\"params\":{\"_account\":\"The account to claim rewards for\",\"_claimExtras\":\"Whether or not the user wants to claim extra rewards\"}},\"lastTimeRewardApplicable()\":{\"returns\":{\"_0\":\"The lower value of current block.timestamp or last time reward applicable\"}},\"queueNewRewards(uint256)\":{\"details\":\"Only the operator can queue new rewards\",\"params\":{\"_rewards\":\"The amount of tokens to queue\"}},\"rewardPerToken()\":{\"returns\":{\"_0\":\"The rewards per token staked\"}},\"stake(uint256)\":{\"params\":{\"_amount\":\"The amount of tokens user wants to stake\"}},\"stakeFor(address,uint256)\":{\"params\":{\"_amount\":\"The amount of tokens user wants to stake\",\"_for\":\"Who are we staking for\"}},\"withdraw(uint256,bool,bool)\":{\"params\":{\"_amount\":\"The amount of tokens that the user wants to withdraw\",\"_claim\":\"Whether or not the user wants to claim their rewards\",\"_unwrap\":\"Whether or not the user wants to unwrap to BLP tokens\"}},\"withdrawAll(bool)\":{\"params\":{\"_claim\":\"Whether or not the user wants to claim their rewards\"}},\"withdrawAllAndUnwrap(bool)\":{\"params\":{\"_claim\":\"Whether or not the user wants to claim their rewards\"}}},\"title\":\"Base Reward Pool contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addExtraReward(address)\":{\"notice\":\"Adds an extra reward\"},\"balanceOf(address)\":{\"notice\":\"Get the specified address' balance\"},\"clearExtraRewards()\":{\"notice\":\"Clears extra rewards\"},\"donate(uint256)\":{\"notice\":\"Donates reward token to this contract\"},\"earned(address)\":{\"notice\":\"Returns the `account`'s earned rewards\"},\"extraRewardsLength()\":{\"notice\":\"Returns number of extra rewards\"},\"getReward()\":{\"notice\":\"Claims Reward for signer\"},\"getReward(address,bool)\":{\"notice\":\"Claims Rewards for `_account`\"},\"lastTimeRewardApplicable()\":{\"notice\":\"Returns last time reward applicable\"},\"queueNewRewards(uint256)\":{\"notice\":\"Queue new rewards\"},\"rewardPerToken()\":{\"notice\":\"Returns rewards per token staked\"},\"stake(uint256)\":{\"notice\":\"Stakes `amount` tokens\"},\"stakeAll()\":{\"notice\":\"Stakes all BAL tokens\"},\"stakeFor(address,uint256)\":{\"notice\":\"Stakes `amount` tokens for `_for`\"},\"totalSupply()\":{\"notice\":\"Returns total supply\"},\"withdraw(uint256,bool,bool)\":{\"notice\":\"Withdraw `amount` tokens and possibly unwrap\"},\"withdrawAll(bool)\":{\"notice\":\"Withdraw all tokens\"},\"withdrawAllAndUnwrap(bool)\":{\"notice\":\"Withdraw all tokens and unwrap\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BaseRewardPool.sol\":\"BaseRewardPool\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"contracts/BaseRewardPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\nimport \\\"./utils/Interfaces.sol\\\";\\nimport \\\"./utils/MathUtil.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n/// @title Base Reward Pool contract\\n/// @dev Rewards contract for Prime Pools is based on the convex contract\\ncontract BaseRewardPool is IBaseRewardsPool {\\n    using SafeERC20 for IERC20;\\n    using MathUtil for uint256;\\n\\n    event RewardAdded(uint256 reward);\\n    event Staked(address indexed user, uint256 amount);\\n    event Withdrawn(address indexed user, uint256 amount);\\n    event RewardPaid(address indexed user, uint256 reward);\\n    event ExtraRewardsCleared();\\n\\n    error Unauthorized();\\n    error InvalidAmount();\\n\\n    uint256 public constant DURATION = 7 days;\\n    uint256 public constant NEW_REWARD_RATIO = 830;\\n\\n    // Rewards token is Bal\\n    IERC20 public immutable rewardToken;\\n    IERC20 public immutable stakingToken;\\n\\n    // Operator is Controller smart contract\\n    address public immutable operator;\\n    address public immutable rewardManager;\\n\\n    uint256 public pid;\\n    uint256 public periodFinish;\\n    uint256 public rewardRate;\\n    uint256 public lastUpdateTime;\\n    uint256 public rewardPerTokenStored;\\n    uint256 public queuedRewards;\\n    uint256 public currentRewards;\\n    uint256 public historicalRewards;\\n    uint256 private _totalSupply;\\n\\n    mapping(address => uint256) public userRewardPerTokenPaid;\\n    mapping(address => uint256) public rewards;\\n    mapping(address => uint256) private _balances;\\n\\n    address[] public extraRewards;\\n\\n    constructor(\\n        uint256 pid_,\\n        address stakingToken_,\\n        address rewardToken_,\\n        address operator_,\\n        address rewardManager_\\n    ) {\\n        pid = pid_;\\n        stakingToken = IERC20(stakingToken_);\\n        rewardToken = IERC20(rewardToken_);\\n        operator = operator_;\\n        rewardManager = rewardManager_;\\n    }\\n\\n    modifier updateReward(address account) {\\n        rewardPerTokenStored = rewardPerToken();\\n        lastUpdateTime = lastTimeRewardApplicable();\\n        if (account != address(0)) {\\n            rewards[account] = earned(account);\\n            userRewardPerTokenPaid[account] = rewardPerTokenStored;\\n        }\\n        _;\\n    }\\n\\n    modifier onlyAddress(address authorizedAddress) {\\n        if (msg.sender != authorizedAddress) {\\n            revert Unauthorized();\\n        }\\n        _;\\n    }\\n\\n    /// @notice Returns total supply\\n    function totalSupply() public view returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /// @notice Get the specified address' balance\\n    /// @param account The address of the token holder\\n    /// @return The `account`'s balance\\n    function balanceOf(address account) public view returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /// @notice Returns number of extra rewards\\n    function extraRewardsLength() external view returns (uint256) {\\n        return extraRewards.length;\\n    }\\n\\n    /// @notice Adds an extra reward\\n    /// @dev only `rewardManager` can add extra rewards\\n    /// @param _reward token address of the reward\\n    function addExtraReward(address _reward) external onlyAddress(rewardManager) {\\n        require(_reward != address(0), \\\"!reward setting\\\");\\n        extraRewards.push(_reward);\\n    }\\n\\n    /// @notice Clears extra rewards\\n    /// @dev Only Prime multising has the ability to do this\\n    function clearExtraRewards() external onlyAddress(IController(operator).owner()) {\\n        delete extraRewards;\\n        emit ExtraRewardsCleared();\\n    }\\n\\n    /// @notice Returns last time reward applicable\\n    /// @return The lower value of current block.timestamp or last time reward applicable\\n    function lastTimeRewardApplicable() public view returns (uint256) {\\n        // solhint-disable-next-line\\n        return MathUtil.min(block.timestamp, periodFinish);\\n    }\\n\\n    /// @notice Returns rewards per token staked\\n    /// @return The rewards per token staked\\n    function rewardPerToken() public view returns (uint256) {\\n        uint256 totalSupplyMemory = totalSupply();\\n        if (totalSupplyMemory == 0) {\\n            return rewardPerTokenStored;\\n        }\\n        return\\n            rewardPerTokenStored +\\n            (((lastTimeRewardApplicable() - lastUpdateTime) * rewardRate * 1e18) / totalSupplyMemory);\\n    }\\n\\n    /// @notice Returns the `account`'s earned rewards\\n    /// @param account The address of the token holder\\n    /// @return The `account`'s earned rewards\\n    function earned(address account) public view returns (uint256) {\\n        return (balanceOf(account) * (rewardPerToken() - userRewardPerTokenPaid[account])) / 1e18 + rewards[account];\\n    }\\n\\n    /// @notice Stakes `amount` tokens\\n    /// @param _amount The amount of tokens user wants to stake\\n    function stake(uint256 _amount) public {\\n        stakeFor(msg.sender, _amount);\\n    }\\n\\n    /// @notice Stakes all BAL tokens\\n    function stakeAll() external {\\n        uint256 balance = stakingToken.balanceOf(msg.sender);\\n        stake(balance);\\n    }\\n\\n    /// @notice Stakes `amount` tokens for `_for`\\n    /// @param _for Who are we staking for\\n    /// @param _amount The amount of tokens user wants to stake\\n    function stakeFor(address _for, uint256 _amount) public updateReward(_for) {\\n        if (_amount < 1) {\\n            revert InvalidAmount();\\n        }\\n\\n        stakeToExtraRewards(_for, _amount);\\n\\n        _totalSupply = _totalSupply + (_amount);\\n        // update _for balances\\n        _balances[_for] = _balances[_for] + (_amount);\\n        // take away from sender\\n        stakingToken.transferFrom(msg.sender, address(this), _amount);\\n        emit Staked(_for, _amount);\\n    }\\n\\n    /// @notice Withdraw `amount` tokens and possibly unwrap\\n    /// @param _amount The amount of tokens that the user wants to withdraw\\n    /// @param _claim Whether or not the user wants to claim their rewards\\n    /// @param _unwrap Whether or not the user wants to unwrap to BLP tokens\\n    function withdraw(\\n        uint256 _amount,\\n        bool _claim,\\n        bool _unwrap\\n    ) public updateReward(msg.sender) {\\n        if (_amount < 1) {\\n            revert InvalidAmount();\\n        }\\n\\n        // withdraw from linked rewards\\n        withdrawExtraRewards(msg.sender, _amount);\\n\\n        _totalSupply = _totalSupply - (_amount);\\n        _balances[msg.sender] = _balances[msg.sender] - (_amount);\\n\\n        if (_unwrap) {\\n            IController(operator).withdrawTo(pid, _amount, msg.sender);\\n        } else {\\n            // return staked tokens to sender\\n            stakingToken.transfer(msg.sender, _amount);\\n        }\\n        emit Withdrawn(msg.sender, _amount);\\n\\n        // claim staking rewards\\n        if (_claim) {\\n            getReward(msg.sender, true);\\n        }\\n    }\\n\\n    /// @notice Withdraw all tokens\\n    /// @param _claim Whether or not the user wants to claim their rewards\\n    function withdrawAll(bool _claim) external {\\n        withdraw(_balances[msg.sender], _claim, false);\\n    }\\n\\n    /// @notice Withdraw all tokens and unwrap\\n    /// @param _claim Whether or not the user wants to claim their rewards\\n    function withdrawAllAndUnwrap(bool _claim) external {\\n        withdraw(_balances[msg.sender], _claim, true);\\n    }\\n\\n    /// @notice Claims Rewards for `_account`\\n    /// @param _account The account to claim rewards for\\n    /// @param _claimExtras Whether or not the user wants to claim extra rewards\\n    function getReward(address _account, bool _claimExtras) public updateReward(_account) {\\n        uint256 reward = rewards[_account];\\n        if (reward > 0) {\\n            rewards[_account] = 0;\\n            rewardToken.safeTransfer(_account, reward);\\n            emit RewardPaid(_account, reward);\\n        }\\n\\n        // also get rewards from linked rewards\\n        if (_claimExtras) {\\n            address[] memory extraRewardsMemory = extraRewards;\\n            for (uint256 i = 0; i < extraRewardsMemory.length; i = i.unsafeInc()) {\\n                IRewards(extraRewardsMemory[i]).getReward(_account);\\n            }\\n        }\\n    }\\n\\n    /// @notice Claims Reward for signer\\n    function getReward() external {\\n        getReward(msg.sender, true);\\n    }\\n\\n    /// @notice Donates reward token to this contract\\n    /// @param _amount The amount of tokens to donate\\n    function donate(uint256 _amount) external {\\n        IERC20(rewardToken).safeTransferFrom(msg.sender, address(this), _amount);\\n        queuedRewards = queuedRewards + _amount;\\n    }\\n\\n    /// @notice Queue new rewards\\n    /// @dev Only the operator can queue new rewards\\n    /// @param _rewards The amount of tokens to queue\\n    function queueNewRewards(uint256 _rewards) external onlyAddress(operator) {\\n        _rewards = _rewards + queuedRewards;\\n\\n        // solhint-disable-next-line\\n        if (block.timestamp >= periodFinish) {\\n            notifyRewardAmount(_rewards);\\n            queuedRewards = 0;\\n            return;\\n        }\\n\\n        // solhint-disable-next-line\\n        uint256 elapsedTime = block.timestamp - (periodFinish - DURATION);\\n        uint256 currentAtNow = rewardRate * elapsedTime;\\n        uint256 queuedRatio = (currentAtNow * 1000) / _rewards;\\n\\n        if (queuedRatio < NEW_REWARD_RATIO) {\\n            notifyRewardAmount(_rewards);\\n            queuedRewards = 0;\\n        } else {\\n            queuedRewards = _rewards;\\n        }\\n    }\\n\\n    /// @dev Stakes `amount` tokens for address `for` to extra rewards tokens\\n    /// RewardManager `rewardManager` is responsible for adding reward tokens\\n    /// @param _for Who are we staking for\\n    /// @param _amount The amount of tokens user wants to stake\\n    function stakeToExtraRewards(address _for, uint256 _amount) internal {\\n        address[] memory extraRewardsMemory = extraRewards;\\n        for (uint256 i = 0; i < extraRewardsMemory.length; i = i.unsafeInc()) {\\n            IRewards(extraRewardsMemory[i]).stake(_for, _amount);\\n        }\\n    }\\n\\n    /// @dev Stakes `amount` tokens for address `for` to extra rewards tokens\\n    /// RewardManager `rewardManager` is responsible for adding reward tokens\\n    /// @param _for Who are we staking for\\n    /// @param _amount The amount of tokens user wants to stake\\n    function withdrawExtraRewards(address _for, uint256 _amount) internal {\\n        address[] memory extraRewardsMemory = extraRewards;\\n        for (uint256 i = 0; i < extraRewardsMemory.length; i = i.unsafeInc()) {\\n            IRewards(extraRewardsMemory[i]).withdraw(_for, _amount);\\n        }\\n    }\\n\\n    function notifyRewardAmount(uint256 reward) internal updateReward(address(0)) {\\n        historicalRewards = historicalRewards + reward;\\n        // solhint-disable-next-line\\n        if (block.timestamp >= periodFinish) {\\n            rewardRate = reward / DURATION;\\n        } else {\\n            // solhint-disable-next-line\\n            uint256 remaining = periodFinish - block.timestamp;\\n            uint256 leftover = remaining * rewardRate;\\n            reward = reward + leftover;\\n            rewardRate = reward / DURATION;\\n        }\\n        currentRewards = reward;\\n        // solhint-disable-next-line\\n        lastUpdateTime = block.timestamp;\\n        // solhint-disable-next-line\\n        periodFinish = block.timestamp + DURATION;\\n        emit RewardAdded(reward);\\n    }\\n}\\n\",\"keccak256\":\"0x6369182cc4f46fdb3fb750bbb36a8ce0091d1ca07775cbfa53f6e16a6d686367\",\"license\":\"MIT\"},\"contracts/utils/Interfaces.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IBalGauge {\\n    function deposit(uint256) external;\\n\\n    function balanceOf(address) external view returns (uint256);\\n\\n    function withdraw(uint256) external;\\n\\n    function claim_rewards() external;\\n\\n    function reward_tokens(uint256) external view returns (address);\\n\\n    function lp_token() external view returns (address);\\n}\\n\\ninterface IBalVoteEscrow {\\n    function create_lock(uint256, uint256) external;\\n\\n    function increase_amount(uint256) external;\\n\\n    function increase_unlock_time(uint256) external;\\n\\n    function withdraw() external;\\n\\n    function smart_wallet_checker() external view returns (address);\\n\\n    function balanceOf(address, uint256) external view returns (uint256);\\n\\n    function balanceOfAt(address, uint256) external view returns (uint256);\\n}\\n\\ninterface IVoting {\\n    function vote_for_gauge_weights(address, uint256) external;\\n}\\n\\ninterface IMinter {\\n    function mint(address) external;\\n}\\n\\ninterface IVoterProxy {\\n    function deposit(address _token, address _gauge) external;\\n\\n    function withdrawWethBal(address, uint256) external;\\n\\n    function withdraw(\\n        address _token,\\n        address _gauge,\\n        uint256 _amount\\n    ) external;\\n\\n    function withdrawAll(address _token, address _gauge) external;\\n\\n    function createLock(uint256 _value, uint256 _unlockTime) external;\\n\\n    function increaseAmount(uint256 _value) external;\\n\\n    function increaseTime(uint256 _unlockTimestamp) external;\\n\\n    function release() external;\\n\\n    function claimBal(address _gauge) external returns (uint256);\\n\\n    function claimRewards(address _gauge) external;\\n\\n    function claimFees(address _distroContract, IERC20[] calldata _tokens) external;\\n\\n    function delegateVotingPower(address _delegateTo) external;\\n\\n    function clearDelegate() external;\\n\\n    function voteMultipleGauges(address[] calldata _gauges, uint256[] calldata _weights) external;\\n\\n    function balanceOfPool(address _gauge) external view returns (uint256);\\n\\n    function operator() external view returns (address);\\n\\n    function execute(\\n        address _to,\\n        uint256 _value,\\n        bytes calldata _data\\n    ) external returns (bool, bytes memory);\\n}\\n\\ninterface ISnapshotDelegateRegistry {\\n    function setDelegate(bytes32 id, address delegate) external;\\n\\n    function clearDelegate(bytes32 id) external;\\n}\\n\\ninterface IRewards {\\n    function stake(address, uint256) external;\\n\\n    function stakeFor(address, uint256) external;\\n\\n    function withdraw(address, uint256) external;\\n\\n    function exit(address) external;\\n\\n    function getReward(address) external;\\n\\n    function queueNewRewards(uint256) external;\\n\\n    function notifyRewardAmount(uint256) external;\\n\\n    function addExtraReward(address) external;\\n\\n    function stakingToken() external view returns (address);\\n\\n    function rewardToken() external view returns (address);\\n\\n    function earned(address account) external view returns (uint256);\\n}\\n\\ninterface IStash {\\n    function processStash() external;\\n\\n    function claimRewards() external;\\n\\n    function initialize(\\n        uint256 _pid,\\n        address _operator,\\n        address _gauge,\\n        address _rewardFactory\\n    ) external;\\n}\\n\\ninterface IFeeDistro {\\n    /**\\n     * @notice Claims all pending distributions of the provided token for a user.\\n     * @dev It's not necessary to explicitly checkpoint before calling this function, it will ensure the FeeDistributor\\n     * is up to date before calculating the amount of tokens to be claimed.\\n     * @param user - The user on behalf of which to claim.\\n     * @param token - The ERC20 token address to be claimed.\\n     * @return The amount of `token` sent to `user` as a result of claiming.\\n     */\\n    function claimToken(address user, IERC20 token) external returns (uint256);\\n\\n    /**\\n     * @notice Claims a number of tokens on behalf of a user.\\n     * @dev A version of `claimToken` which supports claiming multiple `tokens` on behalf of `user`.\\n     * See `claimToken` for more details.\\n     * @param user - The user on behalf of which to claim.\\n     * @param tokens - An array of ERC20 token addresses to be claimed.\\n     * @return An array of the amounts of each token in `tokens` sent to `user` as a result of claiming.\\n     */\\n    function claimTokens(address user, IERC20[] calldata tokens) external returns (uint256[] memory);\\n}\\n\\ninterface ITokenMinter {\\n    function mint(address, uint256) external;\\n\\n    function burn(address, uint256) external;\\n}\\n\\ninterface IBaseRewardsPool {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address _account) external view returns (uint256);\\n}\\n\\ninterface IController {\\n    /// @notice returns the number of pools\\n    function poolLength() external returns (uint256);\\n\\n    /// @notice Deposits an amount of LP token into a specific pool,\\n    /// mints reward and optionally tokens and  stakes them into the reward contract\\n    /// @dev Sender must approve LP tokens to Controller smart contract\\n    /// @param _pid The pool id to deposit lp tokens into\\n    /// @param _amount The amount of lp tokens to be deposited\\n    /// @param _stake bool for wheather the tokens should be staked\\n    function deposit(\\n        uint256 _pid,\\n        uint256 _amount,\\n        bool _stake\\n    ) external;\\n\\n    /// @notice Deposits and stakes all LP tokens\\n    /// @dev Sender must approve LP tokens to Controller smart contract\\n    /// @param _pid The pool id to deposit lp tokens into\\n    /// @param _stake bool for wheather the tokens should be staked\\n    function depositAll(uint256 _pid, bool _stake) external;\\n\\n    /// @notice Withdraws lp tokens from the pool\\n    /// @param _pid The pool id to withdraw lp tokens from\\n    /// @param _amount amount of LP tokens to withdraw\\n    function withdraw(uint256 _pid, uint256 _amount) external;\\n\\n    /// @notice Withdraws all of the lp tokens in the pool\\n    /// @param _pid The pool id to withdraw lp tokens from\\n    function withdrawAll(uint256 _pid) external;\\n\\n    /// @notice Withdraws LP tokens and sends them to a specified address\\n    /// @param _pid The pool id to deposit lp tokens into\\n    /// @param _amount amount of LP tokens to withdraw\\n    function withdrawTo(\\n        uint256 _pid,\\n        uint256 _amount,\\n        address _to\\n    ) external;\\n\\n    /// @notice Withdraws `amount` of unlocked WethBal to treasury\\n    /// @param _amount amount of tokens to withdraw\\n    function withdrawUnlockedWethBal(uint256 _amount) external;\\n\\n    /// @notice Claims rewards from a pool and disperses them to the rewards contract\\n    /// @param _pid the id of the pool where lp tokens are held\\n    function earmarkRewards(uint256 _pid) external;\\n\\n    /// @notice Claims rewards from the Balancer's fee distributor contract and transfers the tokens into the rewards contract\\n    function earmarkFees() external;\\n\\n    function isShutdown() external view returns (bool);\\n\\n    function poolInfo(uint256)\\n        external\\n        view\\n        returns (\\n            address,\\n            address,\\n            address,\\n            address,\\n            address,\\n            bool\\n        );\\n\\n    function claimRewards(uint256, address) external;\\n\\n    function owner() external returns (address);\\n}\\n\\ninterface IRewardFactory {\\n    function grantRewardStashAccess(address) external;\\n\\n    function createBalRewards(uint256, address) external returns (address);\\n\\n    function createTokenRewards(\\n        address,\\n        address,\\n        address\\n    ) external returns (address);\\n\\n    function activeRewardCount(address) external view returns (uint256);\\n\\n    function addActiveReward(address, uint256) external returns (bool);\\n\\n    function removeActiveReward(address, uint256) external returns (bool);\\n}\\n\\ninterface IStashFactory {\\n    function createStash(uint256 _pid, address _gauge) external returns (address);\\n}\\n\\ninterface ITokenFactory {\\n    function createDepositToken(address) external returns (address);\\n}\\n\\ninterface IProxyFactory {\\n    function clone(address _target) external returns (address);\\n}\\n\\ninterface IRewardHook {\\n    function onRewardClaim() external;\\n}\\n\",\"keccak256\":\"0x21bc9a48fc7835af7aff012e20ff2bff5c749a65e066d5799e21c7fda85bd059\",\"license\":\"MIT\"},\"contracts/utils/MathUtil.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\n// copied from https://github.com/Uniswap/v2-core/blob/master/contracts/libraries/SafeMath.sol\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUtil {\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /// @dev Gas optimization for loops that iterate over extra rewards\\n    /// We know that this can't overflow because we can't interate over big arrays\\n    function unsafeInc(uint256 x) internal pure returns (uint256) {\\n        unchecked {\\n            return x + 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8969c0e7b65ca3bf8e8c76ea850d4b02e488c94e25735fe6b2c55b4ae14416a4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102405760003560e01c80637050ccd911610145578063a694fc3a116100bd578063df136d651161008c578063f106845411610071578063f1068454146104b2578063f14faf6f146104bb578063f7c618c1146104ce57600080fd5b8063df136d65146104a0578063ebe2b12b146104a957600080fd5b8063a694fc3a14610474578063c8f33c9114610487578063cd3daf9d14610490578063d55a23f41461049857600080fd5b806380faa57d116101145780638dcb4061116100f95780638dcb406114610450578063901a7d531461045857806392930b451461046157600080fd5b806380faa57d146104285780638b8763471461043057600080fd5b80637050ccd9146103af57806370a08231146103c257806372f702f3146103f85780637b0a47ee1461041f57600080fd5b80632ee40908116101d85780634cfe2f4a116101a7578063590a41f51161018c578063590a41f5146103805780635e43c47b1461039357806363d38c3b146103a657600080fd5b80634cfe2f4a14610350578063570ca7351461035957600080fd5b80632ee409081461030f5780633d18b9121461032257806340c354461461032a57806349f039a21461033d57600080fd5b806318160ddd1161021457806318160ddd146102e15780631be05289146102e95780631c1c6fe5146102f3578063262d3d6d1461030657600080fd5b80628cc262146102455780630569d3881461026b5780630700037d146102755780630f4ef8a614610295575b600080fd5b610258610253366004611ad8565b6104f5565b6040519081526020015b60405180910390f35b61027361058c565b005b610258610283366004611ad8565b600a6020526000908152604090205481565b6102bc7f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610262565b600854610258565b61025862093a8081565b610273610301366004611b03565b6106a4565b61025860075481565b61027361031d366004611b20565b6106c2565b6102736108e9565b6102bc610338366004611b4c565b6108f6565b61027361034b366004611b03565b61092d565b61025861033e81565b6102bc7f000000000000000000000000000000000000000000000000000000000000000081565b61027361038e366004611b4c565b610949565b6102736103a1366004611ad8565b610a59565b61025860055481565b6102736103bd366004611b65565b610bc3565b6102586103d0366004611ad8565b73ffffffffffffffffffffffffffffffffffffffff166000908152600b602052604090205490565b6102bc7f000000000000000000000000000000000000000000000000000000000000000081565b61025860025481565b610258610e40565b61025861043e366004611ad8565b60096020526000908152604090205481565b610273610e53565b61025860065481565b61027361046f366004611b9e565b610f0f565b610273610482366004611b4c565b6111c0565b61025860035481565b6102586111ca565b600c54610258565b61025860045481565b61025860015481565b61025860005481565b6102736104c9366004611b4c565b61123a565b6102bc7f000000000000000000000000000000000000000000000000000000000000000081565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600a60209081526040808320546009909252822054670de0b6b3a7640000906105386111ca565b6105429190611c0f565b73ffffffffffffffffffffffffffffffffffffffff85166000908152600b60205260409020546105729190611c26565b61057c9190611c63565b6105869190611c9e565b92915050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b81526004016020604051808303816000875af11580156105f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061061d9190611cb6565b3373ffffffffffffffffffffffffffffffffffffffff82161461066c576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610678600c6000611a84565b6040517f1a53a10dfbef82dfcf34ce946c284b478164f6e7496a07fc0cbe69d01ff44f0990600090a150565b336000908152600b60205260408120546106bf918390610f0f565b50565b816106cb6111ca565b6004556106d6610e40565b60035573ffffffffffffffffffffffffffffffffffffffff811615610737576106fe816104f5565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600a60209081526040808320939093556004546009909152919020555b6001821015610772576040517f2c5211c600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61077c8383611290565b8160085461078a9190611c9e565b60085573ffffffffffffffffffffffffffffffffffffffff83166000908152600b60205260409020546107be908390611c9e565b73ffffffffffffffffffffffffffffffffffffffff8481166000908152600b6020526040908190209290925590517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018490527f0000000000000000000000000000000000000000000000000000000000000000909116906323b872dd906064016020604051808303816000875af115801561086f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108939190611cd3565b508273ffffffffffffffffffffffffffffffffffffffff167f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d836040516108dc91815260200190565b60405180910390a2505050565b6108f4336001610bc3565b565b600c818154811061090657600080fd5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b336000908152600b60205260409020546106bf90826001610f0f565b7f00000000000000000000000000000000000000000000000000000000000000003373ffffffffffffffffffffffffffffffffffffffff8216146109b9576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6005546109c69083611c9e565b915060015442106109e3576109da826113bf565b60006005555050565b600062093a806001546109f69190611c0f565b610a009042611c0f565b9050600081600254610a129190611c26565b9050600084610a23836103e8611c26565b610a2d9190611c63565b905061033e811015610a4c57610a42856113bf565b6000600555610a52565b60058590555b5050505050565b7f00000000000000000000000000000000000000000000000000000000000000003373ffffffffffffffffffffffffffffffffffffffff821614610ac9576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8216610b4b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f217265776172642073657474696e67000000000000000000000000000000000060448201526064015b60405180910390fd5b50600c80546001810182556000919091527fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c70180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b81610bcc6111ca565b600455610bd7610e40565b60035573ffffffffffffffffffffffffffffffffffffffff811615610c3857610bff816104f5565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600a60209081526040808320939093556004546009909152919020555b73ffffffffffffffffffffffffffffffffffffffff83166000908152600a60205260409020548015610d095773ffffffffffffffffffffffffffffffffffffffff8085166000908152600a6020526040812055610cb8907f00000000000000000000000000000000000000000000000000000000000000001685836114fa565b8373ffffffffffffffffffffffffffffffffffffffff167fe2403640ba68fed3a2f88b7557551d1993f84b99bb10ff833f0cf8db0c5e048682604051610d0091815260200190565b60405180910390a25b8215610e3a576000600c805480602002602001604051908101604052809291908181526020018280548015610d7457602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311610d49575b5050505050905060005b8151811015610e3757818181518110610d9957610d99611cf0565b60209081029190910101516040517fc00007b000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff88811660048301529091169063c00007b090602401600060405180830381600087803b158015610e0e57600080fd5b505af1158015610e22573d6000803e3d6000fd5b50505050610e308160010190565b9050610d7e565b50505b50505050565b6000610e4e426001546115d3565b905090565b6040517f70a082310000000000000000000000000000000000000000000000000000000081523360048201526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906370a0823190602401602060405180830381865afa158015610ee0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f049190611d1f565b90506106bf816111c0565b33610f186111ca565b600455610f23610e40565b60035573ffffffffffffffffffffffffffffffffffffffff811615610f8457610f4b816104f5565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600a60209081526040808320939093556004546009909152919020555b6001841015610fbf576040517f2c5211c600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610fc933856115eb565b83600854610fd79190611c0f565b600855336000908152600b6020526040902054610ff5908590611c0f565b336000908152600b602052604090205581156110c1576000546040517f14cd70e40000000000000000000000000000000000000000000000000000000081526004810191909152602481018590523360448201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906314cd70e490606401600060405180830381600087803b1580156110a457600080fd5b505af11580156110b8573d6000803e3d6000fd5b5050505061117a565b6040517fa9059cbb000000000000000000000000000000000000000000000000000000008152336004820152602481018590527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063a9059cbb906044016020604051808303816000875af1158015611154573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111789190611cd3565b505b60405184815233907f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d59060200160405180910390a28215610e3a57610e3a336001610bc3565b6106bf33826106c2565b6000806111d660085490565b9050806000036111e857505060045490565b806002546003546111f7610e40565b6112019190611c0f565b61120b9190611c26565b61121d90670de0b6b3a7640000611c26565b6112279190611c63565b6004546112349190611c9e565b91505090565b61127c73ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001633308461171a565b8060055461128a9190611c9e565b60055550565b6000600c8054806020026020016040519081016040528092919081815260200182805480156112f557602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff1681526001909101906020018083116112ca575b5050505050905060005b8151811015610e3a5781818151811061131a5761131a611cf0565b60209081029190910101516040517fadc9772e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8681166004830152602482018690529091169063adc9772e90604401600060405180830381600087803b15801561139657600080fd5b505af11580156113aa573d6000803e3d6000fd5b505050506113b88160010190565b90506112ff565b60006113c96111ca565b6004556113d4610e40565b60035573ffffffffffffffffffffffffffffffffffffffff811615611435576113fc816104f5565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600a60209081526040808320939093556004546009909152919020555b816007546114439190611c9e565b60075560015442106114645761145c62093a8083611c63565b6002556114a7565b6000426001546114749190611c0f565b90506000600254826114869190611c26565b90506114928185611c9e565b93506114a162093a8085611c63565b60025550505b60068290554260038190556114c09062093a8090611c9e565b6001556040518281527fde88a922e0d3b88b24e9623efeb464919c6bf9f66857a65e2bfcf2ce87a9433d9060200160405180910390a15050565b60405173ffffffffffffffffffffffffffffffffffffffff83166024820152604481018290526115ce9084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152611778565b505050565b60008183106115e257816115e4565b825b9392505050565b6000600c80548060200260200160405190810160405280929190818152602001828054801561165057602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311611625575b5050505050905060005b8151811015610e3a5781818151811061167557611675611cf0565b60209081029190910101516040517ff3fef3a300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8681166004830152602482018690529091169063f3fef3a390604401600060405180830381600087803b1580156116f157600080fd5b505af1158015611705573d6000803e3d6000fd5b505050506117138160010190565b905061165a565b60405173ffffffffffffffffffffffffffffffffffffffff80851660248301528316604482015260648101829052610e3a9085907f23b872dd000000000000000000000000000000000000000000000000000000009060840161154c565b60006117da826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166118849092919063ffffffff16565b8051909150156115ce57808060200190518101906117f89190611cd3565b6115ce576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610b42565b6060611893848460008561189b565b949350505050565b60608247101561192d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610b42565b73ffffffffffffffffffffffffffffffffffffffff85163b6119ab576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610b42565b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516119d49190611d64565b60006040518083038185875af1925050503d8060008114611a11576040519150601f19603f3d011682016040523d82523d6000602084013e611a16565b606091505b5091509150611a26828286611a31565b979650505050505050565b60608315611a405750816115e4565b825115611a505782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b429190611d80565b50805460008255906000526020600020908101906106bf91905b80821115611ab25760008155600101611a9e565b5090565b73ffffffffffffffffffffffffffffffffffffffff811681146106bf57600080fd5b600060208284031215611aea57600080fd5b81356115e481611ab6565b80151581146106bf57600080fd5b600060208284031215611b1557600080fd5b81356115e481611af5565b60008060408385031215611b3357600080fd5b8235611b3e81611ab6565b946020939093013593505050565b600060208284031215611b5e57600080fd5b5035919050565b60008060408385031215611b7857600080fd5b8235611b8381611ab6565b91506020830135611b9381611af5565b809150509250929050565b600080600060608486031215611bb357600080fd5b833592506020840135611bc581611af5565b91506040840135611bd581611af5565b809150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082821015611c2157611c21611be0565b500390565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611c5e57611c5e611be0565b500290565b600082611c99577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b60008219821115611cb157611cb1611be0565b500190565b600060208284031215611cc857600080fd5b81516115e481611ab6565b600060208284031215611ce557600080fd5b81516115e481611af5565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600060208284031215611d3157600080fd5b5051919050565b60005b83811015611d53578181015183820152602001611d3b565b83811115610e3a5750506000910152565b60008251611d76818460208701611d38565b9190910192915050565b6020815260008251806020840152611d9f816040850160208701611d38565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016040019291505056fea26469706673582212204475decea148457b8125fcfcc5738f48f80ef277374c65ea1cdcbe33d55667ba64736f6c634300080f0033",
  "devdoc": {
    "details": "Rewards contract for Prime Pools is based on the convex contract",
    "kind": "dev",
    "methods": {
      "addExtraReward(address)": {
        "details": "only `rewardManager` can add extra rewards",
        "params": {
          "_reward": "token address of the reward"
        }
      },
      "balanceOf(address)": {
        "params": {
          "account": "The address of the token holder"
        },
        "returns": {
          "_0": "The `account`'s balance"
        }
      },
      "clearExtraRewards()": {
        "details": "Only Prime multising has the ability to do this"
      },
      "donate(uint256)": {
        "params": {
          "_amount": "The amount of tokens to donate"
        }
      },
      "earned(address)": {
        "params": {
          "account": "The address of the token holder"
        },
        "returns": {
          "_0": "The `account`'s earned rewards"
        }
      },
      "getReward(address,bool)": {
        "params": {
          "_account": "The account to claim rewards for",
          "_claimExtras": "Whether or not the user wants to claim extra rewards"
        }
      },
      "lastTimeRewardApplicable()": {
        "returns": {
          "_0": "The lower value of current block.timestamp or last time reward applicable"
        }
      },
      "queueNewRewards(uint256)": {
        "details": "Only the operator can queue new rewards",
        "params": {
          "_rewards": "The amount of tokens to queue"
        }
      },
      "rewardPerToken()": {
        "returns": {
          "_0": "The rewards per token staked"
        }
      },
      "stake(uint256)": {
        "params": {
          "_amount": "The amount of tokens user wants to stake"
        }
      },
      "stakeFor(address,uint256)": {
        "params": {
          "_amount": "The amount of tokens user wants to stake",
          "_for": "Who are we staking for"
        }
      },
      "withdraw(uint256,bool,bool)": {
        "params": {
          "_amount": "The amount of tokens that the user wants to withdraw",
          "_claim": "Whether or not the user wants to claim their rewards",
          "_unwrap": "Whether or not the user wants to unwrap to BLP tokens"
        }
      },
      "withdrawAll(bool)": {
        "params": {
          "_claim": "Whether or not the user wants to claim their rewards"
        }
      },
      "withdrawAllAndUnwrap(bool)": {
        "params": {
          "_claim": "Whether or not the user wants to claim their rewards"
        }
      }
    },
    "title": "Base Reward Pool contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addExtraReward(address)": {
        "notice": "Adds an extra reward"
      },
      "balanceOf(address)": {
        "notice": "Get the specified address' balance"
      },
      "clearExtraRewards()": {
        "notice": "Clears extra rewards"
      },
      "donate(uint256)": {
        "notice": "Donates reward token to this contract"
      },
      "earned(address)": {
        "notice": "Returns the `account`'s earned rewards"
      },
      "extraRewardsLength()": {
        "notice": "Returns number of extra rewards"
      },
      "getReward()": {
        "notice": "Claims Reward for signer"
      },
      "getReward(address,bool)": {
        "notice": "Claims Rewards for `_account`"
      },
      "lastTimeRewardApplicable()": {
        "notice": "Returns last time reward applicable"
      },
      "queueNewRewards(uint256)": {
        "notice": "Queue new rewards"
      },
      "rewardPerToken()": {
        "notice": "Returns rewards per token staked"
      },
      "stake(uint256)": {
        "notice": "Stakes `amount` tokens"
      },
      "stakeAll()": {
        "notice": "Stakes all BAL tokens"
      },
      "stakeFor(address,uint256)": {
        "notice": "Stakes `amount` tokens for `_for`"
      },
      "totalSupply()": {
        "notice": "Returns total supply"
      },
      "withdraw(uint256,bool,bool)": {
        "notice": "Withdraw `amount` tokens and possibly unwrap"
      },
      "withdrawAll(bool)": {
        "notice": "Withdraw all tokens"
      },
      "withdrawAllAndUnwrap(bool)": {
        "notice": "Withdraw all tokens and unwrap"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3334,
        "contract": "contracts/BaseRewardPool.sol:BaseRewardPool",
        "label": "pid",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 3336,
        "contract": "contracts/BaseRewardPool.sol:BaseRewardPool",
        "label": "periodFinish",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 3338,
        "contract": "contracts/BaseRewardPool.sol:BaseRewardPool",
        "label": "rewardRate",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 3340,
        "contract": "contracts/BaseRewardPool.sol:BaseRewardPool",
        "label": "lastUpdateTime",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 3342,
        "contract": "contracts/BaseRewardPool.sol:BaseRewardPool",
        "label": "rewardPerTokenStored",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 3344,
        "contract": "contracts/BaseRewardPool.sol:BaseRewardPool",
        "label": "queuedRewards",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 3346,
        "contract": "contracts/BaseRewardPool.sol:BaseRewardPool",
        "label": "currentRewards",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 3348,
        "contract": "contracts/BaseRewardPool.sol:BaseRewardPool",
        "label": "historicalRewards",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 3350,
        "contract": "contracts/BaseRewardPool.sol:BaseRewardPool",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 3354,
        "contract": "contracts/BaseRewardPool.sol:BaseRewardPool",
        "label": "userRewardPerTokenPaid",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3358,
        "contract": "contracts/BaseRewardPool.sol:BaseRewardPool",
        "label": "rewards",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3362,
        "contract": "contracts/BaseRewardPool.sol:BaseRewardPool",
        "label": "_balances",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3365,
        "contract": "contracts/BaseRewardPool.sol:BaseRewardPool",
        "label": "extraRewards",
        "offset": 0,
        "slot": "12",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}