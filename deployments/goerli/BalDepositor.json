{
  "address": "0x196eE7C235D45799D2091166BE115Bd049e6b9d3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_wethBal",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_veBal",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_staker",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_d2dBal",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "InvalidAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Unauthorized",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newFeeManager",
          "type": "address"
        }
      ],
      "name": "FeeManagerChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newLockIncentive",
          "type": "uint256"
        }
      ],
      "name": "LockIncentiveChanged",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "FEE_DENOMINATOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "d2dBal",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_lock",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "_stakeAddress",
          "type": "address"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_lock",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "_stakeAddress",
          "type": "address"
        }
      ],
      "name": "depositAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "incentiveBal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialLock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockBalancer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockIncentive",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeManager",
          "type": "address"
        }
      ],
      "name": "setFeeManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_lockIncentive",
          "type": "uint256"
        }
      ],
      "name": "setFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "staker",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unlockTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "veBal",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wethBal",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x9d6d054edd9fa53d88e2f5bf9ea2bb32eceb94a42509351f93475f7edc2dcee9",
  "receipt": {
    "to": null,
    "from": "0xbF63Afb77A49159b4502E91CD3f4EbDcc161431f",
    "contractAddress": "0x196eE7C235D45799D2091166BE115Bd049e6b9d3",
    "transactionIndex": 65,
    "gasUsed": "1111605",
    "logsBloom": "0x
    "blockHash": "0x5e98b80241a80262e0b2992d6af70346b74c55a95ce4d55f4c9582f84c5ce8e5",
    "transactionHash": "0x9d6d054edd9fa53d88e2f5bf9ea2bb32eceb94a42509351f93475f7edc2dcee9",
    "logs": [],
    "blockNumber": 7139268,
    "cumulativeGasUsed": "20888218",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xf8a0623ab66F985EfFc1C69D05F1af4BaDB01b00",
    "0x33A99Dcc4C85C014cf12626959111D5898bbCAbF",
    "0x424e01E3101663cf2E27f97cB95dFbC6FdAeE034",
    "0xCB2005B8C9C3BDF116186652a8943FBfc8e0FBAC"
  ],
  "solcInputHash": "ebe1c95c0cd8bda8bee95bcd82211d40",
  "metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wethBal\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_veBal\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_d2dBal\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newFeeManager\",\"type\":\"address\"}],\"name\":\"FeeManagerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newLockIncentive\",\"type\":\"uint256\"}],\"name\":\"LockIncentiveChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FEE_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"d2dBal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_lock\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_stakeAddress\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_lock\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_stakeAddress\",\"type\":\"address\"}],\"name\":\"depositAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"incentiveBal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockBalancer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockIncentive\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeManager\",\"type\":\"address\"}],\"name\":\"setFeeManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lockIncentive\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"staker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"veBal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wethBal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Deposit contract for Prime Pools is based on the convex contract\",\"kind\":\"dev\",\"methods\":{\"deposit(uint256,bool,address)\":{\"details\":\"VoterProxy `staker` is responsible for sending Weth/Bal tokens to veBal contract via _locktoken() All of the minted d2dBal will be automatically staked to the Rewards contract\",\"params\":{\"_amount\":\"The amount of tokens user wants to stake\",\"_lock\":\"boolean whether depositor wants to lock funds immediately\",\"_stakeAddress\":\"The Reward contract address\"}},\"depositAll(bool,address)\":{\"params\":{\"_lock\":\"boolean whether depositor wants to lock funds immediately\",\"_stakeAddress\":\"The Reward contract address\"}},\"lockBalancer()\":{\"details\":\"Needed in order to lockFunds on behalf of someone else\"},\"setFeeManager(address)\":{\"params\":{\"_feeManager\":\"The address of the fee manager\"}},\"setFees(uint256)\":{\"params\":{\"_lockIncentive\":\"Time to lock tokens\"}}},\"title\":\"BalDepositor contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"deposit(uint256,bool,address)\":{\"notice\":\"Locks initial balance of Weth/Bal in Voter Proxy. Then stakes `_amount` of Weth/Bal tokens to veBal contract Mints & stakes d2dBal in Rewards contract on behalf of caller\"},\"depositAll(bool,address)\":{\"notice\":\"Deposits entire Weth/Bal balance of caller. Stakes same amount in Rewards contract\"},\"initialLock()\":{\"notice\":\"Locks initial Weth/Bal balance in veBal contract via voterProxy contract\"},\"lockBalancer()\":{\"notice\":\"Locks tokens in vBal contract and mints reward tokens to sender\"},\"setFeeManager(address)\":{\"notice\":\"Sets the contracts feeManager variable\"},\"setFees(uint256)\":{\"notice\":\"Sets the lock incentive variable\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BalDepositor.sol\":\"BalDepositor\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"contracts/BalDepositor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.14;\\n\\nimport \\\"./utils/Interfaces.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @title BalDepositor contract\\n/// @dev Deposit contract for Prime Pools is based on the convex contract\\ncontract BalDepositor {\\n    event FeeManagerChanged(address newFeeManager);\\n    event LockIncentiveChanged(uint256 newLockIncentive);\\n\\n    error Unauthorized();\\n    error InvalidAmount();\\n\\n    uint256 public constant FEE_DENOMINATOR = 10000;\\n    uint256 private constant MAXTIME = 365 days;\\n    uint256 private constant WEEK = 7 days;\\n\\n    address public immutable wethBal;\\n    address public immutable veBal;\\n    address public immutable staker; // VoterProxy smart contract\\n    address public immutable d2dBal;\\n\\n    address public feeManager;\\n    uint256 public lockIncentive = 10; // incentive to users who spend gas to lock bal\\n    uint256 public incentiveBal;\\n    uint256 public unlockTime;\\n\\n    constructor(\\n        address _wethBal,\\n        address _veBal,\\n        address _staker,\\n        address _d2dBal\\n    ) {\\n        wethBal = _wethBal;\\n        veBal = _veBal;\\n        staker = _staker;\\n        d2dBal = _d2dBal;\\n        feeManager = msg.sender;\\n    }\\n\\n    modifier onlyFeeManager() {\\n        if (msg.sender != feeManager) revert Unauthorized();\\n        _;\\n    }\\n\\n    /// @notice Sets the contracts feeManager variable\\n    /// @param _feeManager The address of the fee manager\\n    function setFeeManager(address _feeManager) external onlyFeeManager {\\n        feeManager = _feeManager;\\n        emit FeeManagerChanged(_feeManager);\\n    }\\n\\n    /// @notice Sets the lock incentive variable\\n    /// @param _lockIncentive Time to lock tokens\\n    function setFees(uint256 _lockIncentive) external onlyFeeManager {\\n        if (_lockIncentive >= 0 && _lockIncentive <= 30) {\\n            lockIncentive = _lockIncentive;\\n            emit LockIncentiveChanged(_lockIncentive);\\n        }\\n    }\\n\\n    /// @notice Locks initial Weth/Bal balance in veBal contract via voterProxy contract\\n    function initialLock() external onlyFeeManager {\\n        uint256 veBalance = IERC20(veBal).balanceOf(staker);\\n        if (veBalance == 0) {\\n            // solhint-disable-next-line\\n            uint256 unlockAt = block.timestamp + MAXTIME;\\n\\n            // release old lock if exists\\n            IVoterProxy(staker).release();\\n            // create new lock\\n            uint256 wethBalBalanceStaker = IERC20(wethBal).balanceOf(staker);\\n            IVoterProxy(staker).createLock(wethBalBalanceStaker, unlockAt);\\n            unlockTime = (unlockAt / WEEK) * WEEK;\\n        }\\n    }\\n\\n    /// @notice Locks tokens in vBal contract and mints reward tokens to sender\\n    /// @dev Needed in order to lockFunds on behalf of someone else\\n    function lockBalancer() external {\\n        _lockBalancer();\\n\\n        // mint incentives\\n        if (incentiveBal > 0) {\\n            ITokenMinter(d2dBal).mint(msg.sender, incentiveBal);\\n            incentiveBal = 0;\\n        }\\n    }\\n\\n    /// @notice Deposits entire Weth/Bal balance of caller. Stakes same amount in Rewards contract\\n    /// @param _stakeAddress The Reward contract address\\n    /// @param _lock boolean whether depositor wants to lock funds immediately\\n    function depositAll(bool _lock, address _stakeAddress) external {\\n        uint256 wethBalBalance = IERC20(wethBal).balanceOf(msg.sender); //This is balancer balance of msg.sender\\n        deposit(wethBalBalance, _lock, _stakeAddress);\\n    }\\n\\n    /// @notice Locks initial balance of Weth/Bal in Voter Proxy. Then stakes `_amount` of Weth/Bal tokens to veBal contract\\n    /// Mints & stakes d2dBal in Rewards contract on behalf of caller\\n    /// @dev VoterProxy `staker` is responsible for sending Weth/Bal tokens to veBal contract via _locktoken()\\n    /// All of the minted d2dBal will be automatically staked to the Rewards contract\\n    /// @param _amount The amount of tokens user wants to stake\\n    /// @param _lock boolean whether depositor wants to lock funds immediately\\n    /// @param _stakeAddress The Reward contract address\\n    function deposit(\\n        uint256 _amount,\\n        bool _lock,\\n        address _stakeAddress\\n    ) public {\\n        if (_amount == 0) {\\n            revert InvalidAmount();\\n        }\\n\\n        if (_lock) {\\n            // lock immediately, transfer directly to staker to skip an erc20 transfer\\n            IERC20(wethBal).transferFrom(msg.sender, staker, _amount);\\n            _lockBalancer();\\n            if (incentiveBal > 0) {\\n                // add the incentive tokens here so they can be staked together\\n                _amount = _amount + incentiveBal;\\n                incentiveBal = 0;\\n            }\\n        } else {\\n            // move tokens here\\n            IERC20(wethBal).transferFrom(msg.sender, address(this), _amount);\\n            // defer lock cost to another user\\n            uint256 callIncentive = ((_amount * lockIncentive) / FEE_DENOMINATOR);\\n            _amount = _amount - callIncentive;\\n\\n            // add to a pool for lock caller\\n            incentiveBal = incentiveBal + callIncentive;\\n        }\\n        // mint here\\n        ITokenMinter(d2dBal).mint(address(this), _amount);\\n        // stake for msg.sender\\n        IERC20(d2dBal).approve(_stakeAddress, _amount);\\n        IRewards(_stakeAddress).stakeFor(msg.sender, _amount);\\n    }\\n\\n    /// @notice Transfers Weth/Bal from VoterProxy `staker` to veBal contract\\n    /// @dev VoterProxy `staker` is responsible for transferring Weth/Bal tokens to veBal contract via increaseAmount()\\n    function _lockBalancer() internal {\\n        // multiple SLOAD -> MLOAD\\n        address wethBalMemory = wethBal;\\n        address stakerMemory = staker;\\n\\n        uint256 wethBalBalance = IERC20(wethBalMemory).balanceOf(address(this));\\n        if (wethBalBalance > 0) {\\n            IERC20(wethBalMemory).transfer(stakerMemory, wethBalBalance);\\n        }\\n\\n        uint256 wethBalBalanceStaker = IERC20(wethBalMemory).balanceOf(stakerMemory);\\n        if (wethBalBalanceStaker == 0) {\\n            return;\\n        }\\n\\n        // increase amount\\n        IVoterProxy(stakerMemory).increaseAmount(wethBalBalanceStaker);\\n\\n        // solhint-disable-next-line\\n        uint256 newUnlockAt = block.timestamp + MAXTIME;\\n        uint256 unlockInWeeks = (newUnlockAt / WEEK) * WEEK;\\n\\n        // We always want to have max voting power on each vote\\n        // Bal voting is a weekly event, and we want to increase time every week\\n        // solhint-disable-next-line\\n        if ((unlockInWeeks - unlockTime) > 2) {\\n            IVoterProxy(stakerMemory).increaseTime(newUnlockAt);\\n            // solhint-disable-next-line\\n            unlockTime = newUnlockAt;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6664a2dd5a9d470dcf58ed92d249e1b808b9a92bdccb63577f9b15add4cc47de\",\"license\":\"MIT\"},\"contracts/utils/Interfaces.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.14;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IBalGauge {\\n    function deposit(uint256) external;\\n\\n    function balanceOf(address) external view returns (uint256);\\n\\n    function withdraw(uint256) external;\\n\\n    function claim_rewards() external;\\n\\n    function reward_tokens(uint256) external view returns (address);\\n\\n    function lp_token() external view returns (address);\\n}\\n\\ninterface IBalVoteEscrow {\\n    function create_lock(uint256, uint256) external;\\n\\n    function increase_amount(uint256) external;\\n\\n    function increase_unlock_time(uint256) external;\\n\\n    function withdraw() external;\\n\\n    function smart_wallet_checker() external view returns (address);\\n\\n    function balanceOf(address, uint256) external view returns (uint256);\\n\\n    function balanceOfAt(address, uint256) external view returns (uint256);\\n}\\n\\ninterface IWalletChecker {\\n    function check(address) external view returns (bool);\\n}\\n\\ninterface IVoting {\\n    function vote_for_gauge_weights(address, uint256) external;\\n}\\n\\ninterface IMinter {\\n    function mint(address) external;\\n}\\n\\ninterface IVoterProxy {\\n    function deposit(address _token, address _gauge) external;\\n\\n    function withdrawWethBal(address, uint256) external;\\n\\n    function withdraw(IERC20 _asset) external returns (uint256 balance);\\n\\n    function withdraw(\\n        address _token,\\n        address _gauge,\\n        uint256 _amount\\n    ) external;\\n\\n    function withdrawAll(address _token, address _gauge) external;\\n\\n    function createLock(uint256 _value, uint256 _unlockTime) external;\\n\\n    function increaseAmount(uint256 _value) external;\\n\\n    function increaseTime(uint256 _unlockTimestamp) external;\\n\\n    function release() external;\\n\\n    function claimBal(address _gauge) external returns (uint256);\\n\\n    function claimRewards(address _gauge) external;\\n\\n    function claimFees(address _distroContract, IERC20 _token) external returns (uint256);\\n\\n    function grantStashAccess(address _stash) external;\\n\\n    function delegateVotingPower(address _delegateTo) external;\\n\\n    function clearDelegate() external;\\n\\n    function voteMultipleGauges(address[] calldata _gauges, uint256[] calldata _weights) external;\\n\\n    function balanceOfPool(address _gauge) external view returns (uint256);\\n\\n    function operator() external view returns (address);\\n\\n    function execute(\\n        address _to,\\n        uint256 _value,\\n        bytes calldata _data\\n    ) external returns (bool, bytes memory);\\n}\\n\\ninterface ISnapshotDelegateRegistry {\\n    function setDelegate(bytes32 id, address delegate) external;\\n\\n    function clearDelegate(bytes32 id) external;\\n}\\n\\ninterface IRewards {\\n    function stake(address, uint256) external;\\n\\n    function stakeFor(address, uint256) external;\\n\\n    function withdraw(address, uint256) external;\\n\\n    function exit(address) external;\\n\\n    function getReward(address) external;\\n\\n    function queueNewRewards(uint256) external;\\n\\n    function notifyRewardAmount(uint256) external;\\n\\n    function addExtraReward(address) external;\\n\\n    function stakingToken() external view returns (address);\\n\\n    function rewardToken() external view returns (address);\\n\\n    function earned(address account) external view returns (uint256);\\n}\\n\\ninterface IStash {\\n    function processStash() external;\\n\\n    function claimRewards() external;\\n\\n    function initialize(\\n        uint256 _pid,\\n        address _operator,\\n        address _gauge,\\n        address _rewardFactory\\n    ) external;\\n}\\n\\ninterface IFeeDistro {\\n    /**\\n     * @notice Claims all pending distributions of the provided token for a user.\\n     * @dev It's not necessary to explicitly checkpoint before calling this function, it will ensure the FeeDistributor\\n     * is up to date before calculating the amount of tokens to be claimed.\\n     * @param user - The user on behalf of which to claim.\\n     * @param token - The ERC20 token address to be claimed.\\n     * @return The amount of `token` sent to `user` as a result of claiming.\\n     */\\n    function claimToken(address user, IERC20 token) external returns (uint256);\\n\\n    /**\\n     * @notice Claims a number of tokens on behalf of a user.\\n     * @dev A version of `claimToken` which supports claiming multiple `tokens` on behalf of `user`.\\n     * See `claimToken` for more details.\\n     * @param user - The user on behalf of which to claim.\\n     * @param tokens - An array of ERC20 token addresses to be claimed.\\n     * @return An array of the amounts of each token in `tokens` sent to `user` as a result of claiming.\\n     */\\n    function claimTokens(address user, IERC20[] calldata tokens) external returns (uint256[] memory);\\n}\\n\\ninterface ITokenMinter {\\n    function mint(address, uint256) external;\\n\\n    function burn(address, uint256) external;\\n}\\n\\ninterface IBaseRewardsPool {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address _account) external view returns (uint256);\\n}\\n\\ninterface IController {\\n    /// @notice returns the number of pools\\n    function poolLength() external returns (uint256);\\n\\n    /// @notice Deposits an amount of LP token into a specific pool,\\n    /// mints reward and optionally tokens and  stakes them into the reward contract\\n    /// @dev Sender must approve LP tokens to Controller smart contract\\n    /// @param _pid The pool id to deposit lp tokens into\\n    /// @param _amount The amount of lp tokens to be deposited\\n    /// @param _stake bool for wheather the tokens should be staked\\n    function deposit(\\n        uint256 _pid,\\n        uint256 _amount,\\n        bool _stake\\n    ) external;\\n\\n    /// @notice Deposits and stakes all LP tokens\\n    /// @dev Sender must approve LP tokens to Controller smart contract\\n    /// @param _pid The pool id to deposit lp tokens into\\n    /// @param _stake bool for wheather the tokens should be staked\\n    function depositAll(uint256 _pid, bool _stake) external;\\n\\n    /// @notice Withdraws lp tokens from the pool\\n    /// @param _pid The pool id to withdraw lp tokens from\\n    /// @param _amount amount of LP tokens to withdraw\\n    function withdraw(uint256 _pid, uint256 _amount) external;\\n\\n    /// @notice Withdraws all of the lp tokens in the pool\\n    /// @param _pid The pool id to withdraw lp tokens from\\n    function withdrawAll(uint256 _pid) external;\\n\\n    /// @notice Withdraws LP tokens and sends them to a specified address\\n    /// @param _pid The pool id to deposit lp tokens into\\n    /// @param _amount amount of LP tokens to withdraw\\n    function withdrawTo(\\n        uint256 _pid,\\n        uint256 _amount,\\n        address _to\\n    ) external;\\n\\n    /// @notice Withdraws `amount` of unlocked WethBal to treasury\\n    /// @param _amount amount of tokens to withdraw\\n    function withdrawUnlockedWethBal(uint256 _amount) external;\\n\\n    /// @notice Claims rewards from a pool and disperses them to the rewards contract\\n    /// @param _pid the id of the pool where lp tokens are held\\n    function earmarkRewards(uint256 _pid) external;\\n\\n    /// @notice Claims fees from the Balancer's fee distributor contract and transfers the tokens into the rewards contract\\n    function earmarkFees() external;\\n\\n    function isShutdown() external view returns (bool);\\n\\n    function poolInfo(uint256)\\n        external\\n        view\\n        returns (\\n            address,\\n            address,\\n            address,\\n            address,\\n            address,\\n            bool\\n        );\\n\\n    function claimRewards(uint256, address) external;\\n\\n    function owner() external returns (address);\\n}\\n\\ninterface ICrvDeposit {\\n    function deposit(uint256, bool) external;\\n\\n    function lockIncentive() external view returns (uint256);\\n}\\n\\ninterface IRewardFactory {\\n    function grantRewardStashAccess(address) external;\\n\\n    function createBalRewards(uint256, address) external returns (address);\\n\\n    function createTokenRewards(\\n        address,\\n        address,\\n        address\\n    ) external returns (address);\\n\\n    function activeRewardCount(address) external view returns (uint256);\\n\\n    function addActiveReward(address, uint256) external returns (bool);\\n\\n    function removeActiveReward(address, uint256) external returns (bool);\\n}\\n\\ninterface IStashFactory {\\n    function createStash(uint256 _pid, address _gauge) external returns (address);\\n}\\n\\ninterface ITokenFactory {\\n    function createDepositToken(address) external returns (address);\\n}\\n\\ninterface IPools {\\n    function addPool(address, address) external returns (bool);\\n\\n    function forceAddPool(address, address) external returns (bool);\\n\\n    function shutdownPool(uint256) external returns (bool);\\n\\n    function poolInfo(uint256)\\n        external\\n        view\\n        returns (\\n            address,\\n            address,\\n            address,\\n            address,\\n            address,\\n            bool\\n        );\\n\\n    function poolLength() external view returns (uint256);\\n\\n    function gaugeMap(address) external view returns (bool);\\n\\n    function setPoolManager(address _poolM) external;\\n}\\n\\ninterface IVestedEscrow {\\n    function fund(address[] calldata _recipient, uint256[] calldata _amount) external returns (bool);\\n}\\n\\ninterface GaugeController {\\n    function gauge_types(address _addr) external returns (int128);\\n}\\n\\ninterface LiquidityGauge {\\n    function integrate_fraction(address _address) external returns (uint256);\\n\\n    function user_checkpoint(address _address) external returns (bool);\\n}\\n\\ninterface IProxyFactory {\\n    function clone(address _target) external returns (address);\\n}\\n\\ninterface IRewardHook {\\n    function onRewardClaim() external;\\n}\\n\",\"keccak256\":\"0x783f796c683929bd6f76e50d71fb1d233e99b603e54146ecdb23907b1f278f8a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100f55760003560e01c80635ebaf1db11610097578063c17af1a711610066578063c17af1a714610217578063c5230deb1461023e578063d0fb020314610247578063d73792a91461026757600080fd5b80635ebaf1db146101ae57806380ed71e4146101d5578063815a90da146101e8578063836f8f201461020f57600080fd5b80633d18678e116100d35780633d18678e14610177578063472d35b91461018a5780634f805abb1461019d57806350940618146101a557600080fd5b8063215537fd146100fa578063251c1aa31461010f57806334bce9031461012b575b600080fd5b61010d610108366004611088565b610270565b005b61011860035481565b6040519081526020015b60405180910390f35b6101527f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610122565b61010d6101853660046110bd565b610333565b61010d6101983660046110d6565b6103c9565b61010d61048d565b61011860015481565b6101527f000000000000000000000000000000000000000000000000000000000000000081565b61010d6101e33660046110f8565b61054f565b6101527f000000000000000000000000000000000000000000000000000000000000000081565b61010d610980565b6101527f000000000000000000000000000000000000000000000000000000000000000081565b61011860025481565b6000546101529073ffffffffffffffffffffffffffffffffffffffff1681565b61011861271081565b6040517f70a082310000000000000000000000000000000000000000000000000000000081523360048201526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906370a0823190602401602060405180830381865afa1580156102fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103219190611136565b905061032e81848461054f565b505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610384576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b601e81116103c65760018190556040518181527f3de926a42b72fa09501ec9644cb235fb5ad75b8263c987761a644d93996976ca906020015b60405180910390a15b50565b60005473ffffffffffffffffffffffffffffffffffffffff16331461041a576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040519081527f45d7e621935e768c84854481fb8a41a30200fbe59f86660d5e02dd876563d898906020016103bd565b610495610ce1565b6002541561054d576002546040517f40c10f1900000000000000000000000000000000000000000000000000000000815233600482015260248101919091527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906340c10f1990604401600060405180830381600087803b15801561052f57600080fd5b505af1158015610543573d6000803e3d6000fd5b5050600060025550505b565b82600003610589576040517f2c5211c600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8115610699576040517f23b872dd00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000081166024830152604482018590527f000000000000000000000000000000000000000000000000000000000000000016906323b872dd906064016020604051808303816000875af115801561064a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061066e919061114f565b50610677610ce1565b600254156106945760025461068c908461119b565b600060025592505b610795565b6040517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018490527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906323b872dd906064016020604051808303816000875af1158015610732573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610756919061114f565b5060006127106001548561076a91906111b3565b61077491906111f0565b9050610780818561122b565b935080600254610790919061119b565b600255505b6040517f40c10f19000000000000000000000000000000000000000000000000000000008152306004820152602481018490527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906340c10f1990604401600060405180830381600087803b15801561082357600080fd5b505af1158015610837573d6000803e3d6000fd5b50506040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8481166004830152602482018790527f000000000000000000000000000000000000000000000000000000000000000016925063095ea7b391506044016020604051808303816000875af11580156108d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108f4919061114f565b506040517f2ee409080000000000000000000000000000000000000000000000000000000081523360048201526024810184905273ffffffffffffffffffffffffffffffffffffffff821690632ee4090890604401600060405180830381600087803b15801561096357600080fd5b505af1158015610977573d6000803e3d6000fd5b50505050505050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146109d1576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000811660048301526000917f0000000000000000000000000000000000000000000000000000000000000000909116906370a0823190602401602060405180830381865afa158015610a82573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aa69190611136565b9050806000036103c6576000610ac06301e133804261119b565b90507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166386d1a69f6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610b2a57600080fd5b505af1158015610b3e573d6000803e3d6000fd5b50506040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000081166004830152600093507f00000000000000000000000000000000000000000000000000000000000000001691506370a0823190602401602060405180830381865afa158015610bf1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c159190611136565b6040517fb52c05fe00000000000000000000000000000000000000000000000000000000815260048101829052602481018490529091507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063b52c05fe90604401600060405180830381600087803b158015610ca757600080fd5b505af1158015610cbb573d6000803e3d6000fd5b5050505062093a808083610ccf91906111f0565b610cd991906111b3565b600355505050565b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201527f0000000000000000000000000000000000000000000000000000000000000000907f00000000000000000000000000000000000000000000000000000000000000009060009073ffffffffffffffffffffffffffffffffffffffff8416906370a0823190602401602060405180830381865afa158015610d92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610db69190611136565b90508015610e59576040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83811660048301526024820183905284169063a9059cbb906044016020604051808303816000875af1158015610e33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e57919061114f565b505b6040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8381166004830152600091908516906370a0823190602401602060405180830381865afa158015610ec9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eed9190611136565b905080600003610efd5750505050565b6040517f15456eba0000000000000000000000000000000000000000000000000000000081526004810182905273ffffffffffffffffffffffffffffffffffffffff8416906315456eba90602401600060405180830381600087803b158015610f6557600080fd5b505af1158015610f79573d6000803e3d6000fd5b5050505060006301e1338042610f8f919061119b565b9050600062093a80610fa181846111f0565b610fab91906111b3565b9050600260035482610fbd919061122b565b1115611049576040517f3c9a2a1a0000000000000000000000000000000000000000000000000000000081526004810183905273ffffffffffffffffffffffffffffffffffffffff861690633c9a2a1a90602401600060405180830381600087803b15801561102b57600080fd5b505af115801561103f573d6000803e3d6000fd5b5050506003839055505b505050505050565b80151581146103c657600080fd5b803573ffffffffffffffffffffffffffffffffffffffff8116811461108357600080fd5b919050565b6000806040838503121561109b57600080fd5b82356110a681611051565b91506110b46020840161105f565b90509250929050565b6000602082840312156110cf57600080fd5b5035919050565b6000602082840312156110e857600080fd5b6110f18261105f565b9392505050565b60008060006060848603121561110d57600080fd5b83359250602084013561111f81611051565b915061112d6040850161105f565b90509250925092565b60006020828403121561114857600080fd5b5051919050565b60006020828403121561116157600080fd5b81516110f181611051565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082198211156111ae576111ae61116c565b500190565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156111eb576111eb61116c565b500290565b600082611226577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b60008282101561123d5761123d61116c565b50039056fea2646970667358221220c7f8b4ba9e7dbef986c08a5051b4bf8d0015270d7b6f7f68a5061fb995302e9f64736f6c634300080e0033",
  "devdoc": {
    "details": "Deposit contract for Prime Pools is based on the convex contract",
    "kind": "dev",
    "methods": {
      "deposit(uint256,bool,address)": {
        "details": "VoterProxy `staker` is responsible for sending Weth/Bal tokens to veBal contract via _locktoken() All of the minted d2dBal will be automatically staked to the Rewards contract",
        "params": {
          "_amount": "The amount of tokens user wants to stake",
          "_lock": "boolean whether depositor wants to lock funds immediately",
          "_stakeAddress": "The Reward contract address"
        }
      },
      "depositAll(bool,address)": {
        "params": {
          "_lock": "boolean whether depositor wants to lock funds immediately",
          "_stakeAddress": "The Reward contract address"
        }
      },
      "lockBalancer()": {
        "details": "Needed in order to lockFunds on behalf of someone else"
      },
      "setFeeManager(address)": {
        "params": {
          "_feeManager": "The address of the fee manager"
        }
      },
      "setFees(uint256)": {
        "params": {
          "_lockIncentive": "Time to lock tokens"
        }
      }
    },
    "title": "BalDepositor contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "deposit(uint256,bool,address)": {
        "notice": "Locks initial balance of Weth/Bal in Voter Proxy. Then stakes `_amount` of Weth/Bal tokens to veBal contract Mints & stakes d2dBal in Rewards contract on behalf of caller"
      },
      "depositAll(bool,address)": {
        "notice": "Deposits entire Weth/Bal balance of caller. Stakes same amount in Rewards contract"
      },
      "initialLock()": {
        "notice": "Locks initial Weth/Bal balance in veBal contract via voterProxy contract"
      },
      "lockBalancer()": {
        "notice": "Locks tokens in vBal contract and mints reward tokens to sender"
      },
      "setFeeManager(address)": {
        "notice": "Sets the contracts feeManager variable"
      },
      "setFees(uint256)": {
        "notice": "Sets the lock incentive variable"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2543,
        "contract": "contracts/BalDepositor.sol:BalDepositor",
        "label": "feeManager",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2546,
        "contract": "contracts/BalDepositor.sol:BalDepositor",
        "label": "lockIncentive",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 2548,
        "contract": "contracts/BalDepositor.sol:BalDepositor",
        "label": "incentiveBal",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 2550,
        "contract": "contracts/BalDepositor.sol:BalDepositor",
        "label": "unlockTime",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}