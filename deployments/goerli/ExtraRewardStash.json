{
  "address": "0x2a1BE0010c62701bc455af6b4025A8d4059D3348",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_bal",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AlreadyInitialized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Unauthorized",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "ExtraRewardsCleared",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newRewardHook",
          "type": "address"
        }
      ],
      "name": "RewardHookSet",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "bal",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "clearExtraRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gauge",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hasBalRewards",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "historicalRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_gauge",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_rFactory",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "operator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "processStash",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardFactory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardHook",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "setExtraReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_hook",
          "type": "address"
        }
      ],
      "name": "setRewardHook",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "rewardAddress",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenList",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x8fa30ddc06f7360bd7a677ec8c3aa28d181ed2374d109fde416574c4f69a39f2",
  "receipt": {
    "to": null,
    "from": "0xbF63Afb77A49159b4502E91CD3f4EbDcc161431f",
    "contractAddress": "0x2a1BE0010c62701bc455af6b4025A8d4059D3348",
    "transactionIndex": 20,
    "gasUsed": "1289812",
    "logsBloom": "0x
    "blockHash": "0x887d35f8d62b039ced9688735aa91bef504376bee7452e04bc8190514b1e9222",
    "transactionHash": "0x8fa30ddc06f7360bd7a677ec8c3aa28d181ed2374d109fde416574c4f69a39f2",
    "logs": [],
    "blockNumber": 7191114,
    "cumulativeGasUsed": "13862291",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xfa8449189744799ad2ace7e0ebac8bb7575eff47"
  ],
  "solcInputHash": "a7d91ab37d5735063eec3feef42edd7e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bal\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyInitialized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ExtraRewardsCleared\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newRewardHook\",\"type\":\"address\"}],\"name\":\"RewardHookSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"bal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clearExtraRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gauge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasBalRewards\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"historicalRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rFactory\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"processStash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardHook\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setExtraReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_hook\",\"type\":\"address\"}],\"name\":\"setRewardHook\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"clearExtraRewards()\":{\"details\":\"Only Prime multising has the ability to do this\"},\"setExtraReward(address)\":{\"details\":\"Used for any new incentive that is not directly on balancer gauges\",\"params\":{\"_token\":\"The reward token address\"}},\"setRewardHook(address)\":{\"params\":{\"_hook\":\"The address of the reward hook\"}}},\"title\":\"ExtraRewardStash\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"claimRewards()\":{\"notice\":\"Claims registered reward tokens\"},\"clearExtraRewards()\":{\"notice\":\"Clears extra rewards\"},\"processStash()\":{\"notice\":\"Sends all of the extra rewards to the reward contracts\"},\"setExtraReward(address)\":{\"notice\":\"Registers an extra reward token to be handled\"},\"setRewardHook(address)\":{\"notice\":\"Sets the reward hook address\"},\"tokenCount()\":{\"notice\":\"Returns the length of the tokenList\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ExtraRewardStash.sol\":\"ExtraRewardStash\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"contracts/ExtraRewardStash.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./utils/Interfaces.sol\\\";\\nimport \\\"./utils/MathUtil.sol\\\";\\n\\n/// @title ExtraRewardStash\\ncontract ExtraRewardStash is IStash {\\n    using SafeERC20 for IERC20;\\n    using MathUtil for uint256;\\n\\n    error Unauthorized();\\n    error AlreadyInitialized();\\n\\n    event RewardHookSet(address newRewardHook);\\n    event ExtraRewardsCleared();\\n\\n    uint256 private constant MAX_REWARDS = 8;\\n    address public immutable bal;\\n\\n    uint256 public pid;\\n    address public operator;\\n    address public gauge;\\n    address public rewardFactory;\\n    address public rewardHook; // address to call for reward pulls\\n    bool public hasBalRewards;\\n\\n    mapping(address => uint256) public historicalRewards;\\n\\n    struct TokenInfo {\\n        address token;\\n        address rewardAddress;\\n    }\\n\\n    // use mapping + array so that we dont have to loop check each time setToken is called\\n    mapping(address => TokenInfo) public tokenInfo;\\n    address[] public tokenList;\\n\\n    constructor(address _bal) {\\n        bal = _bal;\\n    }\\n\\n    function initialize(\\n        uint256 _pid,\\n        address _operator,\\n        address _gauge,\\n        address _rFactory\\n    ) external {\\n        if (gauge != address(0)) {\\n            revert AlreadyInitialized();\\n        }\\n        pid = _pid;\\n        operator = _operator;\\n        gauge = _gauge;\\n        rewardFactory = _rFactory;\\n    }\\n\\n    modifier onlyAddress(address authorizedAddress) {\\n        if (msg.sender != authorizedAddress) {\\n            revert Unauthorized();\\n        }\\n        _;\\n    }\\n\\n    /// @notice Returns the length of the tokenList\\n    function tokenCount() external view returns (uint256) {\\n        return tokenList.length;\\n    }\\n\\n    /// @notice Claims registered reward tokens\\n    function claimRewards() external onlyAddress(operator) {\\n        // this is updateable from v2 gauges now so must check each time.\\n        checkForNewRewardTokens();\\n\\n        if (hasBalRewards) {\\n            // claim rewards on gauge for staker\\n            // using reward_receiver so all rewards will be moved to this stash\\n            IController(operator).claimRewards(pid, gauge);\\n        }\\n\\n        // hook for reward pulls\\n        if (rewardHook != address(0)) {\\n            // solhint-disable-next-line\\n            try IRewardHook(rewardHook).onRewardClaim() {} catch {}\\n        }\\n    }\\n\\n    /// @notice Clears extra rewards\\n    /// @dev Only Prime multising has the ability to do this\\n    function clearExtraRewards() external onlyAddress(IController(operator).owner()) {\\n        delete tokenList;\\n        emit ExtraRewardsCleared();\\n    }\\n\\n    /// @notice Checks if the gauge rewards have changed\\n    function checkForNewRewardTokens() internal {\\n        for (uint256 i = 0; i < MAX_REWARDS; i = i.unsafeInc()) {\\n            address token = IBalGauge(gauge).reward_tokens(i);\\n            if (token == address(0)) {\\n                break;\\n            }\\n            if (!hasBalRewards) {\\n                hasBalRewards = true;\\n            }\\n            setToken(token);\\n        }\\n    }\\n\\n    /// @notice Registers an extra reward token to be handled\\n    /// @param _token The reward token address\\n    /// @dev Used for any new incentive that is not directly on balancer gauges\\n    function setExtraReward(address _token) external onlyAddress(IController(operator).owner()) {\\n        setToken(_token);\\n    }\\n\\n    /// @notice Sets the reward hook address\\n    /// @param _hook The address of the reward hook\\n    function setRewardHook(address _hook) external onlyAddress(IController(operator).owner()) {\\n        rewardHook = _hook;\\n        emit RewardHookSet(_hook);\\n    }\\n\\n    /// @notice Replaces a token on the token list\\n    /// @param _token The address of the token\\n    function setToken(address _token) internal {\\n        TokenInfo storage t = tokenInfo[_token];\\n\\n        //set token address\\n        t.token = _token;\\n\\n        //check if BAL\\n        if (_token != bal) {\\n            //create new reward contract (for NON-BAL tokens only)\\n            (, , , address mainRewardContract, , ) = IController(operator).poolInfo(pid);\\n            address rewardContract = IRewardFactory(rewardFactory).createTokenRewards(\\n                _token,\\n                mainRewardContract,\\n                address(this)\\n            );\\n\\n            t.rewardAddress = rewardContract;\\n        }\\n        //add token to list of known rewards\\n        tokenList.push(_token);\\n    }\\n\\n    /// @notice Sends all of the extra rewards to the reward contracts\\n    function processStash() external onlyAddress(operator) {\\n        uint256 tCount = tokenList.length;\\n        for (uint256 i = 0; i < tCount; i++) {\\n            TokenInfo storage t = tokenInfo[tokenList[i]];\\n            address token = t.token;\\n            if (token == address(0)) continue;\\n\\n            uint256 amount = IERC20(token).balanceOf(address(this));\\n            if (amount > 0) {\\n                historicalRewards[token] = historicalRewards[token] + amount;\\n                if (token == bal) {\\n                    //if BAL, send back to booster to distribute\\n                    IERC20(token).safeTransfer(operator, amount);\\n                    continue;\\n                }\\n                //add to reward contract\\n                address rewards = t.rewardAddress;\\n                IERC20(token).safeTransfer(rewards, amount);\\n                IRewards(rewards).queueNewRewards(amount);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6892a794e3b287605d7d69f64a9ccdf02c234280fa45fd30e30e5734eed52d98\",\"license\":\"MIT\"},\"contracts/utils/Interfaces.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IBalGauge {\\n    function deposit(uint256) external;\\n\\n    function balanceOf(address) external view returns (uint256);\\n\\n    function withdraw(uint256) external;\\n\\n    function claim_rewards() external;\\n\\n    function reward_tokens(uint256) external view returns (address);\\n\\n    function lp_token() external view returns (address);\\n}\\n\\ninterface IBalVoteEscrow {\\n    function create_lock(uint256, uint256) external;\\n\\n    function increase_amount(uint256) external;\\n\\n    function increase_unlock_time(uint256) external;\\n\\n    function withdraw() external;\\n\\n    function smart_wallet_checker() external view returns (address);\\n\\n    function balanceOf(address, uint256) external view returns (uint256);\\n\\n    function balanceOfAt(address, uint256) external view returns (uint256);\\n}\\n\\ninterface IVoting {\\n    function vote_for_gauge_weights(address, uint256) external;\\n}\\n\\ninterface IMinter {\\n    function mint(address) external;\\n}\\n\\ninterface IVoterProxy {\\n    function deposit(address _token, address _gauge) external;\\n\\n    function withdrawWethBal(address, uint256) external;\\n\\n    function withdraw(\\n        address _token,\\n        address _gauge,\\n        uint256 _amount\\n    ) external;\\n\\n    function withdrawAll(address _token, address _gauge) external;\\n\\n    function createLock(uint256 _value, uint256 _unlockTime) external;\\n\\n    function increaseAmount(uint256 _value) external;\\n\\n    function increaseTime(uint256 _unlockTimestamp) external;\\n\\n    function release() external;\\n\\n    function claimBal(address _gauge) external returns (uint256);\\n\\n    function claimRewards(address _gauge) external;\\n\\n    function claimFees(address _distroContract, IERC20[] calldata _tokens) external;\\n\\n    function delegateVotingPower(address _delegateTo) external;\\n\\n    function clearDelegate() external;\\n\\n    function voteMultipleGauges(address[] calldata _gauges, uint256[] calldata _weights) external;\\n\\n    function balanceOfPool(address _gauge) external view returns (uint256);\\n\\n    function operator() external view returns (address);\\n\\n    function execute(\\n        address _to,\\n        uint256 _value,\\n        bytes calldata _data\\n    ) external returns (bool, bytes memory);\\n}\\n\\ninterface ISnapshotDelegateRegistry {\\n    function setDelegate(bytes32 id, address delegate) external;\\n\\n    function clearDelegate(bytes32 id) external;\\n}\\n\\ninterface IRewards {\\n    function stake(address, uint256) external;\\n\\n    function stakeFor(address, uint256) external;\\n\\n    function withdraw(address, uint256) external;\\n\\n    function exit(address) external;\\n\\n    function getReward(address) external;\\n\\n    function queueNewRewards(uint256) external;\\n\\n    function notifyRewardAmount(uint256) external;\\n\\n    function addExtraReward(address) external;\\n\\n    function stakingToken() external view returns (address);\\n\\n    function rewardToken() external view returns (address);\\n\\n    function earned(address account) external view returns (uint256);\\n}\\n\\ninterface IStash {\\n    function processStash() external;\\n\\n    function claimRewards() external;\\n\\n    function initialize(\\n        uint256 _pid,\\n        address _operator,\\n        address _gauge,\\n        address _rewardFactory\\n    ) external;\\n}\\n\\ninterface IFeeDistro {\\n    /**\\n     * @notice Claims all pending distributions of the provided token for a user.\\n     * @dev It's not necessary to explicitly checkpoint before calling this function, it will ensure the FeeDistributor\\n     * is up to date before calculating the amount of tokens to be claimed.\\n     * @param user - The user on behalf of which to claim.\\n     * @param token - The ERC20 token address to be claimed.\\n     * @return The amount of `token` sent to `user` as a result of claiming.\\n     */\\n    function claimToken(address user, IERC20 token) external returns (uint256);\\n\\n    /**\\n     * @notice Claims a number of tokens on behalf of a user.\\n     * @dev A version of `claimToken` which supports claiming multiple `tokens` on behalf of `user`.\\n     * See `claimToken` for more details.\\n     * @param user - The user on behalf of which to claim.\\n     * @param tokens - An array of ERC20 token addresses to be claimed.\\n     * @return An array of the amounts of each token in `tokens` sent to `user` as a result of claiming.\\n     */\\n    function claimTokens(address user, IERC20[] calldata tokens) external returns (uint256[] memory);\\n}\\n\\ninterface ITokenMinter {\\n    function mint(address, uint256) external;\\n\\n    function burn(address, uint256) external;\\n}\\n\\ninterface IBaseRewardsPool {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address _account) external view returns (uint256);\\n}\\n\\ninterface IController {\\n    /// @notice returns the number of pools\\n    function poolLength() external returns (uint256);\\n\\n    /// @notice Deposits an amount of LP token into a specific pool,\\n    /// mints reward and optionally tokens and  stakes them into the reward contract\\n    /// @dev Sender must approve LP tokens to Controller smart contract\\n    /// @param _pid The pool id to deposit lp tokens into\\n    /// @param _amount The amount of lp tokens to be deposited\\n    /// @param _stake bool for wheather the tokens should be staked\\n    function deposit(\\n        uint256 _pid,\\n        uint256 _amount,\\n        bool _stake\\n    ) external;\\n\\n    /// @notice Deposits and stakes all LP tokens\\n    /// @dev Sender must approve LP tokens to Controller smart contract\\n    /// @param _pid The pool id to deposit lp tokens into\\n    /// @param _stake bool for wheather the tokens should be staked\\n    function depositAll(uint256 _pid, bool _stake) external;\\n\\n    /// @notice Withdraws lp tokens from the pool\\n    /// @param _pid The pool id to withdraw lp tokens from\\n    /// @param _amount amount of LP tokens to withdraw\\n    function withdraw(uint256 _pid, uint256 _amount) external;\\n\\n    /// @notice Withdraws all of the lp tokens in the pool\\n    /// @param _pid The pool id to withdraw lp tokens from\\n    function withdrawAll(uint256 _pid) external;\\n\\n    /// @notice Withdraws LP tokens and sends them to a specified address\\n    /// @param _pid The pool id to deposit lp tokens into\\n    /// @param _amount amount of LP tokens to withdraw\\n    function withdrawTo(\\n        uint256 _pid,\\n        uint256 _amount,\\n        address _to\\n    ) external;\\n\\n    /// @notice Withdraws `amount` of unlocked WethBal to treasury\\n    /// @param _amount amount of tokens to withdraw\\n    function withdrawUnlockedWethBal(uint256 _amount) external;\\n\\n    /// @notice Claims rewards from a pool and disperses them to the rewards contract\\n    /// @param _pid the id of the pool where lp tokens are held\\n    function earmarkRewards(uint256 _pid) external;\\n\\n    /// @notice Claims rewards from the Balancer's fee distributor contract and transfers the tokens into the rewards contract\\n    function earmarkFees() external;\\n\\n    function isShutdown() external view returns (bool);\\n\\n    function poolInfo(uint256)\\n        external\\n        view\\n        returns (\\n            address,\\n            address,\\n            address,\\n            address,\\n            address,\\n            bool\\n        );\\n\\n    function claimRewards(uint256, address) external;\\n\\n    function owner() external returns (address);\\n}\\n\\ninterface IRewardFactory {\\n    function grantRewardStashAccess(address) external;\\n\\n    function createBalRewards(uint256, address) external returns (address);\\n\\n    function createTokenRewards(\\n        address,\\n        address,\\n        address\\n    ) external returns (address);\\n\\n    function activeRewardCount(address) external view returns (uint256);\\n\\n    function addActiveReward(address, uint256) external returns (bool);\\n\\n    function removeActiveReward(address, uint256) external returns (bool);\\n}\\n\\ninterface IStashFactory {\\n    function createStash(uint256 _pid, address _gauge) external returns (address);\\n}\\n\\ninterface ITokenFactory {\\n    function createDepositToken(address) external returns (address);\\n}\\n\\ninterface IProxyFactory {\\n    function clone(address _target) external returns (address);\\n}\\n\\ninterface IRewardHook {\\n    function onRewardClaim() external;\\n}\\n\",\"keccak256\":\"0x21bc9a48fc7835af7aff012e20ff2bff5c749a65e066d5799e21c7fda85bd059\",\"license\":\"MIT\"},\"contracts/utils/MathUtil.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\n// copied from https://github.com/Uniswap/v2-core/blob/master/contracts/libraries/SafeMath.sol\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUtil {\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /// @dev Gas optimization for loops that iterate over extra rewards\\n    /// We know that this can't overflow because we can't interate over big arrays\\n    function unsafeInc(uint256 x) internal pure returns (uint256) {\\n        unchecked {\\n            return x + 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8969c0e7b65ca3bf8e8c76ea850d4b02e488c94e25735fe6b2c55b4ae14416a4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b5060405161171c38038061171c83398101604081905261002f91610040565b6001600160a01b0316608052610070565b60006020828403121561005257600080fd5b81516001600160a01b038116811461006957600080fd5b9392505050565b608051611683610099600039600081816101a701528181610aec0152610c5a01526116836000f3fe608060405234801561001057600080fd5b506004361061011b5760003560e01c8063754d1d54116100b2578063ca8b017611610081578063e0a5095111610066578063e0a5095114610289578063f1068454146102be578063f5dab711146102c757600080fd5b8063ca8b017614610261578063cb00aa731461026957600080fd5b8063754d1d54146102095780639ead72221461021c5780639f181b5e1461022f578063a6f19c841461024157600080fd5b8063372500ab116100ee578063372500ab1461019a5780633d79d1c8146101a257806344214ecf146101c9578063570ca735146101e957600080fd5b80630569d388146101205780630d5225de1461012a5780632223686f1461013d578063245e4bf014610150575b600080fd5b610128610335565b005b610128610138366004611391565b61044f565b61012861014b366004611391565b6105ab565b6003546101709073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b61012861069a565b6101707f000000000000000000000000000000000000000000000000000000000000000081565b6004546101709073ffffffffffffffffffffffffffffffffffffffff1681565b6001546101709073ffffffffffffffffffffffffffffffffffffffff1681565b6101286102173660046113ae565b610844565b61017061022a366004611401565b6108fe565b6007545b604051908152602001610191565b6002546101709073ffffffffffffffffffffffffffffffffffffffff1681565b610128610935565b610233610277366004611391565b60056020526000908152604090205481565b6004546102ae9074010000000000000000000000000000000000000000900460ff1681565b6040519015158152602001610191565b61023360005481565b6103086102d5366004611391565b6006602052600090815260409020805460019091015473ffffffffffffffffffffffffffffffffffffffff918216911682565b6040805173ffffffffffffffffffffffffffffffffffffffff938416815292909116602083015201610191565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b81526004016020604051808303816000875af11580156103a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103c8919061141a565b3373ffffffffffffffffffffffffffffffffffffffff821614610417576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6104236007600061133d565b6040517f1a53a10dfbef82dfcf34ce946c284b478164f6e7496a07fc0cbe69d01ff44f0990600090a150565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b81526004016020604051808303816000875af11580156104be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104e2919061141a565b3373ffffffffffffffffffffffffffffffffffffffff821614610531576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600480547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff84169081179091556040519081527fd6665c7fd9e04cb4f58d8bd09095b335663c64fe4e75463435fe373a2da6337c9060200160405180910390a15050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b81526004016020604051808303816000875af115801561061a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061063e919061141a565b3373ffffffffffffffffffffffffffffffffffffffff82161461068d576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61069682610c09565b5050565b60015473ffffffffffffffffffffffffffffffffffffffff163381146106ec576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6106f4610e8c565b60045474010000000000000000000000000000000000000000900460ff16156107ab576001546000546002546040517f6c7b69cb000000000000000000000000000000000000000000000000000000008152600481019290925273ffffffffffffffffffffffffffffffffffffffff908116602483015290911690636c7b69cb90604401600060405180830381600087803b15801561079257600080fd5b505af11580156107a6573d6000803e3d6000fd5b505050505b60045473ffffffffffffffffffffffffffffffffffffffff16156108415760048054604080517f2663fcfc000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff90921692632663fcfc92828201926000929082900301818387803b15801561083257600080fd5b505af192505050801561069657505b50565b60025473ffffffffffffffffffffffffffffffffffffffff1615610894576040517f0dc149f000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600093909355600180547fffffffffffffffffffffffff000000000000000000000000000000000000000090811673ffffffffffffffffffffffffffffffffffffffff94851617909155600280548216928416929092179091556003805490911691909216179055565b6007818154811061090e57600080fd5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b60015473ffffffffffffffffffffffffffffffffffffffff16338114610987576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60075460005b81811015610c0457600060066000600784815481106109ae576109ae611437565b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff90811684529083019390935260409091019020805490925016806109f6575050610bf2565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009073ffffffffffffffffffffffffffffffffffffffff8316906370a0823190602401602060405180830381865afa158015610a63573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a879190611466565b90508015610bee5773ffffffffffffffffffffffffffffffffffffffff8216600090815260056020526040902054610ac09082906114ae565b73ffffffffffffffffffffffffffffffffffffffff8084166000818152600560205260409020929092557f0000000000000000000000000000000000000000000000000000000000000000169003610b4157600154610b399073ffffffffffffffffffffffffffffffffffffffff848116911683610fc1565b505050610bf2565b600183015473ffffffffffffffffffffffffffffffffffffffff90811690610b6c9084168284610fc1565b6040517f590a41f50000000000000000000000000000000000000000000000000000000081526004810183905273ffffffffffffffffffffffffffffffffffffffff82169063590a41f590602401600060405180830381600087803b158015610bd457600080fd5b505af1158015610be8573d6000803e3d6000fd5b50505050505b5050505b80610bfc816114c6565b91505061098d565b505050565b73ffffffffffffffffffffffffffffffffffffffff808216600081815260066020526040902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001682178155917f00000000000000000000000000000000000000000000000000000000000000001614610e1457600154600080546040517f1526fe27000000000000000000000000000000000000000000000000000000008152919273ffffffffffffffffffffffffffffffffffffffff1691631526fe2791610cdb9160040190815260200190565b60c060405180830381865afa158015610cf8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d1c9190611513565b50506003546040517f2f1b327100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff898116600483015280841660248301523060448301529296506000955091169250632f1b327191506064016020604051808303816000875af1158015610da6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dca919061141a565b6001840180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff9290921691909117905550505b50600780546001810182556000919091527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6880180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60005b6008811015610841576002546040517f54c49fe90000000000000000000000000000000000000000000000000000000081526004810183905260009173ffffffffffffffffffffffffffffffffffffffff16906354c49fe990602401602060405180830381865afa158015610f08573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f2c919061141a565b905073ffffffffffffffffffffffffffffffffffffffff8116610f4d575050565b60045474010000000000000000000000000000000000000000900460ff16610faf57600480547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16740100000000000000000000000000000000000000001790555b610fb881610c09565b50600101610e8f565b6040805173ffffffffffffffffffffffffffffffffffffffff848116602483015260448083018590528351808403909101815260649092018352602080830180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb0000000000000000000000000000000000000000000000000000000017905283518085019094528084527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656490840152610c049286929160009161108c91851690849061113b565b805190915015610c0457808060200190518101906110aa9190611595565b610c04576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b606061114a8484600085611154565b90505b9392505050565b6060824710156111e6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401611132565b73ffffffffffffffffffffffffffffffffffffffff85163b611264576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401611132565b6000808673ffffffffffffffffffffffffffffffffffffffff16858760405161128d91906115e0565b60006040518083038185875af1925050503d80600081146112ca576040519150601f19603f3d011682016040523d82523d6000602084013e6112cf565b606091505b50915091506112df8282866112ea565b979650505050505050565b606083156112f957508161114d565b8251156113095782518084602001fd5b816040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161113291906115fc565b508054600082559060005260206000209081019061084191905b8082111561136b5760008155600101611357565b5090565b73ffffffffffffffffffffffffffffffffffffffff8116811461084157600080fd5b6000602082840312156113a357600080fd5b813561114d8161136f565b600080600080608085870312156113c457600080fd5b8435935060208501356113d68161136f565b925060408501356113e68161136f565b915060608501356113f68161136f565b939692955090935050565b60006020828403121561141357600080fd5b5035919050565b60006020828403121561142c57600080fd5b815161114d8161136f565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006020828403121561147857600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082198211156114c1576114c161147f565b500190565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036114f7576114f761147f565b5060010190565b8051801515811461150e57600080fd5b919050565b60008060008060008060c0878903121561152c57600080fd5b86516115378161136f565b60208801519096506115488161136f565b60408801519095506115598161136f565b606088015190945061156a8161136f565b608088015190935061157b8161136f565b915061158960a088016114fe565b90509295509295509295565b6000602082840312156115a757600080fd5b61114d826114fe565b60005b838110156115cb5781810151838201526020016115b3565b838111156115da576000848401525b50505050565b600082516115f28184602087016115b0565b9190910192915050565b602081526000825180602084015261161b8160408501602087016115b0565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016040019291505056fea26469706673582212202f875abbaac2366f5df23dcb3b537c67afae39b00ea6446dabb24f88dd138ed964736f6c634300080f0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061011b5760003560e01c8063754d1d54116100b2578063ca8b017611610081578063e0a5095111610066578063e0a5095114610289578063f1068454146102be578063f5dab711146102c757600080fd5b8063ca8b017614610261578063cb00aa731461026957600080fd5b8063754d1d54146102095780639ead72221461021c5780639f181b5e1461022f578063a6f19c841461024157600080fd5b8063372500ab116100ee578063372500ab1461019a5780633d79d1c8146101a257806344214ecf146101c9578063570ca735146101e957600080fd5b80630569d388146101205780630d5225de1461012a5780632223686f1461013d578063245e4bf014610150575b600080fd5b610128610335565b005b610128610138366004611391565b61044f565b61012861014b366004611391565b6105ab565b6003546101709073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b61012861069a565b6101707f000000000000000000000000000000000000000000000000000000000000000081565b6004546101709073ffffffffffffffffffffffffffffffffffffffff1681565b6001546101709073ffffffffffffffffffffffffffffffffffffffff1681565b6101286102173660046113ae565b610844565b61017061022a366004611401565b6108fe565b6007545b604051908152602001610191565b6002546101709073ffffffffffffffffffffffffffffffffffffffff1681565b610128610935565b610233610277366004611391565b60056020526000908152604090205481565b6004546102ae9074010000000000000000000000000000000000000000900460ff1681565b6040519015158152602001610191565b61023360005481565b6103086102d5366004611391565b6006602052600090815260409020805460019091015473ffffffffffffffffffffffffffffffffffffffff918216911682565b6040805173ffffffffffffffffffffffffffffffffffffffff938416815292909116602083015201610191565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b81526004016020604051808303816000875af11580156103a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103c8919061141a565b3373ffffffffffffffffffffffffffffffffffffffff821614610417576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6104236007600061133d565b6040517f1a53a10dfbef82dfcf34ce946c284b478164f6e7496a07fc0cbe69d01ff44f0990600090a150565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b81526004016020604051808303816000875af11580156104be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104e2919061141a565b3373ffffffffffffffffffffffffffffffffffffffff821614610531576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600480547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff84169081179091556040519081527fd6665c7fd9e04cb4f58d8bd09095b335663c64fe4e75463435fe373a2da6337c9060200160405180910390a15050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b81526004016020604051808303816000875af115801561061a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061063e919061141a565b3373ffffffffffffffffffffffffffffffffffffffff82161461068d576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61069682610c09565b5050565b60015473ffffffffffffffffffffffffffffffffffffffff163381146106ec576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6106f4610e8c565b60045474010000000000000000000000000000000000000000900460ff16156107ab576001546000546002546040517f6c7b69cb000000000000000000000000000000000000000000000000000000008152600481019290925273ffffffffffffffffffffffffffffffffffffffff908116602483015290911690636c7b69cb90604401600060405180830381600087803b15801561079257600080fd5b505af11580156107a6573d6000803e3d6000fd5b505050505b60045473ffffffffffffffffffffffffffffffffffffffff16156108415760048054604080517f2663fcfc000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff90921692632663fcfc92828201926000929082900301818387803b15801561083257600080fd5b505af192505050801561069657505b50565b60025473ffffffffffffffffffffffffffffffffffffffff1615610894576040517f0dc149f000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600093909355600180547fffffffffffffffffffffffff000000000000000000000000000000000000000090811673ffffffffffffffffffffffffffffffffffffffff94851617909155600280548216928416929092179091556003805490911691909216179055565b6007818154811061090e57600080fd5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b60015473ffffffffffffffffffffffffffffffffffffffff16338114610987576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60075460005b81811015610c0457600060066000600784815481106109ae576109ae611437565b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff90811684529083019390935260409091019020805490925016806109f6575050610bf2565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009073ffffffffffffffffffffffffffffffffffffffff8316906370a0823190602401602060405180830381865afa158015610a63573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a879190611466565b90508015610bee5773ffffffffffffffffffffffffffffffffffffffff8216600090815260056020526040902054610ac09082906114ae565b73ffffffffffffffffffffffffffffffffffffffff8084166000818152600560205260409020929092557f0000000000000000000000000000000000000000000000000000000000000000169003610b4157600154610b399073ffffffffffffffffffffffffffffffffffffffff848116911683610fc1565b505050610bf2565b600183015473ffffffffffffffffffffffffffffffffffffffff90811690610b6c9084168284610fc1565b6040517f590a41f50000000000000000000000000000000000000000000000000000000081526004810183905273ffffffffffffffffffffffffffffffffffffffff82169063590a41f590602401600060405180830381600087803b158015610bd457600080fd5b505af1158015610be8573d6000803e3d6000fd5b50505050505b5050505b80610bfc816114c6565b91505061098d565b505050565b73ffffffffffffffffffffffffffffffffffffffff808216600081815260066020526040902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001682178155917f00000000000000000000000000000000000000000000000000000000000000001614610e1457600154600080546040517f1526fe27000000000000000000000000000000000000000000000000000000008152919273ffffffffffffffffffffffffffffffffffffffff1691631526fe2791610cdb9160040190815260200190565b60c060405180830381865afa158015610cf8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d1c9190611513565b50506003546040517f2f1b327100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff898116600483015280841660248301523060448301529296506000955091169250632f1b327191506064016020604051808303816000875af1158015610da6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dca919061141a565b6001840180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff9290921691909117905550505b50600780546001810182556000919091527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6880180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60005b6008811015610841576002546040517f54c49fe90000000000000000000000000000000000000000000000000000000081526004810183905260009173ffffffffffffffffffffffffffffffffffffffff16906354c49fe990602401602060405180830381865afa158015610f08573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f2c919061141a565b905073ffffffffffffffffffffffffffffffffffffffff8116610f4d575050565b60045474010000000000000000000000000000000000000000900460ff16610faf57600480547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16740100000000000000000000000000000000000000001790555b610fb881610c09565b50600101610e8f565b6040805173ffffffffffffffffffffffffffffffffffffffff848116602483015260448083018590528351808403909101815260649092018352602080830180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb0000000000000000000000000000000000000000000000000000000017905283518085019094528084527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656490840152610c049286929160009161108c91851690849061113b565b805190915015610c0457808060200190518101906110aa9190611595565b610c04576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b606061114a8484600085611154565b90505b9392505050565b6060824710156111e6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401611132565b73ffffffffffffffffffffffffffffffffffffffff85163b611264576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401611132565b6000808673ffffffffffffffffffffffffffffffffffffffff16858760405161128d91906115e0565b60006040518083038185875af1925050503d80600081146112ca576040519150601f19603f3d011682016040523d82523d6000602084013e6112cf565b606091505b50915091506112df8282866112ea565b979650505050505050565b606083156112f957508161114d565b8251156113095782518084602001fd5b816040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161113291906115fc565b508054600082559060005260206000209081019061084191905b8082111561136b5760008155600101611357565b5090565b73ffffffffffffffffffffffffffffffffffffffff8116811461084157600080fd5b6000602082840312156113a357600080fd5b813561114d8161136f565b600080600080608085870312156113c457600080fd5b8435935060208501356113d68161136f565b925060408501356113e68161136f565b915060608501356113f68161136f565b939692955090935050565b60006020828403121561141357600080fd5b5035919050565b60006020828403121561142c57600080fd5b815161114d8161136f565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006020828403121561147857600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082198211156114c1576114c161147f565b500190565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036114f7576114f761147f565b5060010190565b8051801515811461150e57600080fd5b919050565b60008060008060008060c0878903121561152c57600080fd5b86516115378161136f565b60208801519096506115488161136f565b60408801519095506115598161136f565b606088015190945061156a8161136f565b608088015190935061157b8161136f565b915061158960a088016114fe565b90509295509295509295565b6000602082840312156115a757600080fd5b61114d826114fe565b60005b838110156115cb5781810151838201526020016115b3565b838111156115da576000848401525b50505050565b600082516115f28184602087016115b0565b9190910192915050565b602081526000825180602084015261161b8160408501602087016115b0565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016040019291505056fea26469706673582212202f875abbaac2366f5df23dcb3b537c67afae39b00ea6446dabb24f88dd138ed964736f6c634300080f0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "clearExtraRewards()": {
        "details": "Only Prime multising has the ability to do this"
      },
      "setExtraReward(address)": {
        "details": "Used for any new incentive that is not directly on balancer gauges",
        "params": {
          "_token": "The reward token address"
        }
      },
      "setRewardHook(address)": {
        "params": {
          "_hook": "The address of the reward hook"
        }
      }
    },
    "title": "ExtraRewardStash",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "claimRewards()": {
        "notice": "Claims registered reward tokens"
      },
      "clearExtraRewards()": {
        "notice": "Clears extra rewards"
      },
      "processStash()": {
        "notice": "Sends all of the extra rewards to the reward contracts"
      },
      "setExtraReward(address)": {
        "notice": "Registers an extra reward token to be handled"
      },
      "setRewardHook(address)": {
        "notice": "Sets the reward hook address"
      },
      "tokenCount()": {
        "notice": "Returns the length of the tokenList"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5638,
        "contract": "contracts/ExtraRewardStash.sol:ExtraRewardStash",
        "label": "pid",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 5640,
        "contract": "contracts/ExtraRewardStash.sol:ExtraRewardStash",
        "label": "operator",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 5642,
        "contract": "contracts/ExtraRewardStash.sol:ExtraRewardStash",
        "label": "gauge",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 5644,
        "contract": "contracts/ExtraRewardStash.sol:ExtraRewardStash",
        "label": "rewardFactory",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 5646,
        "contract": "contracts/ExtraRewardStash.sol:ExtraRewardStash",
        "label": "rewardHook",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 5648,
        "contract": "contracts/ExtraRewardStash.sol:ExtraRewardStash",
        "label": "hasBalRewards",
        "offset": 20,
        "slot": "4",
        "type": "t_bool"
      },
      {
        "astId": 5652,
        "contract": "contracts/ExtraRewardStash.sol:ExtraRewardStash",
        "label": "historicalRewards",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 5662,
        "contract": "contracts/ExtraRewardStash.sol:ExtraRewardStash",
        "label": "tokenInfo",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_struct(TokenInfo)5657_storage)"
      },
      {
        "astId": 5665,
        "contract": "contracts/ExtraRewardStash.sol:ExtraRewardStash",
        "label": "tokenList",
        "offset": 0,
        "slot": "7",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(TokenInfo)5657_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ExtraRewardStash.TokenInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenInfo)5657_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(TokenInfo)5657_storage": {
        "encoding": "inplace",
        "label": "struct ExtraRewardStash.TokenInfo",
        "members": [
          {
            "astId": 5654,
            "contract": "contracts/ExtraRewardStash.sol:ExtraRewardStash",
            "label": "token",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 5656,
            "contract": "contracts/ExtraRewardStash.sol:ExtraRewardStash",
            "label": "rewardAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}