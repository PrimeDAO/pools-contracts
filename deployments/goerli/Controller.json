{
  "address": "0xbad3492fB518dBA222F8B7f09b1Ef6E45A44929d",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_staker",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_bal",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_feeDistro",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "InvalidParameters",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidStash",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PoolIsClosed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RedirectFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Shutdown",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Unauthorized",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_lpToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_gauge",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_baseRewardsPool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_stash",
          "type": "address"
        }
      ],
      "name": "AddedPool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "_stake",
          "type": "bool"
        }
      ],
      "name": "Deposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_newFeeManager",
          "type": "address"
        }
      ],
      "name": "FeeManagerChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "FeeTokensCleared",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_newPlatformFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_newProfitFee",
          "type": "uint256"
        }
      ],
      "name": "FeesChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_newOwner",
          "type": "address"
        }
      ],
      "name": "OwnerChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_newPoolManager",
          "type": "address"
        }
      ],
      "name": "PoolManagerChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "PoolShutDown",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "SystemShutdown",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_newTreasury",
          "type": "address"
        }
      ],
      "name": "TreasuryChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_newVoteDelegate",
          "type": "address"
        }
      ],
      "name": "VoteDelegateChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "FEE_DENOMINATOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_FEES",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_LOCK_TIME",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_feeToken",
          "type": "address"
        }
      ],
      "name": "addFeeToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lptoken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_gauge",
          "type": "address"
        }
      ],
      "name": "addPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bal",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_startPoolIdx",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_endPoolIdx",
          "type": "uint256"
        }
      ],
      "name": "bulkPoolShutdown",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "canClaim",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_gauge",
          "type": "address"
        }
      ],
      "name": "claimRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "clearDelegation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "clearFeeTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_delegateTo",
          "type": "address"
        }
      ],
      "name": "delegateVotingPower",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_stake",
          "type": "bool"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_stake",
          "type": "bool"
        }
      ],
      "name": "depositAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "earmarkFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "earmarkRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeDistro",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "feeTokenToPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "feeTokens",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeTokensLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "gaugeMap",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isShutdown",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockRewards",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "platformFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "poolInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "lptoken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "gauge",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "balRewards",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "stash",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "shutdown",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "profitFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "redeemWethBal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardFactory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rfactory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_sfactory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tfactory",
          "type": "address"
        }
      ],
      "name": "setFactories",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeM",
          "type": "address"
        }
      ],
      "name": "setFeeManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_platformFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_profitFee",
          "type": "uint256"
        }
      ],
      "name": "setFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "setOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_poolM",
          "type": "address"
        }
      ],
      "name": "setPoolManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewards",
          "type": "address"
        }
      ],
      "name": "setRewardContracts",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "name": "setTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_voteDelegate",
          "type": "address"
        }
      ],
      "name": "setVoteDelegate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "shutdownSystem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "staker",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stashFactory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenFactory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "voteDelegate",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_gauges",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_weights",
          "type": "uint256[]"
        }
      ],
      "name": "voteGaugeWeight",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "withdrawAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "withdrawTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawUnlockedWethBal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x12b310591e435d7f55e8d2e5ae6834522a793f3e115b925114a2abdc9ae201e1",
  "receipt": {
    "to": null,
    "from": "0xbF63Afb77A49159b4502E91CD3f4EbDcc161431f",
    "contractAddress": "0xbad3492fB518dBA222F8B7f09b1Ef6E45A44929d",
    "transactionIndex": 6,
    "gasUsed": "3825788",
    "logsBloom": "0x
    "blockHash": "0x7a1a4d89e5ef28b94df6f54507b296e84ddea6deb2a5ef3df95ff930599cf6fa",
    "transactionHash": "0x12b310591e435d7f55e8d2e5ae6834522a793f3e115b925114a2abdc9ae201e1",
    "logs": [],
    "blockNumber": 7338363,
    "cumulativeGasUsed": "7088695",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x3495698Ca1ce983B8bE5814C2b7f8EB00E423a82",
    "0xfa8449189744799ad2ace7e0ebac8bb7575eff47",
    "0x7F91dcdE02F72b478Dc73cB21730cAcA907c8c44"
  ],
  "solcInputHash": "7e57f81a6be83430d315781a62c52ee2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bal\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeDistro\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidParameters\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidStash\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PoolIsClosed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RedirectFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Shutdown\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_baseRewardsPool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_stash\",\"type\":\"address\"}],\"name\":\"AddedPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_stake\",\"type\":\"bool\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newFeeManager\",\"type\":\"address\"}],\"name\":\"FeeManagerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"FeeTokensCleared\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newPlatformFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newProfitFee\",\"type\":\"uint256\"}],\"name\":\"FeesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newPoolManager\",\"type\":\"address\"}],\"name\":\"PoolManagerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"PoolShutDown\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"SystemShutdown\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newTreasury\",\"type\":\"address\"}],\"name\":\"TreasuryChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newVoteDelegate\",\"type\":\"address\"}],\"name\":\"VoteDelegateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FEE_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_FEES\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_LOCK_TIME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_feeToken\",\"type\":\"address\"}],\"name\":\"addFeeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lptoken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"}],\"name\":\"addPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startPoolIdx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endPoolIdx\",\"type\":\"uint256\"}],\"name\":\"bulkPoolShutdown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canClaim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"}],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clearDelegation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clearFeeTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_delegateTo\",\"type\":\"address\"}],\"name\":\"delegateVotingPower\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_stake\",\"type\":\"bool\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_stake\",\"type\":\"bool\"}],\"name\":\"depositAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"earmarkFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"earmarkRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeDistro\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"feeTokenToPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"feeTokens\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeTokensLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"gaugeMap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isShutdown\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockRewards\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"platformFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"lptoken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"balRewards\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stash\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"shutdown\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"profitFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeemWethBal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rfactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sfactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tfactory\",\"type\":\"address\"}],\"name\":\"setFactories\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeM\",\"type\":\"address\"}],\"name\":\"setFeeManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_platformFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_profitFee\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolM\",\"type\":\"address\"}],\"name\":\"setPoolManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewards\",\"type\":\"address\"}],\"name\":\"setRewardContracts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_voteDelegate\",\"type\":\"address\"}],\"name\":\"setVoteDelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shutdownSystem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"staker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stashFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"voteDelegate\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_gauges\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_weights\",\"type\":\"uint256[]\"}],\"name\":\"voteGaugeWeight\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdrawTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawUnlockedWethBal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Controller contract for Prime Pools is based on the convex Booster.sol contract\",\"kind\":\"dev\",\"methods\":{\"addFeeToken(address)\":{\"params\":{\"_feeToken\":\"feeToken\"}},\"addPool(address,address)\":{\"params\":{\"_gauge\":\"The address of the gauge controller\",\"_lptoken\":\"The address of the lp token\"}},\"bulkPoolShutdown(uint256,uint256)\":{\"details\":\"Claims rewards for that pool before shutting it down\",\"params\":{\"_endPoolIdx\":\"End pool index (excluded)\",\"_startPoolIdx\":\"Start pool index\"}},\"claimRewards(uint256,address)\":{\"params\":{\"_gauge\":\"address of the gauge\",\"_pid\":\"the id of the pool\"}},\"delegateVotingPower(address)\":{\"params\":{\"_delegateTo\":\"to whom we delegate voting power\"}},\"deposit(uint256,uint256,bool)\":{\"details\":\"Sender must approve LP tokens to Controller smart contract\",\"params\":{\"_amount\":\"The amount of lp tokens to be deposited\",\"_pid\":\"The pool id to deposit lp tokens into\",\"_stake\":\"bool for wheather the tokens should be staked\"}},\"depositAll(uint256,bool)\":{\"details\":\"Sender must approve LP tokens to Controller smart contract\",\"params\":{\"_pid\":\"The pool id to deposit lp tokens into\",\"_stake\":\"bool for wheather the tokens should be staked\"}},\"earmarkRewards(uint256)\":{\"params\":{\"_pid\":\"the id of the pool where lp tokens are held\"}},\"setFactories(address,address,address)\":{\"params\":{\"_rfactory\":\"The address of the reward factory\",\"_sfactory\":\"The address of the stash factory\",\"_tfactory\":\"The address of the token factory\"}},\"setFeeManager(address)\":{\"params\":{\"_feeM\":\"The address of the fee manager\"}},\"setFees(uint256,uint256)\":{\"params\":{\"_platformFee\":\"The amount to set for the platform fees\",\"_profitFee\":\"The amount to set for the profit fees\"}},\"setOwner(address)\":{\"params\":{\"_owner\":\"The address of the owner of the contract\"}},\"setPoolManager(address)\":{\"params\":{\"_poolM\":\"The address of the pool manager\"}},\"setRewardContracts(address)\":{\"params\":{\"_rewards\":\"The address of the rewards contract\"}},\"setTreasury(address)\":{\"params\":{\"_treasury\":\"The address of the treasury contract\"}},\"setVoteDelegate(address)\":{\"params\":{\"_voteDelegate\":\"The address of whom votes will be delegated to\"}},\"shutdownSystem()\":{\"details\":\"This shuts down the contract\"},\"voteGaugeWeight(address[],uint256[])\":{\"params\":{\"_gauges\":\"array of gauge addresses\",\"_weights\":\"array of vote weights\"}},\"withdraw(uint256,uint256)\":{\"params\":{\"_amount\":\"amount of LP tokens to withdraw\",\"_pid\":\"The pool id to withdraw lp tokens from\"}},\"withdrawAll(uint256)\":{\"params\":{\"_pid\":\"The pool id to withdraw lp tokens from\"}},\"withdrawTo(uint256,uint256,address)\":{\"params\":{\"_amount\":\"amount of LP tokens to withdraw\",\"_pid\":\"The pool id to deposit lp tokens into\"}},\"withdrawUnlockedWethBal()\":{\"details\":\"WethBal is redeemable by burning equivalent amount of D2D WethBal\"}},\"title\":\"Controller contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addFeeToken(address)\":{\"notice\":\"sets the address of the feeToken\"},\"addPool(address,address)\":{\"notice\":\"creates a new pool\"},\"bulkPoolShutdown(uint256,uint256)\":{\"notice\":\"Shuts down multiple pools\"},\"claimRewards(uint256,address)\":{\"notice\":\"claims rewards from a specific pool\"},\"clearDelegation()\":{\"notice\":\"Clears delegation of voting power from EOA for VoterProxy\"},\"clearFeeTokens()\":{\"notice\":\"Clears fee tokens\"},\"delegateVotingPower(address)\":{\"notice\":\"Delegates voting power from VoterProxy\"},\"deposit(uint256,uint256,bool)\":{\"notice\":\"Deposits an amount of LP token into a specific pool, mints reward and optionally tokens and  stakes them into the reward contract\"},\"depositAll(uint256,bool)\":{\"notice\":\"Deposits and stakes all LP tokens\"},\"earmarkFees()\":{\"notice\":\"Claims rewards from the Balancer's fee distributor contract and transfers the tokens into the rewards contract\"},\"earmarkRewards(uint256)\":{\"notice\":\"Claims rewards from a pool and disperses them to the rewards contract\"},\"poolLength()\":{\"notice\":\"returns the number of pools\"},\"redeemWethBal()\":{\"notice\":\"Burns all D2DWethBal from a user, and transfers the equivalent amount of unlocked WethBal tokes\"},\"setFactories(address,address,address)\":{\"notice\":\"sets the reward, token, and stash factory addresses\"},\"setFeeManager(address)\":{\"notice\":\"sets the feeManager variable\"},\"setFees(uint256,uint256)\":{\"notice\":\"sets the lock, staker, caller, platform fees and profit fees\"},\"setOwner(address)\":{\"notice\":\"sets the owner variable\"},\"setPoolManager(address)\":{\"notice\":\"sets the poolManager variable\"},\"setRewardContracts(address)\":{\"notice\":\"sets the lockRewards variable\"},\"setTreasury(address)\":{\"notice\":\"sets the contracts treasury variables\"},\"setVoteDelegate(address)\":{\"notice\":\"sets the voteDelegate variable\"},\"shutdownSystem()\":{\"notice\":\"shuts down all pools\"},\"voteGaugeWeight(address[],uint256[])\":{\"notice\":\"Votes for multiple gauges\"},\"withdraw(uint256,uint256)\":{\"notice\":\"Withdraws lp tokens from the pool\"},\"withdrawAll(uint256)\":{\"notice\":\"Withdraws all of the lp tokens in the pool\"},\"withdrawTo(uint256,uint256,address)\":{\"notice\":\"Withdraws LP tokens and sends them to a specified address\"},\"withdrawUnlockedWethBal()\":{\"notice\":\"Withdraws `amount` of unlocked WethBal to controller\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Controller.sol\":\"Controller\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"contracts/Controller.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\nimport \\\"./utils/Interfaces.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./utils/MathUtil.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n/// @title Controller contract\\n/// @dev Controller contract for Prime Pools is based on the convex Booster.sol contract\\ncontract Controller is IController {\\n    using SafeERC20 for IERC20;\\n    using MathUtil for uint256;\\n\\n    event OwnerChanged(address _newOwner);\\n    event FeeManagerChanged(address _newFeeManager);\\n    event PoolManagerChanged(address _newPoolManager);\\n    event TreasuryChanged(address _newTreasury);\\n    event VoteDelegateChanged(address _newVoteDelegate);\\n    event FeesChanged(uint256 _newPlatformFee, uint256 _newProfitFee);\\n    event PoolShutDown(uint256 _pid);\\n    event FeeTokensCleared();\\n    event AddedPool(\\n        uint256 _pid,\\n        address _lpToken,\\n        address _token,\\n        address _gauge,\\n        address _baseRewardsPool,\\n        address _stash\\n    );\\n    event Deposited(address _user, uint256 _pid, uint256 _amount, bool _stake);\\n    event Withdrawn(address _user, uint256 _pid, uint256 _amount);\\n    event SystemShutdown();\\n\\n    error Unauthorized();\\n    error Shutdown();\\n    error PoolIsClosed();\\n    error InvalidParameters();\\n    error InvalidStash();\\n    error RedirectFailed();\\n\\n    uint256 public constant MAX_FEES = 3000;\\n    uint256 public constant FEE_DENOMINATOR = 10000;\\n    uint256 public constant MAX_LOCK_TIME = 365 days; // 1 year is the time for the new deposided tokens to be locked until they can be withdrawn\\n\\n    address public immutable bal;\\n    address public immutable staker;\\n    address public immutable feeDistro; // Balancer FeeDistributor\\n\\n    uint256 public profitFees = 250; //2.5% // FEE_DENOMINATOR/100*2.5\\n    uint256 public platformFees = 1000; //10% //possible fee to build treasury\\n\\n    address public owner;\\n    address public feeManager;\\n    address public poolManager;\\n    address public rewardFactory;\\n    address public stashFactory;\\n    address public tokenFactory;\\n    address public voteDelegate;\\n    address public treasury;\\n    address public lockRewards;\\n\\n    // Balancer supports rewards in multiple fee tokens\\n    IERC20[] public feeTokens;\\n    // Fee token to VirtualBalanceReward pool mapping\\n    mapping(address => address) public feeTokenToPool;\\n\\n    bool public isShutdown;\\n    bool public canClaim;\\n\\n    struct PoolInfo {\\n        address lptoken;\\n        address token;\\n        address gauge;\\n        address balRewards;\\n        address stash;\\n        bool shutdown;\\n    }\\n\\n    //index(pid) -> pool\\n    PoolInfo[] public poolInfo;\\n    mapping(address => bool) public gaugeMap;\\n\\n    constructor(\\n        address _staker,\\n        address _bal,\\n        address _feeDistro\\n    ) {\\n        bal = _bal;\\n        feeDistro = _feeDistro;\\n        staker = _staker;\\n        owner = msg.sender;\\n        voteDelegate = msg.sender;\\n        feeManager = msg.sender;\\n        poolManager = msg.sender;\\n    }\\n\\n    modifier onlyAddress(address authorizedAddress) {\\n        if (msg.sender != authorizedAddress) {\\n            revert Unauthorized();\\n        }\\n        _;\\n    }\\n\\n    modifier isNotShutDown() {\\n        if (isShutdown) {\\n            revert Shutdown();\\n        }\\n        _;\\n    }\\n\\n    /// SETTER SECTION ///\\n\\n    /// @notice sets the owner variable\\n    /// @param _owner The address of the owner of the contract\\n    function setOwner(address _owner) external onlyAddress(owner) {\\n        owner = _owner;\\n        emit OwnerChanged(_owner);\\n    }\\n\\n    /// @notice sets the feeManager variable\\n    /// @param _feeM The address of the fee manager\\n    function setFeeManager(address _feeM) external onlyAddress(feeManager) {\\n        feeManager = _feeM;\\n        emit FeeManagerChanged(_feeM);\\n    }\\n\\n    /// @notice sets the poolManager variable\\n    /// @param _poolM The address of the pool manager\\n    function setPoolManager(address _poolM) external onlyAddress(poolManager) {\\n        poolManager = _poolM;\\n        emit PoolManagerChanged(_poolM);\\n    }\\n\\n    /// @notice sets the reward, token, and stash factory addresses\\n    /// @param _rfactory The address of the reward factory\\n    /// @param _sfactory The address of the stash factory\\n    /// @param _tfactory The address of the token factory\\n    function setFactories(\\n        address _rfactory,\\n        address _sfactory,\\n        address _tfactory\\n    ) external onlyAddress(owner) {\\n        //reward factory only allow this to be called once even if owner\\n        //removes ability to inject malicious staking contracts\\n        //token factory can also be immutable\\n        if (rewardFactory == address(0)) {\\n            rewardFactory = _rfactory;\\n            tokenFactory = _tfactory;\\n        }\\n\\n        //stash factory should be considered more safe to change\\n        //updating may be required to handle new types of gauges\\n        stashFactory = _sfactory;\\n    }\\n\\n    /// @notice sets the voteDelegate variable\\n    /// @param _voteDelegate The address of whom votes will be delegated to\\n    function setVoteDelegate(address _voteDelegate) external onlyAddress(voteDelegate) {\\n        voteDelegate = _voteDelegate;\\n        emit VoteDelegateChanged(_voteDelegate);\\n    }\\n\\n    /// @notice sets the lockRewards variable\\n    /// @param _rewards The address of the rewards contract\\n    function setRewardContracts(address _rewards) external onlyAddress(owner) {\\n        if (lockRewards == address(0)) {\\n            lockRewards = _rewards;\\n        }\\n    }\\n\\n    /// @notice sets the address of the feeToken\\n    /// @param _feeToken feeToken\\n    function addFeeToken(IERC20 _feeToken) external onlyAddress(feeManager) {\\n        feeTokens.push(_feeToken);\\n        // If fee token is BAL forward rewards to BaseRewardPool\\n        if (address(_feeToken) == bal) {\\n            feeTokenToPool[address(_feeToken)] = lockRewards;\\n            return;\\n        }\\n        // Create VirtualBalanceRewardPool and forward rewards there for other tokens\\n        address virtualBalanceRewardPool = IRewardFactory(rewardFactory).createTokenRewards(\\n            address(_feeToken),\\n            lockRewards,\\n            address(this)\\n        );\\n        feeTokenToPool[address(_feeToken)] = virtualBalanceRewardPool;\\n    }\\n\\n    /// @notice Clears fee tokens\\n    function clearFeeTokens() external onlyAddress(feeManager) {\\n        delete feeTokens;\\n        emit FeeTokensCleared();\\n    }\\n\\n    /// @notice sets the lock, staker, caller, platform fees and profit fees\\n    /// @param _profitFee The amount to set for the profit fees\\n    /// @param _platformFee The amount to set for the platform fees\\n    function setFees(uint256 _platformFee, uint256 _profitFee) external onlyAddress(feeManager) {\\n        uint256 total = _profitFee + _platformFee;\\n        if (total > MAX_FEES) {\\n            revert InvalidParameters();\\n        }\\n\\n        //values must be within certain ranges\\n        if (\\n            _platformFee >= 500 && //5%\\n            _platformFee <= 2000 && //20%\\n            _profitFee >= 100 && //1%\\n            _profitFee <= 1000 //10%\\n        ) {\\n            platformFees = _platformFee;\\n            profitFees = _profitFee;\\n            emit FeesChanged(_platformFee, _profitFee);\\n        }\\n    }\\n\\n    /// @notice sets the contracts treasury variables\\n    /// @param _treasury The address of the treasury contract\\n    function setTreasury(address _treasury) external onlyAddress(feeManager) {\\n        treasury = _treasury;\\n        emit TreasuryChanged(_treasury);\\n    }\\n\\n    /// END SETTER SECTION ///\\n\\n    /// @inheritdoc IController\\n    function poolLength() external view returns (uint256) {\\n        return poolInfo.length;\\n    }\\n\\n    function feeTokensLength() external view returns (uint256) {\\n        return feeTokens.length;\\n    }\\n\\n    /// @notice creates a new pool\\n    /// @param _lptoken The address of the lp token\\n    /// @param _gauge The address of the gauge controller\\n    function addPool(address _lptoken, address _gauge) external onlyAddress(poolManager) isNotShutDown {\\n        if (_gauge == address(0) || _lptoken == address(0) || gaugeMap[_gauge]) {\\n            revert InvalidParameters();\\n        }\\n        //the next pool's pid\\n        uint256 pid = poolInfo.length;\\n        //create a tokenized deposit\\n        address token = ITokenFactory(tokenFactory).createDepositToken(_lptoken);\\n        //create a reward contract for bal rewards\\n        address newRewardPool = IRewardFactory(rewardFactory).createBalRewards(pid, token);\\n        //create a stash to handle extra incentives\\n        address stash = IStashFactory(stashFactory).createStash(pid, _gauge);\\n\\n        if (stash == address(0)) {\\n            revert InvalidStash();\\n        }\\n\\n        //add the new pool\\n        poolInfo.push(\\n            PoolInfo({\\n                lptoken: _lptoken,\\n                token: token,\\n                gauge: _gauge,\\n                balRewards: newRewardPool,\\n                stash: stash,\\n                shutdown: false\\n            })\\n        );\\n        gaugeMap[_gauge] = true;\\n        // give stashes access to RewardFactory and VoterProxy\\n        // VoterProxy so that it can grab the incentive tokens off the contract after claiming rewards\\n        // RewardFactory so that stashes can make new extra reward contracts if a new incentive is added to the gauge\\n        poolInfo[pid].stash = stash;\\n        IRewardFactory(rewardFactory).grantRewardStashAccess(stash);\\n        redirectGaugeRewards(stash, _gauge);\\n        emit AddedPool(pid, _lptoken, token, _gauge, newRewardPool, stash);\\n    }\\n\\n    /// @notice Shuts down multiple pools\\n    /// @dev Claims rewards for that pool before shutting it down\\n    /// @param _startPoolIdx Start pool index\\n    /// @param _endPoolIdx End pool index (excluded)\\n    function bulkPoolShutdown(uint256 _startPoolIdx, uint256 _endPoolIdx) external onlyAddress(poolManager) {\\n        for (uint256 i = _startPoolIdx; i < _endPoolIdx; i = i.unsafeInc()) {\\n            PoolInfo storage pool = poolInfo[i];\\n\\n            if (pool.shutdown) {\\n                continue;\\n            }\\n\\n            _earmarkRewards(i);\\n\\n            //withdraw from gauge\\n            // solhint-disable-next-line\\n            try IVoterProxy(staker).withdrawAll(pool.lptoken, pool.gauge) {\\n                // solhint-disable-next-line\\n            } catch {}\\n\\n            pool.shutdown = true;\\n            gaugeMap[pool.gauge] = false;\\n            emit PoolShutDown(i);\\n        }\\n    }\\n\\n    /// @notice shuts down all pools\\n    /// @dev This shuts down the contract\\n    function shutdownSystem() external onlyAddress(owner) {\\n        isShutdown = true;\\n        emit SystemShutdown();\\n    }\\n\\n    /// @inheritdoc IController\\n    function deposit(\\n        uint256 _pid,\\n        uint256 _amount,\\n        bool _stake\\n    ) public isNotShutDown {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        if (pool.shutdown) {\\n            revert PoolIsClosed();\\n        }\\n        //send to proxy to stake\\n        address lptoken = pool.lptoken;\\n        IERC20(lptoken).transferFrom(msg.sender, staker, _amount);\\n\\n        //stake\\n        address gauge = pool.gauge;\\n        IVoterProxy(staker).deposit(lptoken, gauge); // VoterProxy\\n\\n        address token = pool.token; //D2DPool token\\n        if (_stake) {\\n            //mint here and send to rewards on user behalf\\n            ITokenMinter(token).mint(address(this), _amount);\\n            address rewardContract = pool.balRewards;\\n            IERC20(token).approve(rewardContract, _amount);\\n            IRewards(rewardContract).stakeFor(msg.sender, _amount);\\n        } else {\\n            //add user balance directly\\n            ITokenMinter(token).mint(msg.sender, _amount);\\n        }\\n\\n        emit Deposited(msg.sender, _pid, _amount, _stake);\\n    }\\n\\n    /// @inheritdoc IController\\n    function depositAll(uint256 _pid, bool _stake) external {\\n        address lptoken = poolInfo[_pid].lptoken;\\n        uint256 balance = IERC20(lptoken).balanceOf(msg.sender);\\n        deposit(_pid, balance, _stake);\\n    }\\n\\n    /// @notice internal function that withdraws lp tokens from the pool\\n    /// @param _pid The pool id to withdraw the tokens from\\n    /// @param _amount amount of LP tokens to withdraw\\n    /// @param _from address of where the lp tokens will be withdrawn from\\n    /// @param _to address of where the lp tokens will be sent to\\n    function _withdraw(\\n        uint256 _pid,\\n        uint256 _amount,\\n        address _from,\\n        address _to\\n    ) internal {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        address lptoken = pool.lptoken;\\n        address gauge = pool.gauge;\\n\\n        //remove lp balance\\n        address token = pool.token;\\n        ITokenMinter(token).burn(_from, _amount);\\n\\n        //pull from gauge if not shutdown\\n        // if shutdown tokens will be in this contract\\n        if (!pool.shutdown) {\\n            IVoterProxy(staker).withdraw(lptoken, gauge, _amount);\\n        }\\n        //return lp tokens\\n        IERC20(lptoken).transfer(_to, _amount);\\n\\n        emit Withdrawn(_to, _pid, _amount);\\n    }\\n\\n    /// @inheritdoc IController\\n    function withdraw(uint256 _pid, uint256 _amount) public {\\n        _withdraw(_pid, _amount, msg.sender, msg.sender);\\n    }\\n\\n    /// @inheritdoc IController\\n    function withdrawAll(uint256 _pid) public {\\n        address token = poolInfo[_pid].token;\\n        uint256 userBal = IERC20(token).balanceOf(msg.sender);\\n        withdraw(_pid, userBal);\\n    }\\n\\n    /// @inheritdoc IController\\n    function withdrawTo(\\n        uint256 _pid,\\n        uint256 _amount,\\n        address _to\\n    ) external {\\n        address rewardContract = poolInfo[_pid].balRewards;\\n        if (msg.sender != rewardContract) {\\n            revert Unauthorized();\\n        }\\n        _withdraw(_pid, _amount, msg.sender, _to);\\n    }\\n\\n    /// @inheritdoc IController\\n    function withdrawUnlockedWethBal() external onlyAddress(owner) {\\n        canClaim = true;\\n        IVoterProxy(staker).withdrawWethBal(address(this));\\n    }\\n\\n    /// @inheritdoc IController\\n    function redeemWethBal() external {\\n        require(canClaim);\\n        IBalDepositor balDepositor = IBalDepositor(IVoterProxy(staker).depositor());\\n        uint256 balance = IERC20(balDepositor.d2dBal()).balanceOf(msg.sender);\\n        balDepositor.burnD2DBal(msg.sender, balance);\\n        IERC20(balDepositor.wethBal()).safeTransfer(msg.sender, balance);\\n    }\\n\\n    /// @notice Delegates voting power from VoterProxy\\n    /// @param _delegateTo to whom we delegate voting power\\n    function delegateVotingPower(address _delegateTo) external onlyAddress(owner) {\\n        IVoterProxy(staker).delegateVotingPower(_delegateTo);\\n    }\\n\\n    /// @notice Clears delegation of voting power from EOA for VoterProxy\\n    function clearDelegation() external onlyAddress(owner) {\\n        IVoterProxy(staker).clearDelegate();\\n    }\\n\\n    /// @notice Votes for multiple gauges\\n    /// @param _gauges array of gauge addresses\\n    /// @param _weights array of vote weights\\n    function voteGaugeWeight(address[] calldata _gauges, uint256[] calldata _weights)\\n        external\\n        onlyAddress(voteDelegate)\\n    {\\n        IVoterProxy(staker).voteMultipleGauges(_gauges, _weights);\\n    }\\n\\n    /// @notice claims rewards from a specific pool\\n    /// @param _pid the id of the pool\\n    /// @param _gauge address of the gauge\\n    function claimRewards(uint256 _pid, address _gauge) external {\\n        address stash = poolInfo[_pid].stash;\\n        if (msg.sender != stash) {\\n            revert Unauthorized();\\n        }\\n        IVoterProxy(staker).claimRewards(_gauge);\\n    }\\n\\n    /// @notice internal function that claims rewards from a pool and disperses them to the rewards contract\\n    /// @param _pid the id of the pool where lp tokens are held\\n    function _earmarkRewards(uint256 _pid) internal {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        if (pool.shutdown) {\\n            revert PoolIsClosed();\\n        }\\n        address gauge = pool.gauge;\\n\\n        //claim bal\\n        IVoterProxy(staker).claimBal(gauge);\\n\\n        //check if there are extra rewards\\n        address stash = pool.stash;\\n        if (stash != address(0)) {\\n            //claim extra rewards\\n            IStash(stash).claimRewards();\\n            //process extra rewards\\n            IStash(stash).processStash();\\n        }\\n\\n        //bal balance\\n        uint256 balBal = IERC20(bal).balanceOf(address(this));\\n\\n        if (balBal > 0) {\\n            //Profit fees are taken on the rewards together with platform fees.\\n            uint256 _profit = (balBal * profitFees) / FEE_DENOMINATOR;\\n            //profit fees are distributed to the gnosisSafe, which owned by Prime; which is here feeManager\\n            IERC20(bal).transfer(feeManager, _profit);\\n\\n            //send treasury\\n            if (treasury != address(0) && treasury != address(this) && platformFees > 0) {\\n                //only subtract after address condition check\\n                uint256 _platform = (balBal * platformFees) / FEE_DENOMINATOR;\\n                balBal = balBal - _platform;\\n                IERC20(bal).transfer(treasury, _platform);\\n            }\\n            balBal = balBal - _profit;\\n\\n            //send bal to lp provider reward contract\\n            address rewardContract = pool.balRewards;\\n            IERC20(bal).transfer(rewardContract, balBal);\\n            IRewards(rewardContract).queueNewRewards(balBal);\\n        }\\n    }\\n\\n    /// @inheritdoc IController\\n    function earmarkRewards(uint256 _pid) external {\\n        _earmarkRewards(_pid);\\n    }\\n\\n    /// @inheritdoc IController\\n    function earmarkFees() external {\\n        IERC20[] memory feeTokensMemory = feeTokens;\\n        // Claim fee rewards from fee distro\\n        IVoterProxy(staker).claimFees(feeDistro, feeTokensMemory);\\n\\n        // VoterProxy transfers rewards to this contract, and we need to distribute them to\\n        // VirtualBalanceRewards contracts\\n        for (uint256 i = 0; i < feeTokensMemory.length; i = i.unsafeInc()) {\\n            IERC20 feeToken = feeTokensMemory[i];\\n            uint256 balance = feeToken.balanceOf(address(this));\\n            if (balance != 0) {\\n                feeToken.safeTransfer(feeTokenToPool[address(feeToken)], balance);\\n                IRewards(feeTokenToPool[address(feeToken)]).queueNewRewards(balance);\\n            }\\n        }\\n    }\\n\\n    /// @notice redirects rewards from gauge to rewards contract\\n    /// @param _stash stash address\\n    /// @param _gauge gauge address\\n    function redirectGaugeRewards(address _stash, address _gauge) private {\\n        bytes memory data = abi.encodeWithSelector(bytes4(keccak256(\\\"set_rewards_receiver(address)\\\")), _stash);\\n        (bool success, ) = IVoterProxy(staker).execute(_gauge, uint256(0), data);\\n        if (!success) {\\n            revert RedirectFailed();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x83e054f03e0fe254ce357b2a84dd724fa154fa6cf02f5cb487d06d66c0fa8b29\",\"license\":\"MIT\"},\"contracts/utils/Interfaces.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IBalGauge {\\n    function deposit(uint256) external;\\n\\n    function balanceOf(address) external view returns (uint256);\\n\\n    function withdraw(uint256) external;\\n\\n    function claim_rewards() external;\\n\\n    function reward_tokens(uint256) external view returns (address);\\n\\n    function lp_token() external view returns (address);\\n}\\n\\ninterface IBalVoteEscrow {\\n    function create_lock(uint256, uint256) external;\\n\\n    function increase_amount(uint256) external;\\n\\n    function increase_unlock_time(uint256) external;\\n\\n    function withdraw() external;\\n\\n    function smart_wallet_checker() external view returns (address);\\n\\n    function balanceOf(address, uint256) external view returns (uint256);\\n\\n    function balanceOfAt(address, uint256) external view returns (uint256);\\n}\\n\\ninterface IVoting {\\n    function vote_for_gauge_weights(address, uint256) external;\\n}\\n\\ninterface IMinter {\\n    function mint(address) external;\\n}\\n\\ninterface IBalDepositor {\\n    function d2dBal() external view returns (address);\\n\\n    function wethBal() external view returns (address);\\n\\n    function burnD2DBal(address _from, uint256 _amount) external;\\n}\\n\\ninterface IVoterProxy {\\n    function deposit(address _token, address _gauge) external;\\n\\n    function withdrawWethBal(address _to) external;\\n\\n    function wethBal() external view returns (address);\\n\\n    function depositor() external view returns (address);\\n\\n    function withdraw(\\n        address _token,\\n        address _gauge,\\n        uint256 _amount\\n    ) external;\\n\\n    function withdrawAll(address _token, address _gauge) external;\\n\\n    function createLock(uint256 _value, uint256 _unlockTime) external;\\n\\n    function increaseAmount(uint256 _value) external;\\n\\n    function increaseTime(uint256 _unlockTimestamp) external;\\n\\n    function release() external;\\n\\n    function claimBal(address _gauge) external returns (uint256);\\n\\n    function claimRewards(address _gauge) external;\\n\\n    function claimFees(address _distroContract, IERC20[] calldata _tokens) external;\\n\\n    function delegateVotingPower(address _delegateTo) external;\\n\\n    function clearDelegate() external;\\n\\n    function voteMultipleGauges(address[] calldata _gauges, uint256[] calldata _weights) external;\\n\\n    function balanceOfPool(address _gauge) external view returns (uint256);\\n\\n    function operator() external view returns (address);\\n\\n    function execute(\\n        address _to,\\n        uint256 _value,\\n        bytes calldata _data\\n    ) external returns (bool, bytes memory);\\n}\\n\\ninterface ISnapshotDelegateRegistry {\\n    function setDelegate(bytes32 id, address delegate) external;\\n\\n    function clearDelegate(bytes32 id) external;\\n}\\n\\ninterface IRewards {\\n    function stake(address, uint256) external;\\n\\n    function stakeFor(address, uint256) external;\\n\\n    function withdraw(address, uint256) external;\\n\\n    function exit(address) external;\\n\\n    function getReward(address) external;\\n\\n    function queueNewRewards(uint256) external;\\n\\n    function notifyRewardAmount(uint256) external;\\n\\n    function addExtraReward(address) external;\\n\\n    function stakingToken() external view returns (address);\\n\\n    function rewardToken() external view returns (address);\\n\\n    function earned(address account) external view returns (uint256);\\n}\\n\\ninterface IStash {\\n    function processStash() external;\\n\\n    function claimRewards() external;\\n\\n    function initialize(\\n        uint256 _pid,\\n        address _operator,\\n        address _gauge,\\n        address _rewardFactory\\n    ) external;\\n}\\n\\ninterface IFeeDistro {\\n    /**\\n     * @notice Claims all pending distributions of the provided token for a user.\\n     * @dev It's not necessary to explicitly checkpoint before calling this function, it will ensure the FeeDistributor\\n     * is up to date before calculating the amount of tokens to be claimed.\\n     * @param user - The user on behalf of which to claim.\\n     * @param token - The ERC20 token address to be claimed.\\n     * @return The amount of `token` sent to `user` as a result of claiming.\\n     */\\n    function claimToken(address user, IERC20 token) external returns (uint256);\\n\\n    /**\\n     * @notice Claims a number of tokens on behalf of a user.\\n     * @dev A version of `claimToken` which supports claiming multiple `tokens` on behalf of `user`.\\n     * See `claimToken` for more details.\\n     * @param user - The user on behalf of which to claim.\\n     * @param tokens - An array of ERC20 token addresses to be claimed.\\n     * @return An array of the amounts of each token in `tokens` sent to `user` as a result of claiming.\\n     */\\n    function claimTokens(address user, IERC20[] calldata tokens) external returns (uint256[] memory);\\n}\\n\\ninterface ITokenMinter {\\n    function mint(address, uint256) external;\\n\\n    function burn(address, uint256) external;\\n}\\n\\ninterface IBaseRewardsPool {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address _account) external view returns (uint256);\\n}\\n\\ninterface IController {\\n    /// @notice returns the number of pools\\n    function poolLength() external returns (uint256);\\n\\n    /// @notice Deposits an amount of LP token into a specific pool,\\n    /// mints reward and optionally tokens and  stakes them into the reward contract\\n    /// @dev Sender must approve LP tokens to Controller smart contract\\n    /// @param _pid The pool id to deposit lp tokens into\\n    /// @param _amount The amount of lp tokens to be deposited\\n    /// @param _stake bool for wheather the tokens should be staked\\n    function deposit(\\n        uint256 _pid,\\n        uint256 _amount,\\n        bool _stake\\n    ) external;\\n\\n    /// @notice Deposits and stakes all LP tokens\\n    /// @dev Sender must approve LP tokens to Controller smart contract\\n    /// @param _pid The pool id to deposit lp tokens into\\n    /// @param _stake bool for wheather the tokens should be staked\\n    function depositAll(uint256 _pid, bool _stake) external;\\n\\n    /// @notice Withdraws lp tokens from the pool\\n    /// @param _pid The pool id to withdraw lp tokens from\\n    /// @param _amount amount of LP tokens to withdraw\\n    function withdraw(uint256 _pid, uint256 _amount) external;\\n\\n    /// @notice Withdraws all of the lp tokens in the pool\\n    /// @param _pid The pool id to withdraw lp tokens from\\n    function withdrawAll(uint256 _pid) external;\\n\\n    /// @notice Withdraws LP tokens and sends them to a specified address\\n    /// @param _pid The pool id to deposit lp tokens into\\n    /// @param _amount amount of LP tokens to withdraw\\n    function withdrawTo(\\n        uint256 _pid,\\n        uint256 _amount,\\n        address _to\\n    ) external;\\n\\n    /// @notice Withdraws `amount` of unlocked WethBal to controller\\n    /// @dev WethBal is redeemable by burning equivalent amount of D2D WethBal\\n    function withdrawUnlockedWethBal() external;\\n\\n    /// @notice Burns all D2DWethBal from a user, and transfers the equivalent amount of unlocked WethBal tokes\\n    function redeemWethBal() external;\\n\\n    /// @notice Claims rewards from a pool and disperses them to the rewards contract\\n    /// @param _pid the id of the pool where lp tokens are held\\n    function earmarkRewards(uint256 _pid) external;\\n\\n    /// @notice Claims rewards from the Balancer's fee distributor contract and transfers the tokens into the rewards contract\\n    function earmarkFees() external;\\n\\n    function isShutdown() external view returns (bool);\\n\\n    function poolInfo(uint256)\\n        external\\n        view\\n        returns (\\n            address,\\n            address,\\n            address,\\n            address,\\n            address,\\n            bool\\n        );\\n\\n    function claimRewards(uint256, address) external;\\n\\n    function owner() external returns (address);\\n}\\n\\ninterface IRewardFactory {\\n    function grantRewardStashAccess(address) external;\\n\\n    function createBalRewards(uint256, address) external returns (address);\\n\\n    function createTokenRewards(\\n        address,\\n        address,\\n        address\\n    ) external returns (address);\\n\\n    function activeRewardCount(address) external view returns (uint256);\\n\\n    function addActiveReward(address, uint256) external returns (bool);\\n\\n    function removeActiveReward(address, uint256) external returns (bool);\\n}\\n\\ninterface IStashFactory {\\n    function createStash(uint256 _pid, address _gauge) external returns (address);\\n}\\n\\ninterface ITokenFactory {\\n    function createDepositToken(address) external returns (address);\\n}\\n\\ninterface IProxyFactory {\\n    function clone(address _target) external returns (address);\\n}\\n\\ninterface IRewardHook {\\n    function onRewardClaim() external;\\n}\\n\",\"keccak256\":\"0x98f8f4c5e094e34ec48993d3e1af8a272524e6707c3f17cc7bd45bdb15bbb378\",\"license\":\"MIT\"},\"contracts/utils/MathUtil.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\n// copied from https://github.com/Uniswap/v2-core/blob/master/contracts/libraries/SafeMath.sol\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUtil {\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /// @dev Gas optimization for loops that iterate over extra rewards\\n    /// We know that this can't overflow because we can't interate over big arrays\\n    function unsafeInc(uint256 x) internal pure returns (uint256) {\\n        unchecked {\\n            return x + 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8969c0e7b65ca3bf8e8c76ea850d4b02e488c94e25735fe6b2c55b4ae14416a4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e060405260fa6000556103e86001553480156200001c57600080fd5b5060405162004408380380620044088339810160408190526200003f91620000af565b6001600160a01b03918216608052811660c0521660a05260028054336001600160a01b031991821681179092556008805482168317905560038054821683179055600480549091169091179055620000f9565b80516001600160a01b0381168114620000aa57600080fd5b919050565b600080600060608486031215620000c557600080fd5b620000d08462000092565b9250620000e06020850162000092565b9150620000f06040850162000092565b90509250925092565b60805160a05160c05161425a620001ae600039600081816107430152610e1b01526000818161057201528181610ce501528181610dec0152818161110b01528181611261015281816113360152818161174801528181611abd0152818161211b0152818161245401528181612cda01528181612e7801528181613118015261373e0152600081816104ff01528181611f820152818161329901528181613390015281816134cb015261359b015261425a6000f3fe608060405234801561001057600080fd5b50600436106103415760003560e01c80636dc7a627116101bd578063c2300bef116100f9578063dc4c90d3116100a2578063f0f442601161007c578063f0f44260146107c1578063f3074b93146107d4578063f3ff955a146107dc578063fa78668f146107ef57600080fd5b8063dc4c90d31461076e578063e77772fe1461078e578063eb511dd4146107ae57600080fd5b8063d0fb0203116100d3578063d0fb02031461071e578063d6a0f5301461073e578063d73792a91461076557600080fd5b8063c2300bef146106df578063cb0d5b52146106e8578063cc956f3f1461070b57600080fd5b8063958e2d3111610166578063b4d2e3d111610140578063b4d2e3d1146106ae578063b5c4a5ad146106b7578063bf86d690146106bf578063bfad96ba146106cc57600080fd5b8063958e2d31146106685780639f00332b1461067b578063aa2eded21461069b57600080fd5b80637bd3b995116101975780637bd3b995146106225780638da5cb5b146106355780638ef4403c1461065557600080fd5b80636dc7a627146105da57806374874323146105fc5780637aef67151461060f57600080fd5b8063275e86c01161028c578063441a3e70116102355780635ebaf1db1161020f5780635ebaf1db1461056d57806360759fce1461059457806361d027b3146105a75780636c7b69cb146105c757600080fd5b8063441a3e7014610534578063452e97ac14610547578063472d35b91461055a57600080fd5b80633b632bb9116102665780633b632bb9146104f25780633d79d1c8146104fa57806343a0d0661461052157600080fd5b8063275e86c014610494578063354af919146104ca578063376d771a146104d257600080fd5b8063194a4e7e116102ee5780631f9eddb3116102c85780631f9eddb31461046457806322230b961461046c578063245e4bf01461047457600080fd5b8063194a4e7e146104405780631b5d3670146104495780631cc51d401461045157600080fd5b806313af40351161031f57806313af4035146103b757806314cd70e4146103ca5780631526fe27146103dd57600080fd5b8063068eb19e14610346578063081e3eda146103905780630b78f9c0146103a2575b600080fd5b6006546103669073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b600e545b604051908152602001610387565b6103b56103b0366004613b5d565b6107fa565b005b6103b56103c5366004613ba1565b610914565b6103b56103d8366004613bbe565b6109e1565b6103f06103eb366004613bf7565b610a67565b6040805173ffffffffffffffffffffffffffffffffffffffff97881681529587166020870152938616938501939093529084166060840152909216608082015290151560a082015260c001610387565b61039460015481565b6103b5610ae6565b6103b561045f366004613ba1565b610b70565b6103b5610c24565b6103b5610d44565b6005546103669073ffffffffffffffffffffffffffffffffffffffff1681565b6103666104a2366004613ba1565b600c6020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b6103b561100e565b600a546103669073ffffffffffffffffffffffffffffffffffffffff1681565b6103b56110b7565b6103667f000000000000000000000000000000000000000000000000000000000000000081565b6103b561052f366004613c1e565b611171565b6103b5610542366004613b5d565b611641565b6103b5610555366004613b5d565b61164d565b6103b5610568366004613ba1565b611874565b6103667f000000000000000000000000000000000000000000000000000000000000000081565b6103b56105a2366004613c4c565b611939565b6009546103669073ffffffffffffffffffffffffffffffffffffffff1681565b6103b56105d5366004613c7c565b6119fe565b600d546105ec90610100900460ff1681565b6040519015158152602001610387565b6103b561060a366004613ba1565b611b1e565b6103b561061d366004613ba1565b611be3565b6103b5610630366004613ca1565b611ca8565b6002546103669073ffffffffffffffffffffffffffffffffffffffff1681565b610366610663366004613bf7565b611db7565b6103b5610676366004613bf7565b611dee565b6008546103669073ffffffffffffffffffffffffffffffffffffffff1681565b6103b56106a9366004613ba1565b611eba565b61039460005481565b6103b5612103565b600d546105ec9060ff1681565b6103b56106da366004613d2d565b6123c5565b610394610bb881565b6105ec6106f6366004613ba1565b600f6020526000908152604090205460ff1681565b6103b5610719366004613bf7565b6124c8565b6003546103669073ffffffffffffffffffffffffffffffffffffffff1681565b6103667f000000000000000000000000000000000000000000000000000000000000000081565b61039461271081565b6004546103669073ffffffffffffffffffffffffffffffffffffffff1681565b6007546103669073ffffffffffffffffffffffffffffffffffffffff1681565b6103b56107bc366004613d99565b6124d4565b6103b56107cf366004613ba1565b612b7e565b600b54610394565b6103b56107ea366004613ba1565b612c43565b6103946301e1338081565b60035473ffffffffffffffffffffffffffffffffffffffff1633811461084c576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006108588484613df6565b9050610bb8811115610896576040517fe523909000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6101f484101580156108aa57506107d08411155b80156108b7575060648310155b80156108c557506103e88311155b1561090e576001849055600083905560408051858152602081018590527f64f84976d9c917a44796104a59950fdbd9b3c16a5dd348b546d738301f6bd068910160405180910390a15b50505050565b60025473ffffffffffffffffffffffffffffffffffffffff16338114610966576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600280547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff84169081179091556040519081527fa2ea9883a321a3e97b8266c2b078bfeec6d50c711ed71f874a90d500ae2eaf36906020015b60405180910390a15050565b6000600e84815481106109f6576109f6613e0e565b600091825260209091206003600590920201015473ffffffffffffffffffffffffffffffffffffffff169050338114610a5b576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61090e84843385612d3a565b600e8181548110610a7757600080fd5b60009182526020909120600590910201805460018201546002830154600384015460049094015473ffffffffffffffffffffffffffffffffffffffff93841695509183169390831692908116919081169074010000000000000000000000000000000000000000900460ff1686565b60035473ffffffffffffffffffffffffffffffffffffffff16338114610b38576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610b44600b6000613b2b565b6040517f6c476c8f4aa224f57d954654c067fdcae2391e2a93c16d3296ecea1d41aeed0590600090a150565b60025473ffffffffffffffffffffffffffffffffffffffff16338114610bc2576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600a5473ffffffffffffffffffffffffffffffffffffffff16610c2057600a80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff84161790555b5050565b60025473ffffffffffffffffffffffffffffffffffffffff16338114610c76576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600d80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790556040517fb287ff3100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063b287ff3190602401600060405180830381600087803b158015610d2957600080fd5b505af1158015610d3d573d6000803e3d6000fd5b5050505050565b6000600b805480602002602001604051908101604052809291908181526020018280548015610da957602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311610d7e575b50506040517fa81d2f470000000000000000000000000000000000000000000000000000000081529394505073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169263a81d2f479250610e4591507f0000000000000000000000000000000000000000000000000000000000000000908590600401613e3d565b600060405180830381600087803b158015610e5f57600080fd5b505af1158015610e73573d6000803e3d6000fd5b5050505060005b8151811015610c20576000828281518110610e9757610e97613e0e565b60209081029190910101516040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290915060009073ffffffffffffffffffffffffffffffffffffffff8316906370a0823190602401602060405180830381865afa158015610f12573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f369190613ea5565b905080156110045773ffffffffffffffffffffffffffffffffffffffff8083166000818152600c6020526040902054610f70921683612fd0565b73ffffffffffffffffffffffffffffffffffffffff8281166000908152600c6020526040908190205490517f590a41f50000000000000000000000000000000000000000000000000000000081526004810184905291169063590a41f590602401600060405180830381600087803b158015610feb57600080fd5b505af1158015610fff573d6000803e3d6000fd5b505050505b5050600101610e7a565b60025473ffffffffffffffffffffffffffffffffffffffff16338114611060576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600d80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790556040517fa7f1177ac6d0519232556de7d5158b9c7142cfeaebb1ff60315c49d364c75dfa90600090a150565b60025473ffffffffffffffffffffffffffffffffffffffff16338114611109576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16636ea447ba6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610d2957600080fd5b600d5460ff16156111ae576040517f4426aa1f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600e84815481106111c3576111c3613e0e565b906000526020600020906005020190508060040160149054906101000a900460ff161561121c576040517fefc869b400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80546040517f23b872dd00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000081166024830152604482018690529091169081906323b872dd906064016020604051808303816000875af11580156112bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112e09190613ebe565b5060028201546040517ff9609f0800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff838116600483015291821660248201819052917f0000000000000000000000000000000000000000000000000000000000000000169063f9609f0890604401600060405180830381600087803b15801561137a57600080fd5b505af115801561138e573d6000803e3d6000fd5b50505050600183015473ffffffffffffffffffffffffffffffffffffffff168415611567576040517f40c10f190000000000000000000000000000000000000000000000000000000081523060048201526024810187905273ffffffffffffffffffffffffffffffffffffffff8216906340c10f1990604401600060405180830381600087803b15801561142157600080fd5b505af1158015611435573d6000803e3d6000fd5b5050505060038401546040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff91821660048201819052602482018990529183169063095ea7b3906044016020604051808303816000875af11580156114b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114da9190613ebe565b506040517f2ee409080000000000000000000000000000000000000000000000000000000081523360048201526024810188905273ffffffffffffffffffffffffffffffffffffffff821690632ee4090890604401600060405180830381600087803b15801561154957600080fd5b505af115801561155d573d6000803e3d6000fd5b50505050506115ee565b6040517f40c10f190000000000000000000000000000000000000000000000000000000081523360048201526024810187905273ffffffffffffffffffffffffffffffffffffffff8216906340c10f1990604401600060405180830381600087803b1580156115d557600080fd5b505af11580156115e9573d6000803e3d6000fd5b505050505b604080513381526020810189905290810187905285151560608201527f65e6f89b6907d6277741ee4ccbc4ae260163a17f16bbb55b5344dff064867c40906080015b60405180910390a150505050505050565b610c2082823333612d3a565b60045473ffffffffffffffffffffffffffffffffffffffff1633811461169f576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b825b8281101561090e576000600e82815481106116be576116be613e0e565b906000526020600020906005020190508060040160149054906101000a900460ff16156116eb575061186c565b6116f48261305d565b805460028201546040517f09cae2c800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff928316600482015290821660248201527f0000000000000000000000000000000000000000000000000000000000000000909116906309cae2c890604401600060405180830381600087803b15801561178e57600080fd5b505af192505050801561179f575060015b506004810180547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1674010000000000000000000000000000000000000000179055600281015473ffffffffffffffffffffffffffffffffffffffff166000908152600f60205260409081902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055517f26b91c5ee7016e010d571b6baf5f465e048be724ce3b1cc7a6e25230b42ce47d906118629084815260200190565b60405180910390a1505b6001016116a1565b60035473ffffffffffffffffffffffffffffffffffffffff163381146118c6576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff84169081179091556040519081527f45d7e621935e768c84854481fb8a41a30200fbe59f86660d5e02dd876563d898906020016109d5565b6000600e838154811061194e5761194e613e0e565b60009182526020822060059190910201546040517f70a0823100000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff909116925082906370a0823190602401602060405180830381865afa1580156119cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119f19190613ea5565b905061090e848285611171565b6000600e8381548110611a1357611a13613e0e565b600091825260209091206004600590920201015473ffffffffffffffffffffffffffffffffffffffff169050338114611a78576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517fef5cfb8c00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063ef5cfb8c90602401600060405180830381600087803b158015611b0157600080fd5b505af1158015611b15573d6000803e3d6000fd5b50505050505050565b60085473ffffffffffffffffffffffffffffffffffffffff16338114611b70576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600880547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff84169081179091556040519081527f2a1362e990f0ede76fc346823fb053633a4e6e30dfe212bf6c162ab895c3e24d906020016109d5565b60045473ffffffffffffffffffffffffffffffffffffffff16338114611c35576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600480547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff84169081179091556040519081527fe53395243914ebc025ce712146f66fa5e9d3f04b308fae19ac4123350d1cd20f906020016109d5565b60025473ffffffffffffffffffffffffffffffffffffffff16338114611cfa576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60055473ffffffffffffffffffffffffffffffffffffffff16611d6d576005805473ffffffffffffffffffffffffffffffffffffffff8087167fffffffffffffffffffffffff00000000000000000000000000000000000000009283161790925560078054928516929091169190911790555b5050600680547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff9290921691909117905550565b600b8181548110611dc757600080fd5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b6000600e8281548110611e0357611e03613e0e565b60009182526020822060059190910201600101546040517f70a0823100000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff909116925082906370a0823190602401602060405180830381865afa158015611e85573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ea99190613ea5565b9050611eb58382611641565b505050565b60035473ffffffffffffffffffffffffffffffffffffffff16338114611f0c576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600b80546001810182556000919091527f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db90180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8481169182179092557f0000000000000000000000000000000000000000000000000000000000000000909116900361200257600a5473ffffffffffffffffffffffffffffffffffffffff8381166000908152600c6020526040902080547fffffffffffffffffffffffff000000000000000000000000000000000000000016919092161790555050565b600554600a546040517f2f1b327100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff858116600483015291821660248201523060448201526000929190911690632f1b3271906064016020604051808303816000875af1158015612089573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120ad9190613edb565b73ffffffffffffffffffffffffffffffffffffffff9384166000908152600c6020526040902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001691909416179092555050565b600d54610100900460ff1661211757600080fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663c7c4ff466040518163ffffffff1660e01b8152600401602060405180830381865afa158015612184573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121a89190613edb565b905060008173ffffffffffffffffffffffffffffffffffffffff1663815a90da6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156121f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061221b9190613edb565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff91909116906370a0823190602401602060405180830381865afa158015612287573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122ab9190613ea5565b6040517ffcacfb6b0000000000000000000000000000000000000000000000000000000081523360048201526024810182905290915073ffffffffffffffffffffffffffffffffffffffff83169063fcacfb6b90604401600060405180830381600087803b15801561231c57600080fd5b505af1158015612330573d6000803e3d6000fd5b50505050610c2033828473ffffffffffffffffffffffffffffffffffffffff1663c17af1a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015612384573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123a89190613edb565b73ffffffffffffffffffffffffffffffffffffffff169190612fd0565b60085473ffffffffffffffffffffffffffffffffffffffff16338114612417576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f28fa28a900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016906328fa28a99061248f908890889088908890600401613ef8565b600060405180830381600087803b1580156124a957600080fd5b505af11580156124bd573d6000803e3d6000fd5b505050505050505050565b6124d18161305d565b50565b60045473ffffffffffffffffffffffffffffffffffffffff16338114612526576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600d5460ff1615612563576040517f4426aa1f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8216158061259a575073ffffffffffffffffffffffffffffffffffffffff8316155b806125ca575073ffffffffffffffffffffffffffffffffffffffff82166000908152600f602052604090205460ff165b15612601576040517fe523909000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600e546007546040517f40923cf700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff868116600483015260009216906340923cf7906024016020604051808303816000875af1158015612677573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061269b9190613edb565b6005546040517f15914c990000000000000000000000000000000000000000000000000000000081526004810185905273ffffffffffffffffffffffffffffffffffffffff8084166024830152929350600092909116906315914c99906044016020604051808303816000875af115801561271a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061273e9190613edb565b6006546040517f31c49cba0000000000000000000000000000000000000000000000000000000081526004810186905273ffffffffffffffffffffffffffffffffffffffff8881166024830152929350600092909116906331c49cba906044016020604051808303816000875af11580156127bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127e19190613edb565b905073ffffffffffffffffffffffffffffffffffffffff8116612830576040517f01485c8f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040805160c08101825273ffffffffffffffffffffffffffffffffffffffff808a16825285811660208084019182528a83168486018181528885166060870190815288861660808801908152600060a08901818152600e8054600181810183558285529b5160059091027fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fd81018054928d167fffffffffffffffffffffffff000000000000000000000000000000000000000093841617905599517fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fe8b018054918d1691831691909117905595517fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3ff8a018054918c1691881691909117905593517fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c40089018054918b16919096161790945590517fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c40190960180549351151574010000000000000000000000000000000000000000027fffffffffffffffffffffff0000000000000000000000000000000000000000009094169690971695909517919091179094558252600f90529290922080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169091179055805482919086908110612a3f57612a3f613e0e565b60009182526020909120600591820201600490810180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff94851617905590546040517f5e4e27db0000000000000000000000000000000000000000000000000000000081528484169281019290925290911690635e4e27db90602401600060405180830381600087803b158015612aec57600080fd5b505af1158015612b00573d6000803e3d6000fd5b50505050612b0e8187613694565b6040805185815273ffffffffffffffffffffffffffffffffffffffff808a166020830152808616928201929092528188166060820152818416608082015290821660a08201527f9b0d65965b5814a300c8080287057711dfee63c4041c4c69d4086c4679bb4f1c9060c001611630565b60035473ffffffffffffffffffffffffffffffffffffffff16338114612bd0576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600980547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff84169081179091556040519081527fc714d22a2f08b695f81e7c707058db484aa5b4d6b4c9fd64beb10fe85832f608906020016109d5565b60025473ffffffffffffffffffffffffffffffffffffffff16338114612c95576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517ff3ff955a00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063f3ff955a90602401600060405180830381600087803b158015612d1e57600080fd5b505af1158015612d32573d6000803e3d6000fd5b505050505050565b6000600e8581548110612d4f57612d4f613e0e565b600091825260209091206005909102018054600282015460018301546040517f9dc29fac00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8881166004830152602482018a905294955092841693918216929116908190639dc29fac90604401600060405180830381600087803b158015612de857600080fd5b505af1158015612dfc573d6000803e3d6000fd5b50505050600484015474010000000000000000000000000000000000000000900460ff16612ed5576040517fd9caed1200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84811660048301528381166024830152604482018990527f0000000000000000000000000000000000000000000000000000000000000000169063d9caed1290606401600060405180830381600087803b158015612ebc57600080fd5b505af1158015612ed0573d6000803e3d6000fd5b505050505b6040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff86811660048301526024820189905284169063a9059cbb906044016020604051808303816000875af1158015612f4a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f6e9190613ebe565b506040805173ffffffffffffffffffffffffffffffffffffffff87168152602081018a90529081018890527f92ccf450a286a957af52509bc1c9939d1a6a481783e142e41e2499f0bb66ebc69060600160405180910390a15050505050505050565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052611eb5908490613818565b6000600e828154811061307257613072613e0e565b906000526020600020906005020190508060040160149054906101000a900460ff16156130cb576040517fefc869b400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60028101546040517f1e4b196a00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff91821660048201819052917f00000000000000000000000000000000000000000000000000000000000000001690631e4b196a906024016020604051808303816000875af1158015613161573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131859190613ea5565b50600482015473ffffffffffffffffffffffffffffffffffffffff168015613268578073ffffffffffffffffffffffffffffffffffffffff1663372500ab6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156131ef57600080fd5b505af1158015613203573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff1663ca8b01766040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561324f57600080fd5b505af1158015613263573d6000803e3d6000fd5b505050505b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906370a0823190602401602060405180830381865afa1580156132f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133199190613ea5565b90508015610d3d576000612710600054836133349190613fa2565b61333e9190613fdf565b6003546040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9182166004820152602481018390529192507f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303816000875af11580156133d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133fd9190613ebe565b5060095473ffffffffffffffffffffffffffffffffffffffff161580159061343d575060095473ffffffffffffffffffffffffffffffffffffffff163014155b801561344b57506000600154115b1561353b576000612710600154846134639190613fa2565b61346d9190613fdf565b9050613479818461401a565b6009546040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9182166004820152602481018490529194507f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303816000875af1158015613514573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135389190613ebe565b50505b613545818361401a565b60038601546040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff91821660048201819052602482018490529294507f00000000000000000000000000000000000000000000000000000000000000009091169063a9059cbb906044016020604051808303816000875af11580156135e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061360a9190613ebe565b506040517f590a41f50000000000000000000000000000000000000000000000000000000081526004810184905273ffffffffffffffffffffffffffffffffffffffff82169063590a41f590602401600060405180830381600087803b15801561367357600080fd5b505af1158015613687573d6000803e3d6000fd5b5050505050505050505050565b6040805173ffffffffffffffffffffffffffffffffffffffff84811660248084019190915283518084039091018152604490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fbdf981160000000000000000000000000000000000000000000000000000000017905291517fb61d27f600000000000000000000000000000000000000000000000000000000815290916000917f00000000000000000000000000000000000000000000000000000000000000009091169063b61d27f690613779908690859087906004016140a7565b6000604051808303816000875af1158015613798573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526137de9190810190614114565b5090508061090e576040517f613f5a7300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061387a826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166139299092919063ffffffff16565b805190915015611eb557808060200190518101906138989190613ebe565b611eb5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b60606139388484600085613942565b90505b9392505050565b6060824710156139d4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401613920565b73ffffffffffffffffffffffffffffffffffffffff85163b613a52576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401613920565b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051613a7b91906141f5565b60006040518083038185875af1925050503d8060008114613ab8576040519150601f19603f3d011682016040523d82523d6000602084013e613abd565b606091505b5091509150613acd828286613ad8565b979650505050505050565b60608315613ae757508161393b565b825115613af75782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016139209190614211565b50805460008255906000526020600020908101906124d191905b80821115613b595760008155600101613b45565b5090565b60008060408385031215613b7057600080fd5b50508035926020909101359150565b73ffffffffffffffffffffffffffffffffffffffff811681146124d157600080fd5b600060208284031215613bb357600080fd5b813561393b81613b7f565b600080600060608486031215613bd357600080fd5b83359250602084013591506040840135613bec81613b7f565b809150509250925092565b600060208284031215613c0957600080fd5b5035919050565b80151581146124d157600080fd5b600080600060608486031215613c3357600080fd5b83359250602084013591506040840135613bec81613c10565b60008060408385031215613c5f57600080fd5b823591506020830135613c7181613c10565b809150509250929050565b60008060408385031215613c8f57600080fd5b823591506020830135613c7181613b7f565b600080600060608486031215613cb657600080fd5b8335613cc181613b7f565b92506020840135613cd181613b7f565b91506040840135613bec81613b7f565b60008083601f840112613cf357600080fd5b50813567ffffffffffffffff811115613d0b57600080fd5b6020830191508360208260051b8501011115613d2657600080fd5b9250929050565b60008060008060408587031215613d4357600080fd5b843567ffffffffffffffff80821115613d5b57600080fd5b613d6788838901613ce1565b90965094506020870135915080821115613d8057600080fd5b50613d8d87828801613ce1565b95989497509550505050565b60008060408385031215613dac57600080fd5b8235613db781613b7f565b91506020830135613c7181613b7f565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008219821115613e0957613e09613dc7565b500190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006040820173ffffffffffffffffffffffffffffffffffffffff80861684526020604081860152828651808552606087019150828801945060005b81811015613e97578551851683529483019491830191600101613e79565b509098975050505050505050565b600060208284031215613eb757600080fd5b5051919050565b600060208284031215613ed057600080fd5b815161393b81613c10565b600060208284031215613eed57600080fd5b815161393b81613b7f565b6040808252810184905260008560608301825b87811015613f48578235613f1e81613b7f565b73ffffffffffffffffffffffffffffffffffffffff16825260209283019290910190600101613f0b565b5083810360208501528481527f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff851115613f8157600080fd5b8460051b915081866020830137600091016020019081529695505050505050565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613fda57613fda613dc7565b500290565b600082614015577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b60008282101561402c5761402c613dc7565b500390565b60005b8381101561404c578181015183820152602001614034565b8381111561090e5750506000910152565b60008151808452614075816020860160208601614031565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b73ffffffffffffffffffffffffffffffffffffffff841681528260208201526060604082015260006140dc606083018461405d565b95945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000806040838503121561412757600080fd5b825161413281613c10565b602084015190925067ffffffffffffffff8082111561415057600080fd5b818501915085601f83011261416457600080fd5b815181811115614176576141766140e5565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f011681019083821181831017156141bc576141bc6140e5565b816040528281528860208487010111156141d557600080fd5b6141e6836020830160208801614031565b80955050505050509250929050565b60008251614207818460208701614031565b9190910192915050565b60208152600061393b602083018461405d56fea26469706673582212200f895d8650bc9912c6c894e4f9a76302e7f89b63d63987ab2e20f4216a9c11ab64736f6c634300080f0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106103415760003560e01c80636dc7a627116101bd578063c2300bef116100f9578063dc4c90d3116100a2578063f0f442601161007c578063f0f44260146107c1578063f3074b93146107d4578063f3ff955a146107dc578063fa78668f146107ef57600080fd5b8063dc4c90d31461076e578063e77772fe1461078e578063eb511dd4146107ae57600080fd5b8063d0fb0203116100d3578063d0fb02031461071e578063d6a0f5301461073e578063d73792a91461076557600080fd5b8063c2300bef146106df578063cb0d5b52146106e8578063cc956f3f1461070b57600080fd5b8063958e2d3111610166578063b4d2e3d111610140578063b4d2e3d1146106ae578063b5c4a5ad146106b7578063bf86d690146106bf578063bfad96ba146106cc57600080fd5b8063958e2d31146106685780639f00332b1461067b578063aa2eded21461069b57600080fd5b80637bd3b995116101975780637bd3b995146106225780638da5cb5b146106355780638ef4403c1461065557600080fd5b80636dc7a627146105da57806374874323146105fc5780637aef67151461060f57600080fd5b8063275e86c01161028c578063441a3e70116102355780635ebaf1db1161020f5780635ebaf1db1461056d57806360759fce1461059457806361d027b3146105a75780636c7b69cb146105c757600080fd5b8063441a3e7014610534578063452e97ac14610547578063472d35b91461055a57600080fd5b80633b632bb9116102665780633b632bb9146104f25780633d79d1c8146104fa57806343a0d0661461052157600080fd5b8063275e86c014610494578063354af919146104ca578063376d771a146104d257600080fd5b8063194a4e7e116102ee5780631f9eddb3116102c85780631f9eddb31461046457806322230b961461046c578063245e4bf01461047457600080fd5b8063194a4e7e146104405780631b5d3670146104495780631cc51d401461045157600080fd5b806313af40351161031f57806313af4035146103b757806314cd70e4146103ca5780631526fe27146103dd57600080fd5b8063068eb19e14610346578063081e3eda146103905780630b78f9c0146103a2575b600080fd5b6006546103669073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b600e545b604051908152602001610387565b6103b56103b0366004613b5d565b6107fa565b005b6103b56103c5366004613ba1565b610914565b6103b56103d8366004613bbe565b6109e1565b6103f06103eb366004613bf7565b610a67565b6040805173ffffffffffffffffffffffffffffffffffffffff97881681529587166020870152938616938501939093529084166060840152909216608082015290151560a082015260c001610387565b61039460015481565b6103b5610ae6565b6103b561045f366004613ba1565b610b70565b6103b5610c24565b6103b5610d44565b6005546103669073ffffffffffffffffffffffffffffffffffffffff1681565b6103666104a2366004613ba1565b600c6020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b6103b561100e565b600a546103669073ffffffffffffffffffffffffffffffffffffffff1681565b6103b56110b7565b6103667f000000000000000000000000000000000000000000000000000000000000000081565b6103b561052f366004613c1e565b611171565b6103b5610542366004613b5d565b611641565b6103b5610555366004613b5d565b61164d565b6103b5610568366004613ba1565b611874565b6103667f000000000000000000000000000000000000000000000000000000000000000081565b6103b56105a2366004613c4c565b611939565b6009546103669073ffffffffffffffffffffffffffffffffffffffff1681565b6103b56105d5366004613c7c565b6119fe565b600d546105ec90610100900460ff1681565b6040519015158152602001610387565b6103b561060a366004613ba1565b611b1e565b6103b561061d366004613ba1565b611be3565b6103b5610630366004613ca1565b611ca8565b6002546103669073ffffffffffffffffffffffffffffffffffffffff1681565b610366610663366004613bf7565b611db7565b6103b5610676366004613bf7565b611dee565b6008546103669073ffffffffffffffffffffffffffffffffffffffff1681565b6103b56106a9366004613ba1565b611eba565b61039460005481565b6103b5612103565b600d546105ec9060ff1681565b6103b56106da366004613d2d565b6123c5565b610394610bb881565b6105ec6106f6366004613ba1565b600f6020526000908152604090205460ff1681565b6103b5610719366004613bf7565b6124c8565b6003546103669073ffffffffffffffffffffffffffffffffffffffff1681565b6103667f000000000000000000000000000000000000000000000000000000000000000081565b61039461271081565b6004546103669073ffffffffffffffffffffffffffffffffffffffff1681565b6007546103669073ffffffffffffffffffffffffffffffffffffffff1681565b6103b56107bc366004613d99565b6124d4565b6103b56107cf366004613ba1565b612b7e565b600b54610394565b6103b56107ea366004613ba1565b612c43565b6103946301e1338081565b60035473ffffffffffffffffffffffffffffffffffffffff1633811461084c576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006108588484613df6565b9050610bb8811115610896576040517fe523909000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6101f484101580156108aa57506107d08411155b80156108b7575060648310155b80156108c557506103e88311155b1561090e576001849055600083905560408051858152602081018590527f64f84976d9c917a44796104a59950fdbd9b3c16a5dd348b546d738301f6bd068910160405180910390a15b50505050565b60025473ffffffffffffffffffffffffffffffffffffffff16338114610966576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600280547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff84169081179091556040519081527fa2ea9883a321a3e97b8266c2b078bfeec6d50c711ed71f874a90d500ae2eaf36906020015b60405180910390a15050565b6000600e84815481106109f6576109f6613e0e565b600091825260209091206003600590920201015473ffffffffffffffffffffffffffffffffffffffff169050338114610a5b576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61090e84843385612d3a565b600e8181548110610a7757600080fd5b60009182526020909120600590910201805460018201546002830154600384015460049094015473ffffffffffffffffffffffffffffffffffffffff93841695509183169390831692908116919081169074010000000000000000000000000000000000000000900460ff1686565b60035473ffffffffffffffffffffffffffffffffffffffff16338114610b38576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610b44600b6000613b2b565b6040517f6c476c8f4aa224f57d954654c067fdcae2391e2a93c16d3296ecea1d41aeed0590600090a150565b60025473ffffffffffffffffffffffffffffffffffffffff16338114610bc2576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600a5473ffffffffffffffffffffffffffffffffffffffff16610c2057600a80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff84161790555b5050565b60025473ffffffffffffffffffffffffffffffffffffffff16338114610c76576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600d80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790556040517fb287ff3100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063b287ff3190602401600060405180830381600087803b158015610d2957600080fd5b505af1158015610d3d573d6000803e3d6000fd5b5050505050565b6000600b805480602002602001604051908101604052809291908181526020018280548015610da957602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311610d7e575b50506040517fa81d2f470000000000000000000000000000000000000000000000000000000081529394505073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169263a81d2f479250610e4591507f0000000000000000000000000000000000000000000000000000000000000000908590600401613e3d565b600060405180830381600087803b158015610e5f57600080fd5b505af1158015610e73573d6000803e3d6000fd5b5050505060005b8151811015610c20576000828281518110610e9757610e97613e0e565b60209081029190910101516040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290915060009073ffffffffffffffffffffffffffffffffffffffff8316906370a0823190602401602060405180830381865afa158015610f12573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f369190613ea5565b905080156110045773ffffffffffffffffffffffffffffffffffffffff8083166000818152600c6020526040902054610f70921683612fd0565b73ffffffffffffffffffffffffffffffffffffffff8281166000908152600c6020526040908190205490517f590a41f50000000000000000000000000000000000000000000000000000000081526004810184905291169063590a41f590602401600060405180830381600087803b158015610feb57600080fd5b505af1158015610fff573d6000803e3d6000fd5b505050505b5050600101610e7a565b60025473ffffffffffffffffffffffffffffffffffffffff16338114611060576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600d80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790556040517fa7f1177ac6d0519232556de7d5158b9c7142cfeaebb1ff60315c49d364c75dfa90600090a150565b60025473ffffffffffffffffffffffffffffffffffffffff16338114611109576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16636ea447ba6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610d2957600080fd5b600d5460ff16156111ae576040517f4426aa1f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600e84815481106111c3576111c3613e0e565b906000526020600020906005020190508060040160149054906101000a900460ff161561121c576040517fefc869b400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80546040517f23b872dd00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000081166024830152604482018690529091169081906323b872dd906064016020604051808303816000875af11580156112bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112e09190613ebe565b5060028201546040517ff9609f0800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff838116600483015291821660248201819052917f0000000000000000000000000000000000000000000000000000000000000000169063f9609f0890604401600060405180830381600087803b15801561137a57600080fd5b505af115801561138e573d6000803e3d6000fd5b50505050600183015473ffffffffffffffffffffffffffffffffffffffff168415611567576040517f40c10f190000000000000000000000000000000000000000000000000000000081523060048201526024810187905273ffffffffffffffffffffffffffffffffffffffff8216906340c10f1990604401600060405180830381600087803b15801561142157600080fd5b505af1158015611435573d6000803e3d6000fd5b5050505060038401546040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff91821660048201819052602482018990529183169063095ea7b3906044016020604051808303816000875af11580156114b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114da9190613ebe565b506040517f2ee409080000000000000000000000000000000000000000000000000000000081523360048201526024810188905273ffffffffffffffffffffffffffffffffffffffff821690632ee4090890604401600060405180830381600087803b15801561154957600080fd5b505af115801561155d573d6000803e3d6000fd5b50505050506115ee565b6040517f40c10f190000000000000000000000000000000000000000000000000000000081523360048201526024810187905273ffffffffffffffffffffffffffffffffffffffff8216906340c10f1990604401600060405180830381600087803b1580156115d557600080fd5b505af11580156115e9573d6000803e3d6000fd5b505050505b604080513381526020810189905290810187905285151560608201527f65e6f89b6907d6277741ee4ccbc4ae260163a17f16bbb55b5344dff064867c40906080015b60405180910390a150505050505050565b610c2082823333612d3a565b60045473ffffffffffffffffffffffffffffffffffffffff1633811461169f576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b825b8281101561090e576000600e82815481106116be576116be613e0e565b906000526020600020906005020190508060040160149054906101000a900460ff16156116eb575061186c565b6116f48261305d565b805460028201546040517f09cae2c800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff928316600482015290821660248201527f0000000000000000000000000000000000000000000000000000000000000000909116906309cae2c890604401600060405180830381600087803b15801561178e57600080fd5b505af192505050801561179f575060015b506004810180547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1674010000000000000000000000000000000000000000179055600281015473ffffffffffffffffffffffffffffffffffffffff166000908152600f60205260409081902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055517f26b91c5ee7016e010d571b6baf5f465e048be724ce3b1cc7a6e25230b42ce47d906118629084815260200190565b60405180910390a1505b6001016116a1565b60035473ffffffffffffffffffffffffffffffffffffffff163381146118c6576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff84169081179091556040519081527f45d7e621935e768c84854481fb8a41a30200fbe59f86660d5e02dd876563d898906020016109d5565b6000600e838154811061194e5761194e613e0e565b60009182526020822060059190910201546040517f70a0823100000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff909116925082906370a0823190602401602060405180830381865afa1580156119cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119f19190613ea5565b905061090e848285611171565b6000600e8381548110611a1357611a13613e0e565b600091825260209091206004600590920201015473ffffffffffffffffffffffffffffffffffffffff169050338114611a78576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517fef5cfb8c00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063ef5cfb8c90602401600060405180830381600087803b158015611b0157600080fd5b505af1158015611b15573d6000803e3d6000fd5b50505050505050565b60085473ffffffffffffffffffffffffffffffffffffffff16338114611b70576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600880547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff84169081179091556040519081527f2a1362e990f0ede76fc346823fb053633a4e6e30dfe212bf6c162ab895c3e24d906020016109d5565b60045473ffffffffffffffffffffffffffffffffffffffff16338114611c35576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600480547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff84169081179091556040519081527fe53395243914ebc025ce712146f66fa5e9d3f04b308fae19ac4123350d1cd20f906020016109d5565b60025473ffffffffffffffffffffffffffffffffffffffff16338114611cfa576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60055473ffffffffffffffffffffffffffffffffffffffff16611d6d576005805473ffffffffffffffffffffffffffffffffffffffff8087167fffffffffffffffffffffffff00000000000000000000000000000000000000009283161790925560078054928516929091169190911790555b5050600680547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff9290921691909117905550565b600b8181548110611dc757600080fd5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b6000600e8281548110611e0357611e03613e0e565b60009182526020822060059190910201600101546040517f70a0823100000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff909116925082906370a0823190602401602060405180830381865afa158015611e85573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ea99190613ea5565b9050611eb58382611641565b505050565b60035473ffffffffffffffffffffffffffffffffffffffff16338114611f0c576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600b80546001810182556000919091527f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db90180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8481169182179092557f0000000000000000000000000000000000000000000000000000000000000000909116900361200257600a5473ffffffffffffffffffffffffffffffffffffffff8381166000908152600c6020526040902080547fffffffffffffffffffffffff000000000000000000000000000000000000000016919092161790555050565b600554600a546040517f2f1b327100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff858116600483015291821660248201523060448201526000929190911690632f1b3271906064016020604051808303816000875af1158015612089573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120ad9190613edb565b73ffffffffffffffffffffffffffffffffffffffff9384166000908152600c6020526040902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001691909416179092555050565b600d54610100900460ff1661211757600080fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663c7c4ff466040518163ffffffff1660e01b8152600401602060405180830381865afa158015612184573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121a89190613edb565b905060008173ffffffffffffffffffffffffffffffffffffffff1663815a90da6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156121f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061221b9190613edb565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff91909116906370a0823190602401602060405180830381865afa158015612287573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122ab9190613ea5565b6040517ffcacfb6b0000000000000000000000000000000000000000000000000000000081523360048201526024810182905290915073ffffffffffffffffffffffffffffffffffffffff83169063fcacfb6b90604401600060405180830381600087803b15801561231c57600080fd5b505af1158015612330573d6000803e3d6000fd5b50505050610c2033828473ffffffffffffffffffffffffffffffffffffffff1663c17af1a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015612384573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123a89190613edb565b73ffffffffffffffffffffffffffffffffffffffff169190612fd0565b60085473ffffffffffffffffffffffffffffffffffffffff16338114612417576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f28fa28a900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016906328fa28a99061248f908890889088908890600401613ef8565b600060405180830381600087803b1580156124a957600080fd5b505af11580156124bd573d6000803e3d6000fd5b505050505050505050565b6124d18161305d565b50565b60045473ffffffffffffffffffffffffffffffffffffffff16338114612526576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600d5460ff1615612563576040517f4426aa1f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8216158061259a575073ffffffffffffffffffffffffffffffffffffffff8316155b806125ca575073ffffffffffffffffffffffffffffffffffffffff82166000908152600f602052604090205460ff165b15612601576040517fe523909000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600e546007546040517f40923cf700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff868116600483015260009216906340923cf7906024016020604051808303816000875af1158015612677573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061269b9190613edb565b6005546040517f15914c990000000000000000000000000000000000000000000000000000000081526004810185905273ffffffffffffffffffffffffffffffffffffffff8084166024830152929350600092909116906315914c99906044016020604051808303816000875af115801561271a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061273e9190613edb565b6006546040517f31c49cba0000000000000000000000000000000000000000000000000000000081526004810186905273ffffffffffffffffffffffffffffffffffffffff8881166024830152929350600092909116906331c49cba906044016020604051808303816000875af11580156127bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127e19190613edb565b905073ffffffffffffffffffffffffffffffffffffffff8116612830576040517f01485c8f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040805160c08101825273ffffffffffffffffffffffffffffffffffffffff808a16825285811660208084019182528a83168486018181528885166060870190815288861660808801908152600060a08901818152600e8054600181810183558285529b5160059091027fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fd81018054928d167fffffffffffffffffffffffff000000000000000000000000000000000000000093841617905599517fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fe8b018054918d1691831691909117905595517fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3ff8a018054918c1691881691909117905593517fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c40089018054918b16919096161790945590517fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c40190960180549351151574010000000000000000000000000000000000000000027fffffffffffffffffffffff0000000000000000000000000000000000000000009094169690971695909517919091179094558252600f90529290922080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169091179055805482919086908110612a3f57612a3f613e0e565b60009182526020909120600591820201600490810180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff94851617905590546040517f5e4e27db0000000000000000000000000000000000000000000000000000000081528484169281019290925290911690635e4e27db90602401600060405180830381600087803b158015612aec57600080fd5b505af1158015612b00573d6000803e3d6000fd5b50505050612b0e8187613694565b6040805185815273ffffffffffffffffffffffffffffffffffffffff808a166020830152808616928201929092528188166060820152818416608082015290821660a08201527f9b0d65965b5814a300c8080287057711dfee63c4041c4c69d4086c4679bb4f1c9060c001611630565b60035473ffffffffffffffffffffffffffffffffffffffff16338114612bd0576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600980547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff84169081179091556040519081527fc714d22a2f08b695f81e7c707058db484aa5b4d6b4c9fd64beb10fe85832f608906020016109d5565b60025473ffffffffffffffffffffffffffffffffffffffff16338114612c95576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517ff3ff955a00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063f3ff955a90602401600060405180830381600087803b158015612d1e57600080fd5b505af1158015612d32573d6000803e3d6000fd5b505050505050565b6000600e8581548110612d4f57612d4f613e0e565b600091825260209091206005909102018054600282015460018301546040517f9dc29fac00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8881166004830152602482018a905294955092841693918216929116908190639dc29fac90604401600060405180830381600087803b158015612de857600080fd5b505af1158015612dfc573d6000803e3d6000fd5b50505050600484015474010000000000000000000000000000000000000000900460ff16612ed5576040517fd9caed1200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84811660048301528381166024830152604482018990527f0000000000000000000000000000000000000000000000000000000000000000169063d9caed1290606401600060405180830381600087803b158015612ebc57600080fd5b505af1158015612ed0573d6000803e3d6000fd5b505050505b6040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff86811660048301526024820189905284169063a9059cbb906044016020604051808303816000875af1158015612f4a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f6e9190613ebe565b506040805173ffffffffffffffffffffffffffffffffffffffff87168152602081018a90529081018890527f92ccf450a286a957af52509bc1c9939d1a6a481783e142e41e2499f0bb66ebc69060600160405180910390a15050505050505050565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052611eb5908490613818565b6000600e828154811061307257613072613e0e565b906000526020600020906005020190508060040160149054906101000a900460ff16156130cb576040517fefc869b400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60028101546040517f1e4b196a00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff91821660048201819052917f00000000000000000000000000000000000000000000000000000000000000001690631e4b196a906024016020604051808303816000875af1158015613161573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131859190613ea5565b50600482015473ffffffffffffffffffffffffffffffffffffffff168015613268578073ffffffffffffffffffffffffffffffffffffffff1663372500ab6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156131ef57600080fd5b505af1158015613203573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff1663ca8b01766040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561324f57600080fd5b505af1158015613263573d6000803e3d6000fd5b505050505b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906370a0823190602401602060405180830381865afa1580156132f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133199190613ea5565b90508015610d3d576000612710600054836133349190613fa2565b61333e9190613fdf565b6003546040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9182166004820152602481018390529192507f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303816000875af11580156133d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133fd9190613ebe565b5060095473ffffffffffffffffffffffffffffffffffffffff161580159061343d575060095473ffffffffffffffffffffffffffffffffffffffff163014155b801561344b57506000600154115b1561353b576000612710600154846134639190613fa2565b61346d9190613fdf565b9050613479818461401a565b6009546040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9182166004820152602481018490529194507f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303816000875af1158015613514573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135389190613ebe565b50505b613545818361401a565b60038601546040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff91821660048201819052602482018490529294507f00000000000000000000000000000000000000000000000000000000000000009091169063a9059cbb906044016020604051808303816000875af11580156135e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061360a9190613ebe565b506040517f590a41f50000000000000000000000000000000000000000000000000000000081526004810184905273ffffffffffffffffffffffffffffffffffffffff82169063590a41f590602401600060405180830381600087803b15801561367357600080fd5b505af1158015613687573d6000803e3d6000fd5b5050505050505050505050565b6040805173ffffffffffffffffffffffffffffffffffffffff84811660248084019190915283518084039091018152604490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fbdf981160000000000000000000000000000000000000000000000000000000017905291517fb61d27f600000000000000000000000000000000000000000000000000000000815290916000917f00000000000000000000000000000000000000000000000000000000000000009091169063b61d27f690613779908690859087906004016140a7565b6000604051808303816000875af1158015613798573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526137de9190810190614114565b5090508061090e576040517f613f5a7300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061387a826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166139299092919063ffffffff16565b805190915015611eb557808060200190518101906138989190613ebe565b611eb5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b60606139388484600085613942565b90505b9392505050565b6060824710156139d4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401613920565b73ffffffffffffffffffffffffffffffffffffffff85163b613a52576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401613920565b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051613a7b91906141f5565b60006040518083038185875af1925050503d8060008114613ab8576040519150601f19603f3d011682016040523d82523d6000602084013e613abd565b606091505b5091509150613acd828286613ad8565b979650505050505050565b60608315613ae757508161393b565b825115613af75782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016139209190614211565b50805460008255906000526020600020908101906124d191905b80821115613b595760008155600101613b45565b5090565b60008060408385031215613b7057600080fd5b50508035926020909101359150565b73ffffffffffffffffffffffffffffffffffffffff811681146124d157600080fd5b600060208284031215613bb357600080fd5b813561393b81613b7f565b600080600060608486031215613bd357600080fd5b83359250602084013591506040840135613bec81613b7f565b809150509250925092565b600060208284031215613c0957600080fd5b5035919050565b80151581146124d157600080fd5b600080600060608486031215613c3357600080fd5b83359250602084013591506040840135613bec81613c10565b60008060408385031215613c5f57600080fd5b823591506020830135613c7181613c10565b809150509250929050565b60008060408385031215613c8f57600080fd5b823591506020830135613c7181613b7f565b600080600060608486031215613cb657600080fd5b8335613cc181613b7f565b92506020840135613cd181613b7f565b91506040840135613bec81613b7f565b60008083601f840112613cf357600080fd5b50813567ffffffffffffffff811115613d0b57600080fd5b6020830191508360208260051b8501011115613d2657600080fd5b9250929050565b60008060008060408587031215613d4357600080fd5b843567ffffffffffffffff80821115613d5b57600080fd5b613d6788838901613ce1565b90965094506020870135915080821115613d8057600080fd5b50613d8d87828801613ce1565b95989497509550505050565b60008060408385031215613dac57600080fd5b8235613db781613b7f565b91506020830135613c7181613b7f565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008219821115613e0957613e09613dc7565b500190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006040820173ffffffffffffffffffffffffffffffffffffffff80861684526020604081860152828651808552606087019150828801945060005b81811015613e97578551851683529483019491830191600101613e79565b509098975050505050505050565b600060208284031215613eb757600080fd5b5051919050565b600060208284031215613ed057600080fd5b815161393b81613c10565b600060208284031215613eed57600080fd5b815161393b81613b7f565b6040808252810184905260008560608301825b87811015613f48578235613f1e81613b7f565b73ffffffffffffffffffffffffffffffffffffffff16825260209283019290910190600101613f0b565b5083810360208501528481527f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff851115613f8157600080fd5b8460051b915081866020830137600091016020019081529695505050505050565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613fda57613fda613dc7565b500290565b600082614015577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b60008282101561402c5761402c613dc7565b500390565b60005b8381101561404c578181015183820152602001614034565b8381111561090e5750506000910152565b60008151808452614075816020860160208601614031565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b73ffffffffffffffffffffffffffffffffffffffff841681528260208201526060604082015260006140dc606083018461405d565b95945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000806040838503121561412757600080fd5b825161413281613c10565b602084015190925067ffffffffffffffff8082111561415057600080fd5b818501915085601f83011261416457600080fd5b815181811115614176576141766140e5565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f011681019083821181831017156141bc576141bc6140e5565b816040528281528860208487010111156141d557600080fd5b6141e6836020830160208801614031565b80955050505050509250929050565b60008251614207818460208701614031565b9190910192915050565b60208152600061393b602083018461405d56fea26469706673582212200f895d8650bc9912c6c894e4f9a76302e7f89b63d63987ab2e20f4216a9c11ab64736f6c634300080f0033",
  "devdoc": {
    "details": "Controller contract for Prime Pools is based on the convex Booster.sol contract",
    "kind": "dev",
    "methods": {
      "addFeeToken(address)": {
        "params": {
          "_feeToken": "feeToken"
        }
      },
      "addPool(address,address)": {
        "params": {
          "_gauge": "The address of the gauge controller",
          "_lptoken": "The address of the lp token"
        }
      },
      "bulkPoolShutdown(uint256,uint256)": {
        "details": "Claims rewards for that pool before shutting it down",
        "params": {
          "_endPoolIdx": "End pool index (excluded)",
          "_startPoolIdx": "Start pool index"
        }
      },
      "claimRewards(uint256,address)": {
        "params": {
          "_gauge": "address of the gauge",
          "_pid": "the id of the pool"
        }
      },
      "delegateVotingPower(address)": {
        "params": {
          "_delegateTo": "to whom we delegate voting power"
        }
      },
      "deposit(uint256,uint256,bool)": {
        "details": "Sender must approve LP tokens to Controller smart contract",
        "params": {
          "_amount": "The amount of lp tokens to be deposited",
          "_pid": "The pool id to deposit lp tokens into",
          "_stake": "bool for wheather the tokens should be staked"
        }
      },
      "depositAll(uint256,bool)": {
        "details": "Sender must approve LP tokens to Controller smart contract",
        "params": {
          "_pid": "The pool id to deposit lp tokens into",
          "_stake": "bool for wheather the tokens should be staked"
        }
      },
      "earmarkRewards(uint256)": {
        "params": {
          "_pid": "the id of the pool where lp tokens are held"
        }
      },
      "setFactories(address,address,address)": {
        "params": {
          "_rfactory": "The address of the reward factory",
          "_sfactory": "The address of the stash factory",
          "_tfactory": "The address of the token factory"
        }
      },
      "setFeeManager(address)": {
        "params": {
          "_feeM": "The address of the fee manager"
        }
      },
      "setFees(uint256,uint256)": {
        "params": {
          "_platformFee": "The amount to set for the platform fees",
          "_profitFee": "The amount to set for the profit fees"
        }
      },
      "setOwner(address)": {
        "params": {
          "_owner": "The address of the owner of the contract"
        }
      },
      "setPoolManager(address)": {
        "params": {
          "_poolM": "The address of the pool manager"
        }
      },
      "setRewardContracts(address)": {
        "params": {
          "_rewards": "The address of the rewards contract"
        }
      },
      "setTreasury(address)": {
        "params": {
          "_treasury": "The address of the treasury contract"
        }
      },
      "setVoteDelegate(address)": {
        "params": {
          "_voteDelegate": "The address of whom votes will be delegated to"
        }
      },
      "shutdownSystem()": {
        "details": "This shuts down the contract"
      },
      "voteGaugeWeight(address[],uint256[])": {
        "params": {
          "_gauges": "array of gauge addresses",
          "_weights": "array of vote weights"
        }
      },
      "withdraw(uint256,uint256)": {
        "params": {
          "_amount": "amount of LP tokens to withdraw",
          "_pid": "The pool id to withdraw lp tokens from"
        }
      },
      "withdrawAll(uint256)": {
        "params": {
          "_pid": "The pool id to withdraw lp tokens from"
        }
      },
      "withdrawTo(uint256,uint256,address)": {
        "params": {
          "_amount": "amount of LP tokens to withdraw",
          "_pid": "The pool id to deposit lp tokens into"
        }
      },
      "withdrawUnlockedWethBal()": {
        "details": "WethBal is redeemable by burning equivalent amount of D2D WethBal"
      }
    },
    "title": "Controller contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addFeeToken(address)": {
        "notice": "sets the address of the feeToken"
      },
      "addPool(address,address)": {
        "notice": "creates a new pool"
      },
      "bulkPoolShutdown(uint256,uint256)": {
        "notice": "Shuts down multiple pools"
      },
      "claimRewards(uint256,address)": {
        "notice": "claims rewards from a specific pool"
      },
      "clearDelegation()": {
        "notice": "Clears delegation of voting power from EOA for VoterProxy"
      },
      "clearFeeTokens()": {
        "notice": "Clears fee tokens"
      },
      "delegateVotingPower(address)": {
        "notice": "Delegates voting power from VoterProxy"
      },
      "deposit(uint256,uint256,bool)": {
        "notice": "Deposits an amount of LP token into a specific pool, mints reward and optionally tokens and  stakes them into the reward contract"
      },
      "depositAll(uint256,bool)": {
        "notice": "Deposits and stakes all LP tokens"
      },
      "earmarkFees()": {
        "notice": "Claims rewards from the Balancer's fee distributor contract and transfers the tokens into the rewards contract"
      },
      "earmarkRewards(uint256)": {
        "notice": "Claims rewards from a pool and disperses them to the rewards contract"
      },
      "poolLength()": {
        "notice": "returns the number of pools"
      },
      "redeemWethBal()": {
        "notice": "Burns all D2DWethBal from a user, and transfers the equivalent amount of unlocked WethBal tokes"
      },
      "setFactories(address,address,address)": {
        "notice": "sets the reward, token, and stash factory addresses"
      },
      "setFeeManager(address)": {
        "notice": "sets the feeManager variable"
      },
      "setFees(uint256,uint256)": {
        "notice": "sets the lock, staker, caller, platform fees and profit fees"
      },
      "setOwner(address)": {
        "notice": "sets the owner variable"
      },
      "setPoolManager(address)": {
        "notice": "sets the poolManager variable"
      },
      "setRewardContracts(address)": {
        "notice": "sets the lockRewards variable"
      },
      "setTreasury(address)": {
        "notice": "sets the contracts treasury variables"
      },
      "setVoteDelegate(address)": {
        "notice": "sets the voteDelegate variable"
      },
      "shutdownSystem()": {
        "notice": "shuts down all pools"
      },
      "voteGaugeWeight(address[],uint256[])": {
        "notice": "Votes for multiple gauges"
      },
      "withdraw(uint256,uint256)": {
        "notice": "Withdraws lp tokens from the pool"
      },
      "withdrawAll(uint256)": {
        "notice": "Withdraws all of the lp tokens in the pool"
      },
      "withdrawTo(uint256,uint256,address)": {
        "notice": "Withdraws LP tokens and sends them to a specified address"
      },
      "withdrawUnlockedWethBal()": {
        "notice": "Withdraws `amount` of unlocked WethBal to controller"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4353,
        "contract": "contracts/Controller.sol:Controller",
        "label": "profitFees",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 4356,
        "contract": "contracts/Controller.sol:Controller",
        "label": "platformFees",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 4358,
        "contract": "contracts/Controller.sol:Controller",
        "label": "owner",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 4360,
        "contract": "contracts/Controller.sol:Controller",
        "label": "feeManager",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 4362,
        "contract": "contracts/Controller.sol:Controller",
        "label": "poolManager",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 4364,
        "contract": "contracts/Controller.sol:Controller",
        "label": "rewardFactory",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 4366,
        "contract": "contracts/Controller.sol:Controller",
        "label": "stashFactory",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 4368,
        "contract": "contracts/Controller.sol:Controller",
        "label": "tokenFactory",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 4370,
        "contract": "contracts/Controller.sol:Controller",
        "label": "voteDelegate",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 4372,
        "contract": "contracts/Controller.sol:Controller",
        "label": "treasury",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 4374,
        "contract": "contracts/Controller.sol:Controller",
        "label": "lockRewards",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 4378,
        "contract": "contracts/Controller.sol:Controller",
        "label": "feeTokens",
        "offset": 0,
        "slot": "11",
        "type": "t_array(t_contract(IERC20)816)dyn_storage"
      },
      {
        "astId": 4382,
        "contract": "contracts/Controller.sol:Controller",
        "label": "feeTokenToPool",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 4384,
        "contract": "contracts/Controller.sol:Controller",
        "label": "isShutdown",
        "offset": 0,
        "slot": "13",
        "type": "t_bool"
      },
      {
        "astId": 4386,
        "contract": "contracts/Controller.sol:Controller",
        "label": "canClaim",
        "offset": 1,
        "slot": "13",
        "type": "t_bool"
      },
      {
        "astId": 4403,
        "contract": "contracts/Controller.sol:Controller",
        "label": "poolInfo",
        "offset": 0,
        "slot": "14",
        "type": "t_array(t_struct(PoolInfo)4399_storage)dyn_storage"
      },
      {
        "astId": 4407,
        "contract": "contracts/Controller.sol:Controller",
        "label": "gaugeMap",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_contract(IERC20)816)dyn_storage": {
        "base": "t_contract(IERC20)816",
        "encoding": "dynamic_array",
        "label": "contract IERC20[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(PoolInfo)4399_storage)dyn_storage": {
        "base": "t_struct(PoolInfo)4399_storage",
        "encoding": "dynamic_array",
        "label": "struct Controller.PoolInfo[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)816": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_struct(PoolInfo)4399_storage": {
        "encoding": "inplace",
        "label": "struct Controller.PoolInfo",
        "members": [
          {
            "astId": 4388,
            "contract": "contracts/Controller.sol:Controller",
            "label": "lptoken",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 4390,
            "contract": "contracts/Controller.sol:Controller",
            "label": "token",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 4392,
            "contract": "contracts/Controller.sol:Controller",
            "label": "gauge",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 4394,
            "contract": "contracts/Controller.sol:Controller",
            "label": "balRewards",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 4396,
            "contract": "contracts/Controller.sol:Controller",
            "label": "stash",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 4398,
            "contract": "contracts/Controller.sol:Controller",
            "label": "shutdown",
            "offset": 20,
            "slot": "4",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}