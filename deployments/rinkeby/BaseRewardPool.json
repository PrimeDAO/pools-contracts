{
  "address": "0x9d0253f454481aC16e349A4b948f45c7EC777897",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pid_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "stakingToken_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "rewardToken_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "rewardManager_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "RewardAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "RewardPaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Staked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DURATION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_reward",
          "type": "address"
        }
      ],
      "name": "addExtraReward",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "clearExtraRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "donate",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "earned",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "extraRewards",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "extraRewardsLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getReward",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_claimExtras",
          "type": "bool"
        }
      ],
      "name": "getReward",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "historicalRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastTimeRewardApplicable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastUpdateTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "newRewardRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "operator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "periodFinish",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_rewards",
          "type": "uint256"
        }
      ],
      "name": "queueNewRewards",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "queuedRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardPerToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardPerTokenStored",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakeAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_for",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "stakeFor",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userRewardPerTokenPaid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "claim",
          "type": "bool"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "claim",
          "type": "bool"
        }
      ],
      "name": "withdrawAllAndUnwrap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "claim",
          "type": "bool"
        }
      ],
      "name": "withdrawAndUnwrap",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x26caa5609b88540772156638ada0ad6e7d08f14589396301ccc5eb53c7660939",
  "receipt": {
    "to": null,
    "from": "0xEFc3a819695932394D89b8AF6f49e0D89EDf9A40",
    "contractAddress": "0x9d0253f454481aC16e349A4b948f45c7EC777897",
    "transactionIndex": 39,
    "gasUsed": "1591185",
    "logsBloom": "0x
    "blockHash": "0xf98abbeb82e2c10a893273e73da1c8a6c3132a09b3fff6eaa20a54f5ba78734f",
    "transactionHash": "0x26caa5609b88540772156638ada0ad6e7d08f14589396301ccc5eb53c7660939",
    "logs": [],
    "blockNumber": 10645495,
    "cumulativeGasUsed": "5693450",
    "status": 1,
    "byzantium": true
  },
  "args": [
    1,
    "0x1A4B29cB74FB2A8f549002ABB1953a1b93A07f51",
    "0x9D2Bfc794F8e5f8Dc911499049aeCf46E74c58A7",
    "0x099035Ca0D8FC878B7a5f38290133572bBe87F35",
    "0x099035Ca0D8FC878B7a5f38290133572bBe87F35"
  ],
  "solcInputHash": "bd75603ac8a277dbfaeddf88f266bad8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"stakingToken_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardToken_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardManager_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_reward\",\"type\":\"address\"}],\"name\":\"addExtraReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clearExtraRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"donate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"extraRewards\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"extraRewardsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_claimExtras\",\"type\":\"bool\"}],\"name\":\"getReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"historicalRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTimeRewardApplicable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newRewardRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"periodFinish\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewards\",\"type\":\"uint256\"}],\"name\":\"queueNewRewards\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"queuedRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerTokenStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_for\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stakeFor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRewardPerTokenPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"claim\",\"type\":\"bool\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"claim\",\"type\":\"bool\"}],\"name\":\"withdrawAllAndUnwrap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"claim\",\"type\":\"bool\"}],\"name\":\"withdrawAndUnwrap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BaseRewardPool.sol\":\"BaseRewardPool\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"},\"contracts/BaseRewardPool.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport \\\"./utils/Interfaces.sol\\\";\\nimport \\\"./utils/MathUtil.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\ncontract BaseRewardPool {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    IERC20 public rewardToken;\\n    IERC20 public stakingToken;\\n    uint256 public constant DURATION = 7 days;\\n\\n    address public operator;\\n    address public rewardManager;\\n\\n    uint256 public pid;\\n    uint256 public periodFinish = 0;\\n    uint256 public rewardRate = 0;\\n    uint256 public lastUpdateTime;\\n    uint256 public rewardPerTokenStored;\\n    uint256 public queuedRewards = 0;\\n    uint256 public currentRewards = 0;\\n    uint256 public historicalRewards = 0;\\n    uint256 public constant newRewardRatio = 830;\\n    uint256 private _totalSupply;\\n    mapping(address => uint256) public userRewardPerTokenPaid;\\n    mapping(address => uint256) public rewards;\\n    mapping(address => uint256) private _balances;\\n\\n    address[] public extraRewards;\\n\\n    event RewardAdded(uint256 reward);\\n    event Staked(address indexed user, uint256 amount);\\n    event Withdrawn(address indexed user, uint256 amount);\\n    event RewardPaid(address indexed user, uint256 reward);\\n\\n    constructor(\\n        uint256 pid_,\\n        address stakingToken_,\\n        address rewardToken_,\\n        address operator_,\\n        address rewardManager_\\n    ) public {\\n        pid = pid_;\\n        stakingToken = IERC20(stakingToken_); //Staking token is d2dBal.\\n        rewardToken = IERC20(rewardToken_); // Rewards token is Bal.\\n        operator = operator_;\\n        rewardManager = rewardManager_;\\n    }\\n\\n    function totalSupply() public view returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function balanceOf(address account) public view returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    function extraRewardsLength() external view returns (uint256) {\\n        return extraRewards.length;\\n    }\\n\\n    function addExtraReward(address _reward) external returns (bool) {\\n        require(msg.sender == rewardManager, \\\"!authorized\\\");\\n        require(_reward != address(0), \\\"!reward setting\\\");\\n\\n        extraRewards.push(_reward);\\n        return true;\\n    }\\n\\n    function clearExtraRewards() external {\\n        require(msg.sender == rewardManager, \\\"!authorized\\\");\\n        delete extraRewards;\\n    }\\n\\n    modifier updateReward(address account) {\\n        rewardPerTokenStored = rewardPerToken();\\n        lastUpdateTime = lastTimeRewardApplicable();\\n        if (account != address(0)) {\\n            rewards[account] = earned(account);\\n            userRewardPerTokenPaid[account] = rewardPerTokenStored;\\n        }\\n        _;\\n    }\\n\\n    function lastTimeRewardApplicable() public view returns (uint256) {\\n        return MathUtil.min(block.timestamp, periodFinish);\\n    }\\n\\n    function rewardPerToken() public view returns (uint256) {\\n        if (totalSupply() == 0) {\\n            return rewardPerTokenStored;\\n        }\\n        return\\n            rewardPerTokenStored.add(\\n                lastTimeRewardApplicable()\\n                    .sub(lastUpdateTime)\\n                    .mul(rewardRate)\\n                    .mul(1e18)\\n                    .div(totalSupply())\\n            );\\n    }\\n\\n    function earned(address account) public view returns (uint256) {\\n        return\\n            balanceOf(account)\\n                .mul(rewardPerToken().sub(userRewardPerTokenPaid[account]))\\n                .div(1e18)\\n                .add(rewards[account]);\\n    }\\n\\n    function stake(uint256 _amount)\\n        public\\n        updateReward(msg.sender)\\n        returns (bool)\\n    {\\n        require(_amount > 0, \\\"RewardPool : Cannot stake 0\\\");\\n\\n        //also stake to linked rewards\\n        for (uint256 i = 0; i < extraRewards.length; i++) {\\n            IRewards(extraRewards[i]).stake(msg.sender, _amount);\\n        }\\n\\n        _totalSupply = _totalSupply.add(_amount);\\n        _balances[msg.sender] = _balances[msg.sender].add(_amount);\\n\\n        stakingToken.safeTransferFrom(msg.sender, address(this), _amount);\\n        emit Staked(msg.sender, _amount);\\n\\n        return true;\\n    }\\n\\n    function stakeAll() external returns (bool) {\\n        uint256 balance = stakingToken.balanceOf(msg.sender);\\n        stake(balance);\\n        return true;\\n    }\\n\\n    //here we are locking tokens\\n    function stakeFor(address _for, uint256 _amount)\\n        public\\n        updateReward(_for)\\n        returns (bool)\\n    {\\n        require(_amount > 0, \\\"RewardPool : Cannot stake 0\\\");\\n\\n        //also stake to linked rewards\\n        for (uint256 i = 0; i < extraRewards.length; i++) {\\n            IRewards(extraRewards[i]).stake(_for, _amount);\\n        }\\n\\n        //give to _for\\n        _totalSupply = _totalSupply.add(_amount);\\n        _balances[_for] = _balances[_for].add(_amount);\\n\\n        //take away from sender\\n        stakingToken.safeTransferFrom(msg.sender, address(this), _amount);\\n        emit Staked(_for, _amount);\\n\\n        return true;\\n    }\\n\\n    function withdraw(uint256 amount, bool claim)\\n        public\\n        updateReward(msg.sender)\\n        returns (bool)\\n    {\\n        require(amount > 0, \\\"RewardPool : Cannot withdraw 0\\\");\\n\\n        //also withdraw from linked rewards\\n        for (uint256 i = 0; i < extraRewards.length; i++) {\\n            IRewards(extraRewards[i]).withdraw(msg.sender, amount);\\n        }\\n\\n        _totalSupply = _totalSupply.sub(amount);\\n        _balances[msg.sender] = _balances[msg.sender].sub(amount); //(_balances created with mapping)\\n\\n        stakingToken.safeTransfer(msg.sender, amount);\\n        emit Withdrawn(msg.sender, amount);\\n\\n        if (claim) {\\n            getReward(msg.sender, true);\\n        }\\n\\n        return true;\\n    }\\n\\n    //It is possible to withdraw the whole amount of d2dBal.\\n    function withdrawAll() external {\\n        bool claim = true;\\n        withdraw(_balances[msg.sender], claim);\\n    }\\n\\n    function withdrawAndUnwrap(uint256 amount, bool claim)\\n        public\\n        updateReward(msg.sender)\\n        returns (bool)\\n    {\\n        //also withdraw from linked rewards\\n        for (uint256 i = 0; i < extraRewards.length; i++) {\\n            IRewards(extraRewards[i]).withdraw(msg.sender, amount);\\n        }\\n\\n        _totalSupply = _totalSupply.sub(amount);\\n        _balances[msg.sender] = _balances[msg.sender].sub(amount);\\n\\n        //tell operator to withdraw from here directly to user\\n        IDeposit(operator).withdrawTo(pid, amount, msg.sender);\\n        emit Withdrawn(msg.sender, amount);\\n\\n        //get rewards too\\n        if (claim) {\\n            getReward(msg.sender, true);\\n        }\\n        return true;\\n    }\\n\\n    function withdrawAllAndUnwrap(bool claim) external {\\n        withdrawAndUnwrap(_balances[msg.sender], claim);\\n    }\\n\\n    function getReward(address _account, bool _claimExtras)\\n        public\\n        updateReward(_account)\\n        returns (bool)\\n    {\\n        uint256 reward = earned(_account);\\n        if (reward > 0) {\\n            rewards[_account] = 0;\\n            rewardToken.safeTransfer(_account, reward);\\n            IDeposit(operator).rewardClaimed(pid, _account, reward);\\n            emit RewardPaid(_account, reward);\\n        }\\n\\n        //also get rewards from linked rewards\\n        if (_claimExtras) {\\n            for (uint256 i = 0; i < extraRewards.length; i++) {\\n                IRewards(extraRewards[i]).getReward(_account);\\n            }\\n        }\\n        return true;\\n    }\\n\\n    function getReward() external returns (bool) {\\n        getReward(msg.sender, true);\\n        return true;\\n    }\\n\\n    function donate(uint256 _amount) external returns (bool) {\\n        IERC20(rewardToken).safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            _amount\\n        );\\n        queuedRewards = queuedRewards.add(_amount);\\n    }\\n\\n    function queueNewRewards(uint256 _rewards) external returns (bool) {\\n        require(msg.sender == operator, \\\"!authorized\\\");\\n\\n        _rewards = _rewards.add(queuedRewards);\\n\\n        if (block.timestamp >= periodFinish) {\\n            notifyRewardAmount(_rewards);\\n            queuedRewards = 0;\\n            return true;\\n        }\\n\\n        //et = now - (finish-duration)\\n        uint256 elapsedTime = block.timestamp.sub(periodFinish.sub(DURATION));\\n        //current at now: rewardRate * elapsedTime\\n        uint256 currentAtNow = rewardRate * elapsedTime;\\n        uint256 queuedRatio = currentAtNow.mul(1000).div(_rewards);\\n\\n        //uint256 queuedRatio = currentRewards.mul(1000).div(_rewards);\\n        if (queuedRatio < newRewardRatio) {\\n            notifyRewardAmount(_rewards);\\n            queuedRewards = 0;\\n        } else {\\n            queuedRewards = _rewards;\\n        }\\n        return true;\\n    }\\n\\n    function notifyRewardAmount(uint256 reward)\\n        internal\\n        updateReward(address(0))\\n    {\\n        historicalRewards = historicalRewards.add(reward);\\n        if (block.timestamp >= periodFinish) {\\n            rewardRate = reward.div(DURATION);\\n        } else {\\n            uint256 remaining = periodFinish.sub(block.timestamp);\\n            uint256 leftover = remaining.mul(rewardRate);\\n            reward = reward.add(leftover);\\n            rewardRate = reward.div(DURATION);\\n        }\\n        currentRewards = reward;\\n        lastUpdateTime = block.timestamp;\\n        periodFinish = block.timestamp.add(DURATION);\\n        emit RewardAdded(reward);\\n    }\\n}\\n\",\"keccak256\":\"0x18cd26c8b2798a52acf139e912f0d88e606667c36a8f3f9e3f0988be99f6b2de\"},\"contracts/utils/Interfaces.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\ninterface ICurveGauge {\\n    function deposit(uint256) external;\\n\\n    function balanceOf(address) external view returns (uint256);\\n\\n    function withdraw(uint256) external;\\n\\n    function claim_rewards() external;\\n\\n    function reward_tokens(uint256) external view returns (address); //v2\\n\\n    function rewarded_token() external view returns (address); //v1\\n\\n    function lp_token() external view returns (address);\\n}\\n\\ninterface ICurveVoteEscrow {\\n    function create_lock(uint256, uint256) external;\\n\\n    function increase_amount(uint256) external;\\n\\n    function increase_unlock_time(uint256) external;\\n\\n    function withdraw() external;\\n\\n    function smart_wallet_checker() external view returns (address);\\n}\\n\\ninterface IWalletChecker {\\n    function check(address) external view returns (bool);\\n}\\n\\ninterface IVoting {\\n    function vote(\\n        uint256,\\n        bool,\\n        bool\\n    ) external; //voteId, support, executeIfDecided\\n\\n    function getVote(uint256)\\n        external\\n        view\\n        returns (\\n            bool,\\n            bool,\\n            uint64,\\n            uint64,\\n            uint64,\\n            uint64,\\n            uint256,\\n            uint256,\\n            uint256,\\n            bytes memory\\n        );\\n\\n    function vote_for_gauge_weights(address, uint256) external;\\n}\\n\\ninterface IMinter {\\n    function mint(address) external;\\n}\\n\\ninterface IRegistry {\\n    function get_registry() external view returns (address);\\n\\n    function get_address(uint256 _id) external view returns (address);\\n\\n    function gauge_controller() external view returns (address);\\n\\n    function get_lp_token(address) external view returns (address);\\n\\n    function get_gauges(address)\\n        external\\n        view\\n        returns (address[10] memory, uint128[10] memory);\\n}\\n\\ninterface IStaker {\\n    function deposit(address, address) external;\\n\\n    function withdraw(address) external;\\n\\n    function withdraw(\\n        address,\\n        address,\\n        uint256\\n    ) external;\\n\\n    function withdrawAll(address, address) external;\\n\\n    function createLock(uint256, uint256) external;\\n\\n    function increaseAmount(uint256) external;\\n\\n    function increaseTime(uint256) external;\\n\\n    function release() external;\\n\\n    function claimCrv(address) external returns (uint256);\\n\\n    function claimRewards(address) external;\\n\\n    function claimFees(address, address) external;\\n\\n    function setStashAccess(address, bool) external;\\n\\n    function vote(\\n        uint256,\\n        address,\\n        bool\\n    ) external;\\n\\n    function voteGaugeWeight(address, uint256) external;\\n\\n    function balanceOfPool(address) external view returns (uint256);\\n\\n    function operator() external view returns (address);\\n\\n    function execute(\\n        address _to,\\n        uint256 _value,\\n        bytes calldata _data\\n    ) external returns (bool, bytes memory);\\n}\\n\\ninterface IRewards {\\n    function stake(address, uint256) external;\\n\\n    function stakeFor(address, uint256) external;\\n\\n    function withdraw(address, uint256) external;\\n\\n    function exit(address) external;\\n\\n    function getReward(address) external;\\n\\n    function queueNewRewards(uint256) external;\\n\\n    function notifyRewardAmount(uint256) external;\\n\\n    function addExtraReward(address) external;\\n\\n    function stakingToken() external view returns (address);\\n\\n    function rewardToken() external view returns (address);\\n\\n    function earned(address account) external view returns (uint256);\\n}\\n\\ninterface IStash {\\n    function stashRewards() external returns (bool);\\n\\n    function processStash() external returns (bool);\\n\\n    function claimRewards() external returns (bool);\\n\\n    function initialize(\\n        uint256 _pid,\\n        address _operator,\\n        address _staker,\\n        address _gauge,\\n        address _rewardFactory\\n    ) external;\\n}\\n\\ninterface IFeeDistro {\\n    function claim() external;\\n\\n    function token() external view returns (address);\\n}\\n\\ninterface ITokenMinter {\\n    function mint(address, uint256) external;\\n\\n    function burn(address, uint256) external;\\n}\\n\\ninterface IDeposit {\\n    function isShutdown() external view returns (bool);\\n\\n    function balanceOf(address _account) external view returns (uint256);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function poolInfo(uint256)\\n        external\\n        view\\n        returns (\\n            address,\\n            address,\\n            address,\\n            address,\\n            address,\\n            bool\\n        );\\n\\n    function rewardClaimed(\\n        uint256,\\n        address,\\n        uint256\\n    ) external;\\n\\n    function withdrawTo(\\n        uint256,\\n        uint256,\\n        address\\n    ) external;\\n\\n    function claimRewards(uint256, address) external returns (bool);\\n\\n    function rewardArbitrator() external returns (address);\\n\\n    function setGaugeRedirect(uint256 _pid) external returns (bool);\\n\\n    function owner() external returns (address);\\n}\\n\\ninterface ICrvDeposit {\\n    function deposit(uint256, bool) external;\\n\\n    function lockIncentive() external view returns (uint256);\\n}\\n\\ninterface IRewardFactory {\\n    function setAccess(address, bool) external;\\n\\n    function CreateBalRewards(uint256, address) external returns (address);\\n\\n    function CreateTokenRewards(\\n        address,\\n        address,\\n        address\\n    ) external returns (address);\\n\\n    function activeRewardCount(address) external view returns (uint256);\\n\\n    function addActiveReward(address, uint256) external returns (bool);\\n\\n    function removeActiveReward(address, uint256) external returns (bool);\\n}\\n\\ninterface IStashFactory {\\n    function CreateStash(\\n        uint256,\\n        address,\\n        address,\\n        uint256\\n    ) external returns (address);\\n}\\n\\ninterface ITokenFactory {\\n    function CreateDepositToken(address) external returns (address);\\n}\\n\\ninterface IPools {\\n    function addPool(\\n        address _lptoken,\\n        address _gauge,\\n        uint256 _stashVersion\\n    ) external returns (bool);\\n\\n    function forceAddPool(\\n        address _lptoken,\\n        address _gauge,\\n        uint256 _stashVersion\\n    ) external returns (bool);\\n\\n    function shutdownPool(uint256 _pid) external returns (bool);\\n\\n    function poolInfo(uint256)\\n        external\\n        view\\n        returns (\\n            address,\\n            address,\\n            address,\\n            address,\\n            address,\\n            bool\\n        );\\n\\n    function poolLength() external view returns (uint256);\\n\\n    function gaugeMap(address) external view returns (bool);\\n\\n    function setPoolManager(address _poolM) external;\\n}\\n\\ninterface IVestedEscrow {\\n    function fund(address[] calldata _recipient, uint256[] calldata _amount)\\n        external\\n        returns (bool);\\n}\\n\",\"keccak256\":\"0x9d4d25001eb30a3dce9ebd8823be5eab3a65245321d614af91c74ba27f194123\"},\"contracts/utils/MathUtil.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// copied from https://github.com/Uniswap/v2-core/blob/master/contracts/libraries/SafeMath.sol\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUtil {\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n}\\n\",\"keccak256\":\"0x9e105b0b40007fffed756069827f16b398d7b56123bb7d6771b6a3bdd547522a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526000600555600060065560006009556000600a556000600b553480156200002a57600080fd5b5060405162001abc38038062001abc8339810160408190526200004d91620000c2565b600494909455600180546001600160a01b03199081166001600160a01b039586161790915560008054821693851693909317909255600280548316918416919091179055600380549091169190921617905562000129565b80516001600160a01b0381168114620000bd57600080fd5b919050565b600080600080600060a08688031215620000db57600080fd5b85519450620000ed60208701620000a5565b9350620000fd60408701620000a5565b92506200010d60608701620000a5565b91506200011d60808701620000a5565b90509295509295909350565b61198380620001396000396000f3fe608060405234801561001057600080fd5b506004361061021b5760003560e01c806370a0823111610125578063c32e7202116100ad578063df136d651161007c578063df136d651461043d578063ebe2b12b14610446578063f10684541461044f578063f14faf6f14610458578063f7c618c11461046b57600080fd5b8063c32e720214610411578063c8f33c9114610424578063cd3daf9d1461042d578063d55a23f41461043557600080fd5b8063853828b6116100f4578063853828b6146103c55780638b876347146103cd5780638dcb4061146103ed578063901a7d53146103f5578063a694fc3a146103fe57600080fd5b806370a082311461037857806372f702f3146103a15780637b0a47ee146103b457806380faa57d146103bd57600080fd5b80633d18b912116101a8578063590a41f511610177578063590a41f51461032d5780635e43c47b1461034057806363d38c3b146103535780636c8bcee81461035c5780637050ccd91461036557600080fd5b80633d18b912146102ec57806340c35446146102f457806349f039a214610307578063570ca7351461031a57600080fd5b806318160ddd116101ef57806318160ddd1461029b5780631be05289146102a3578063262d3d6d146102ad5780632ee40908146102b657806338d07436146102d957600080fd5b80628cc262146102205780630569d388146102465780630700037d146102505780630f4ef8a614610270575b600080fd5b61023361022e3660046116dd565b61047e565b6040519081526020015b60405180910390f35b61024e6104fd565b005b61023361025e3660046116dd565b600e6020526000908152604090205481565b600354610283906001600160a01b031681565b6040516001600160a01b03909116815260200161023d565b600c54610233565b61023362093a8081565b610233600b5481565b6102c96102c43660046116f8565b61053e565b604051901515815260200161023d565b6102c96102e7366004611730565b61073b565b6102c9610932565b610283610302366004611760565b610947565b61024e610315366004611779565b610971565b600254610283906001600160a01b031681565b6102c961033b366004611760565b61098f565b6102c961034e3660046116dd565b610a64565b61023360095481565b61023361033e81565b6102c9610373366004611796565b610b2f565b6102336103863660046116dd565b6001600160a01b03166000908152600f602052604090205490565b600154610283906001600160a01b031681565b61023360065481565b610233610d27565b61024e610d3a565b6102336103db3660046116dd565b600d6020526000908152604090205481565b6102c9610d57565b610233600a5481565b6102c961040c366004611760565b610ddc565b6102c961041f366004611730565b610fbf565b61023360075481565b61023361119c565b601054610233565b61023360085481565b61023360055481565b61023360045481565b6102c9610466366004611760565b6111ed565b600054610283906001600160a01b031681565b6001600160a01b0381166000908152600e6020908152604080832054600d9092528220546104f791906104f190670de0b6b3a7640000906104eb906104cb906104c561119c565b9061121b565b6001600160a01b0388166000908152600f60205260409020545b9061122e565b9061123a565b90611246565b92915050565b6003546001600160a01b031633146105305760405162461bcd60e51b8152600401610527906117c2565b60405180910390fd5b61053c60106000611687565b565b60008261054961119c565b600855610554610d27565b6007556001600160a01b0381161561059b5761056f8161047e565b6001600160a01b0382166000908152600e6020908152604080832093909355600854600d909152919020555b600083116105eb5760405162461bcd60e51b815260206004820152601b60248201527f526577617264506f6f6c203a2043616e6e6f74207374616b65203000000000006044820152606401610527565b60005b60105481101561068d576010818154811061060b5761060b6117e7565b6000918252602090912001546040516356e4bb9760e11b81526001600160a01b038781166004830152602482018790529091169063adc9772e90604401600060405180830381600087803b15801561066257600080fd5b505af1158015610676573d6000803e3d6000fd5b50505050808061068590611813565b9150506105ee565b50600c5461069b9084611246565b600c556001600160a01b0384166000908152600f60205260409020546106c19084611246565b6001600160a01b038086166000908152600f60205260409020919091556001546106ee9116333086611252565b836001600160a01b03167f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d8460405161072991815260200190565b60405180910390a25060019392505050565b60003361074661119c565b600855610751610d27565b6007556001600160a01b038116156107985761076c8161047e565b6001600160a01b0382166000908152600e6020908152604080832093909355600854600d909152919020555b600084116107e85760405162461bcd60e51b815260206004820152601e60248201527f526577617264506f6f6c203a2043616e6e6f74207769746864726177203000006044820152606401610527565b60005b6010548110156108885760108181548110610808576108086117e7565b60009182526020909120015460405163f3fef3a360e01b8152336004820152602481018790526001600160a01b039091169063f3fef3a390604401600060405180830381600087803b15801561085d57600080fd5b505af1158015610871573d6000803e3d6000fd5b50505050808061088090611813565b9150506107eb565b50600c54610896908561121b565b600c55336000908152600f60205260409020546108b3908561121b565b336000818152600f60205260409020919091556001546108df916001600160a01b0390911690866112c3565b60405184815233907f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5906020015b60405180910390a2821561092857610926336001610b2f565b505b5060019392505050565b600061093f336001610b2f565b506001905090565b6010818154811061095757600080fd5b6000918252602090912001546001600160a01b0316905081565b336000908152600f602052604090205461098b9082610fbf565b5050565b6002546000906001600160a01b031633146109bc5760405162461bcd60e51b8152600401610527906117c2565b6009546109ca908390611246565b915060055442106109ea576109de826112f8565b50506000600955600190565b6000610a0e610a0762093a8060055461121b90919063ffffffff16565b429061121b565b9050600081600654610a20919061182c565b90506000610a34856104eb846103e861122e565b905061033e811015610a5357610a49856112f8565b6000600955610a59565b60098590555b506001949350505050565b6003546000906001600160a01b03163314610a915760405162461bcd60e51b8152600401610527906117c2565b6001600160a01b038216610ad95760405162461bcd60e51b815260206004820152600f60248201526e217265776172642073657474696e6760881b6044820152606401610527565b5060108054600180820183556000929092527f1b6847dc741a1b0cd08d278845f9d819d87b734759afb55fe2de5cb82a9ae6720180546001600160a01b0319166001600160a01b03939093169290921790915590565b600082610b3a61119c565b600855610b45610d27565b6007556001600160a01b03811615610b8c57610b608161047e565b6001600160a01b0382166000908152600e6020908152604080832093909355600854600d909152919020555b6000610b978561047e565b90508015610c7a576001600160a01b038086166000908152600e6020526040812081905554610bc8911686836112c3565b600254600480546040516371192b1760e01b8152918201526001600160a01b03878116602483015260448201849052909116906371192b1790606401600060405180830381600087803b158015610c1e57600080fd5b505af1158015610c32573d6000803e3d6000fd5b50505050846001600160a01b03167fe2403640ba68fed3a2f88b7557551d1993f84b99bb10ff833f0cf8db0c5e048682604051610c7191815260200190565b60405180910390a25b8315610a595760005b601054811015610d1b5760108181548110610ca057610ca06117e7565b600091825260209091200154604051630c00007b60e41b81526001600160a01b0388811660048301529091169063c00007b090602401600060405180830381600087803b158015610cf057600080fd5b505af1158015610d04573d6000803e3d6000fd5b505050508080610d1390611813565b915050610c83565b50506001949350505050565b6000610d354260055461141e565b905090565b336000908152600f602052604090205460019061098b908261073b565b6001546040516370a0823160e01b815233600482015260009182916001600160a01b03909116906370a0823190602401602060405180830381865afa158015610da4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dc8919061184b565b9050610dd381610ddc565b50600191505090565b600033610de761119c565b600855610df2610d27565b6007556001600160a01b03811615610e3957610e0d8161047e565b6001600160a01b0382166000908152600e6020908152604080832093909355600854600d909152919020555b60008311610e895760405162461bcd60e51b815260206004820152601b60248201527f526577617264506f6f6c203a2043616e6e6f74207374616b65203000000000006044820152606401610527565b60005b601054811015610f295760108181548110610ea957610ea96117e7565b6000918252602090912001546040516356e4bb9760e11b8152336004820152602481018690526001600160a01b039091169063adc9772e90604401600060405180830381600087803b158015610efe57600080fd5b505af1158015610f12573d6000803e3d6000fd5b505050508080610f2190611813565b915050610e8c565b50600c54610f379084611246565b600c55336000908152600f6020526040902054610f549084611246565b336000818152600f6020526040902091909155600154610f81916001600160a01b03909116903086611252565b60405183815233907f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d9060200160405180910390a250600192915050565b600033610fca61119c565b600855610fd5610d27565b6007556001600160a01b0381161561101c57610ff08161047e565b6001600160a01b0382166000908152600e6020908152604080832093909355600854600d909152919020555b60005b6010548110156110bc576010818154811061103c5761103c6117e7565b60009182526020909120015460405163f3fef3a360e01b8152336004820152602481018790526001600160a01b039091169063f3fef3a390604401600060405180830381600087803b15801561109157600080fd5b505af11580156110a5573d6000803e3d6000fd5b5050505080806110b490611813565b91505061101f565b50600c546110ca908561121b565b600c55336000908152600f60205260409020546110e7908561121b565b336000818152600f602052604090819020929092556002546004805493516305335c3960e21b8152908101939093526024830187905260448301919091526001600160a01b0316906314cd70e490606401600060405180830381600087803b15801561115257600080fd5b505af1158015611166573d6000803e3d6000fd5b50506040518681523392507f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5915060200161090d565b60006111a7600c5490565b6000036111b5575060085490565b610d356111e46111c4600c5490565b6104eb670de0b6b3a76400006104e56006546104e56007546104c5610d27565b60085490611246565b60008054611206906001600160a01b0316333085611252565b6009546112139083611246565b600955919050565b60006112278284611864565b9392505050565b6000611227828461182c565b6000611227828461187b565b6000611227828461189d565b6040516001600160a01b03808516602483015283166044820152606481018290526112bd9085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611434565b50505050565b6040516001600160a01b0383166024820152604481018290526112f390849063a9059cbb60e01b90606401611286565b505050565b600061130261119c565b60085561130d610d27565b6007556001600160a01b03811615611354576113288161047e565b6001600160a01b0382166000908152600e6020908152604080832093909355600854600d909152919020555b600b546113619083611246565b600b5560055442106113825761137a8262093a8061123a565b6006556113cc565b600554600090611392904261121b565b905060006113ab6006548361122e90919063ffffffff16565b90506113b78482611246565b93506113c68462093a8061123a565b60065550505b600a8290554260078190556113e49062093a80611246565b6005556040518281527fde88a922e0d3b88b24e9623efeb464919c6bf9f66857a65e2bfcf2ce87a9433d9060200160405180910390a15050565b600081831061142d5781611227565b5090919050565b6000611489826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166115069092919063ffffffff16565b8051909150156112f357808060200190518101906114a791906118b5565b6112f35760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610527565b6060611515848460008561151d565b949350505050565b60608247101561157e5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610527565b6001600160a01b0385163b6115d55760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610527565b600080866001600160a01b031685876040516115f191906118fe565b60006040518083038185875af1925050503d806000811461162e576040519150601f19603f3d011682016040523d82523d6000602084013e611633565b606091505b509150915061164382828661164e565b979650505050505050565b6060831561165d575081611227565b82511561166d5782518084602001fd5b8160405162461bcd60e51b8152600401610527919061191a565b50805460008255906000526020600020908101906116a591906116a8565b50565b5b808211156116bd57600081556001016116a9565b5090565b80356001600160a01b03811681146116d857600080fd5b919050565b6000602082840312156116ef57600080fd5b611227826116c1565b6000806040838503121561170b57600080fd5b611714836116c1565b946020939093013593505050565b80151581146116a557600080fd5b6000806040838503121561174357600080fd5b82359150602083013561175581611722565b809150509250929050565b60006020828403121561177257600080fd5b5035919050565b60006020828403121561178b57600080fd5b813561122781611722565b600080604083850312156117a957600080fd5b6117b2836116c1565b9150602083013561175581611722565b6020808252600b908201526a08585d5d1a1bdc9a5e995960aa1b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201611825576118256117fd565b5060010190565b6000816000190483118215151615611846576118466117fd565b500290565b60006020828403121561185d57600080fd5b5051919050565b600082821015611876576118766117fd565b500390565b60008261189857634e487b7160e01b600052601260045260246000fd5b500490565b600082198211156118b0576118b06117fd565b500190565b6000602082840312156118c757600080fd5b815161122781611722565b60005b838110156118ed5781810151838201526020016118d5565b838111156112bd5750506000910152565b600082516119108184602087016118d2565b9190910192915050565b60208152600082518060208401526119398160408501602087016118d2565b601f01601f1916919091016040019291505056fea26469706673582212206a8f053136d4204a89536cb8ee54b1c8d60488528c7c798b6b30531f9a6ce9b364736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061021b5760003560e01c806370a0823111610125578063c32e7202116100ad578063df136d651161007c578063df136d651461043d578063ebe2b12b14610446578063f10684541461044f578063f14faf6f14610458578063f7c618c11461046b57600080fd5b8063c32e720214610411578063c8f33c9114610424578063cd3daf9d1461042d578063d55a23f41461043557600080fd5b8063853828b6116100f4578063853828b6146103c55780638b876347146103cd5780638dcb4061146103ed578063901a7d53146103f5578063a694fc3a146103fe57600080fd5b806370a082311461037857806372f702f3146103a15780637b0a47ee146103b457806380faa57d146103bd57600080fd5b80633d18b912116101a8578063590a41f511610177578063590a41f51461032d5780635e43c47b1461034057806363d38c3b146103535780636c8bcee81461035c5780637050ccd91461036557600080fd5b80633d18b912146102ec57806340c35446146102f457806349f039a214610307578063570ca7351461031a57600080fd5b806318160ddd116101ef57806318160ddd1461029b5780631be05289146102a3578063262d3d6d146102ad5780632ee40908146102b657806338d07436146102d957600080fd5b80628cc262146102205780630569d388146102465780630700037d146102505780630f4ef8a614610270575b600080fd5b61023361022e3660046116dd565b61047e565b6040519081526020015b60405180910390f35b61024e6104fd565b005b61023361025e3660046116dd565b600e6020526000908152604090205481565b600354610283906001600160a01b031681565b6040516001600160a01b03909116815260200161023d565b600c54610233565b61023362093a8081565b610233600b5481565b6102c96102c43660046116f8565b61053e565b604051901515815260200161023d565b6102c96102e7366004611730565b61073b565b6102c9610932565b610283610302366004611760565b610947565b61024e610315366004611779565b610971565b600254610283906001600160a01b031681565b6102c961033b366004611760565b61098f565b6102c961034e3660046116dd565b610a64565b61023360095481565b61023361033e81565b6102c9610373366004611796565b610b2f565b6102336103863660046116dd565b6001600160a01b03166000908152600f602052604090205490565b600154610283906001600160a01b031681565b61023360065481565b610233610d27565b61024e610d3a565b6102336103db3660046116dd565b600d6020526000908152604090205481565b6102c9610d57565b610233600a5481565b6102c961040c366004611760565b610ddc565b6102c961041f366004611730565b610fbf565b61023360075481565b61023361119c565b601054610233565b61023360085481565b61023360055481565b61023360045481565b6102c9610466366004611760565b6111ed565b600054610283906001600160a01b031681565b6001600160a01b0381166000908152600e6020908152604080832054600d9092528220546104f791906104f190670de0b6b3a7640000906104eb906104cb906104c561119c565b9061121b565b6001600160a01b0388166000908152600f60205260409020545b9061122e565b9061123a565b90611246565b92915050565b6003546001600160a01b031633146105305760405162461bcd60e51b8152600401610527906117c2565b60405180910390fd5b61053c60106000611687565b565b60008261054961119c565b600855610554610d27565b6007556001600160a01b0381161561059b5761056f8161047e565b6001600160a01b0382166000908152600e6020908152604080832093909355600854600d909152919020555b600083116105eb5760405162461bcd60e51b815260206004820152601b60248201527f526577617264506f6f6c203a2043616e6e6f74207374616b65203000000000006044820152606401610527565b60005b60105481101561068d576010818154811061060b5761060b6117e7565b6000918252602090912001546040516356e4bb9760e11b81526001600160a01b038781166004830152602482018790529091169063adc9772e90604401600060405180830381600087803b15801561066257600080fd5b505af1158015610676573d6000803e3d6000fd5b50505050808061068590611813565b9150506105ee565b50600c5461069b9084611246565b600c556001600160a01b0384166000908152600f60205260409020546106c19084611246565b6001600160a01b038086166000908152600f60205260409020919091556001546106ee9116333086611252565b836001600160a01b03167f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d8460405161072991815260200190565b60405180910390a25060019392505050565b60003361074661119c565b600855610751610d27565b6007556001600160a01b038116156107985761076c8161047e565b6001600160a01b0382166000908152600e6020908152604080832093909355600854600d909152919020555b600084116107e85760405162461bcd60e51b815260206004820152601e60248201527f526577617264506f6f6c203a2043616e6e6f74207769746864726177203000006044820152606401610527565b60005b6010548110156108885760108181548110610808576108086117e7565b60009182526020909120015460405163f3fef3a360e01b8152336004820152602481018790526001600160a01b039091169063f3fef3a390604401600060405180830381600087803b15801561085d57600080fd5b505af1158015610871573d6000803e3d6000fd5b50505050808061088090611813565b9150506107eb565b50600c54610896908561121b565b600c55336000908152600f60205260409020546108b3908561121b565b336000818152600f60205260409020919091556001546108df916001600160a01b0390911690866112c3565b60405184815233907f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5906020015b60405180910390a2821561092857610926336001610b2f565b505b5060019392505050565b600061093f336001610b2f565b506001905090565b6010818154811061095757600080fd5b6000918252602090912001546001600160a01b0316905081565b336000908152600f602052604090205461098b9082610fbf565b5050565b6002546000906001600160a01b031633146109bc5760405162461bcd60e51b8152600401610527906117c2565b6009546109ca908390611246565b915060055442106109ea576109de826112f8565b50506000600955600190565b6000610a0e610a0762093a8060055461121b90919063ffffffff16565b429061121b565b9050600081600654610a20919061182c565b90506000610a34856104eb846103e861122e565b905061033e811015610a5357610a49856112f8565b6000600955610a59565b60098590555b506001949350505050565b6003546000906001600160a01b03163314610a915760405162461bcd60e51b8152600401610527906117c2565b6001600160a01b038216610ad95760405162461bcd60e51b815260206004820152600f60248201526e217265776172642073657474696e6760881b6044820152606401610527565b5060108054600180820183556000929092527f1b6847dc741a1b0cd08d278845f9d819d87b734759afb55fe2de5cb82a9ae6720180546001600160a01b0319166001600160a01b03939093169290921790915590565b600082610b3a61119c565b600855610b45610d27565b6007556001600160a01b03811615610b8c57610b608161047e565b6001600160a01b0382166000908152600e6020908152604080832093909355600854600d909152919020555b6000610b978561047e565b90508015610c7a576001600160a01b038086166000908152600e6020526040812081905554610bc8911686836112c3565b600254600480546040516371192b1760e01b8152918201526001600160a01b03878116602483015260448201849052909116906371192b1790606401600060405180830381600087803b158015610c1e57600080fd5b505af1158015610c32573d6000803e3d6000fd5b50505050846001600160a01b03167fe2403640ba68fed3a2f88b7557551d1993f84b99bb10ff833f0cf8db0c5e048682604051610c7191815260200190565b60405180910390a25b8315610a595760005b601054811015610d1b5760108181548110610ca057610ca06117e7565b600091825260209091200154604051630c00007b60e41b81526001600160a01b0388811660048301529091169063c00007b090602401600060405180830381600087803b158015610cf057600080fd5b505af1158015610d04573d6000803e3d6000fd5b505050508080610d1390611813565b915050610c83565b50506001949350505050565b6000610d354260055461141e565b905090565b336000908152600f602052604090205460019061098b908261073b565b6001546040516370a0823160e01b815233600482015260009182916001600160a01b03909116906370a0823190602401602060405180830381865afa158015610da4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dc8919061184b565b9050610dd381610ddc565b50600191505090565b600033610de761119c565b600855610df2610d27565b6007556001600160a01b03811615610e3957610e0d8161047e565b6001600160a01b0382166000908152600e6020908152604080832093909355600854600d909152919020555b60008311610e895760405162461bcd60e51b815260206004820152601b60248201527f526577617264506f6f6c203a2043616e6e6f74207374616b65203000000000006044820152606401610527565b60005b601054811015610f295760108181548110610ea957610ea96117e7565b6000918252602090912001546040516356e4bb9760e11b8152336004820152602481018690526001600160a01b039091169063adc9772e90604401600060405180830381600087803b158015610efe57600080fd5b505af1158015610f12573d6000803e3d6000fd5b505050508080610f2190611813565b915050610e8c565b50600c54610f379084611246565b600c55336000908152600f6020526040902054610f549084611246565b336000818152600f6020526040902091909155600154610f81916001600160a01b03909116903086611252565b60405183815233907f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d9060200160405180910390a250600192915050565b600033610fca61119c565b600855610fd5610d27565b6007556001600160a01b0381161561101c57610ff08161047e565b6001600160a01b0382166000908152600e6020908152604080832093909355600854600d909152919020555b60005b6010548110156110bc576010818154811061103c5761103c6117e7565b60009182526020909120015460405163f3fef3a360e01b8152336004820152602481018790526001600160a01b039091169063f3fef3a390604401600060405180830381600087803b15801561109157600080fd5b505af11580156110a5573d6000803e3d6000fd5b5050505080806110b490611813565b91505061101f565b50600c546110ca908561121b565b600c55336000908152600f60205260409020546110e7908561121b565b336000818152600f602052604090819020929092556002546004805493516305335c3960e21b8152908101939093526024830187905260448301919091526001600160a01b0316906314cd70e490606401600060405180830381600087803b15801561115257600080fd5b505af1158015611166573d6000803e3d6000fd5b50506040518681523392507f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5915060200161090d565b60006111a7600c5490565b6000036111b5575060085490565b610d356111e46111c4600c5490565b6104eb670de0b6b3a76400006104e56006546104e56007546104c5610d27565b60085490611246565b60008054611206906001600160a01b0316333085611252565b6009546112139083611246565b600955919050565b60006112278284611864565b9392505050565b6000611227828461182c565b6000611227828461187b565b6000611227828461189d565b6040516001600160a01b03808516602483015283166044820152606481018290526112bd9085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611434565b50505050565b6040516001600160a01b0383166024820152604481018290526112f390849063a9059cbb60e01b90606401611286565b505050565b600061130261119c565b60085561130d610d27565b6007556001600160a01b03811615611354576113288161047e565b6001600160a01b0382166000908152600e6020908152604080832093909355600854600d909152919020555b600b546113619083611246565b600b5560055442106113825761137a8262093a8061123a565b6006556113cc565b600554600090611392904261121b565b905060006113ab6006548361122e90919063ffffffff16565b90506113b78482611246565b93506113c68462093a8061123a565b60065550505b600a8290554260078190556113e49062093a80611246565b6005556040518281527fde88a922e0d3b88b24e9623efeb464919c6bf9f66857a65e2bfcf2ce87a9433d9060200160405180910390a15050565b600081831061142d5781611227565b5090919050565b6000611489826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166115069092919063ffffffff16565b8051909150156112f357808060200190518101906114a791906118b5565b6112f35760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610527565b6060611515848460008561151d565b949350505050565b60608247101561157e5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610527565b6001600160a01b0385163b6115d55760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610527565b600080866001600160a01b031685876040516115f191906118fe565b60006040518083038185875af1925050503d806000811461162e576040519150601f19603f3d011682016040523d82523d6000602084013e611633565b606091505b509150915061164382828661164e565b979650505050505050565b6060831561165d575081611227565b82511561166d5782518084602001fd5b8160405162461bcd60e51b8152600401610527919061191a565b50805460008255906000526020600020908101906116a591906116a8565b50565b5b808211156116bd57600081556001016116a9565b5090565b80356001600160a01b03811681146116d857600080fd5b919050565b6000602082840312156116ef57600080fd5b611227826116c1565b6000806040838503121561170b57600080fd5b611714836116c1565b946020939093013593505050565b80151581146116a557600080fd5b6000806040838503121561174357600080fd5b82359150602083013561175581611722565b809150509250929050565b60006020828403121561177257600080fd5b5035919050565b60006020828403121561178b57600080fd5b813561122781611722565b600080604083850312156117a957600080fd5b6117b2836116c1565b9150602083013561175581611722565b6020808252600b908201526a08585d5d1a1bdc9a5e995960aa1b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201611825576118256117fd565b5060010190565b6000816000190483118215151615611846576118466117fd565b500290565b60006020828403121561185d57600080fd5b5051919050565b600082821015611876576118766117fd565b500390565b60008261189857634e487b7160e01b600052601260045260246000fd5b500490565b600082198211156118b0576118b06117fd565b500190565b6000602082840312156118c757600080fd5b815161122781611722565b60005b838110156118ed5781810151838201526020016118d5565b838111156112bd5750506000910152565b600082516119108184602087016118d2565b9190910192915050565b60208152600082518060208401526119398160408501602087016118d2565b601f01601f1916919091016040019291505056fea26469706673582212206a8f053136d4204a89536cb8ee54b1c8d60488528c7c798b6b30531f9a6ce9b364736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2960,
        "contract": "contracts/BaseRewardPool.sol:BaseRewardPool",
        "label": "rewardToken",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IERC20)770"
      },
      {
        "astId": 2963,
        "contract": "contracts/BaseRewardPool.sol:BaseRewardPool",
        "label": "stakingToken",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IERC20)770"
      },
      {
        "astId": 2968,
        "contract": "contracts/BaseRewardPool.sol:BaseRewardPool",
        "label": "operator",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 2970,
        "contract": "contracts/BaseRewardPool.sol:BaseRewardPool",
        "label": "rewardManager",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 2972,
        "contract": "contracts/BaseRewardPool.sol:BaseRewardPool",
        "label": "pid",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 2975,
        "contract": "contracts/BaseRewardPool.sol:BaseRewardPool",
        "label": "periodFinish",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 2978,
        "contract": "contracts/BaseRewardPool.sol:BaseRewardPool",
        "label": "rewardRate",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 2980,
        "contract": "contracts/BaseRewardPool.sol:BaseRewardPool",
        "label": "lastUpdateTime",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 2982,
        "contract": "contracts/BaseRewardPool.sol:BaseRewardPool",
        "label": "rewardPerTokenStored",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 2985,
        "contract": "contracts/BaseRewardPool.sol:BaseRewardPool",
        "label": "queuedRewards",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 2988,
        "contract": "contracts/BaseRewardPool.sol:BaseRewardPool",
        "label": "currentRewards",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 2991,
        "contract": "contracts/BaseRewardPool.sol:BaseRewardPool",
        "label": "historicalRewards",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 2996,
        "contract": "contracts/BaseRewardPool.sol:BaseRewardPool",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 3000,
        "contract": "contracts/BaseRewardPool.sol:BaseRewardPool",
        "label": "userRewardPerTokenPaid",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3004,
        "contract": "contracts/BaseRewardPool.sol:BaseRewardPool",
        "label": "rewards",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3008,
        "contract": "contracts/BaseRewardPool.sol:BaseRewardPool",
        "label": "_balances",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3011,
        "contract": "contracts/BaseRewardPool.sol:BaseRewardPool",
        "label": "extraRewards",
        "offset": 0,
        "slot": "16",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)770": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}