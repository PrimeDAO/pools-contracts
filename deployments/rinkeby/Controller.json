{
  "address": "0x099035Ca0D8FC878B7a5f38290133572bBe87F35",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_staker",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_minter",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "poolid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "poolid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "FEE_DENOMINATOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MaxFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lptoken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_gauge",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_stashVersion",
          "type": "uint256"
        }
      ],
      "name": "addPool",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bal",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_gauge",
          "type": "address"
        }
      ],
      "name": "claimRewards",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_stake",
          "type": "bool"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_stake",
          "type": "bool"
        }
      ],
      "name": "depositAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "distributionAddressId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "earmarkFees",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "earmarkIncentive",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "earmarkRewards",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeDistro",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "gaugeMap",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isShutdown",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockFees",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockIncentive",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockRewards",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "platformFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "poolInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "lptoken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "gauge",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "balRewards",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "stash",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "shutdown",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registry",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardArbitrator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "rewardClaimed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardFactory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_arb",
          "type": "address"
        }
      ],
      "name": "setArbitrator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rfactory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_sfactory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tfactory",
          "type": "address"
        }
      ],
      "name": "setFactories",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setFeeInfo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeM",
          "type": "address"
        }
      ],
      "name": "setFeeManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_lockFees",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_stakerFees",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_callerFees",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_platform",
          "type": "uint256"
        }
      ],
      "name": "setFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "setGaugeRedirect",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "setOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_poolM",
          "type": "address"
        }
      ],
      "name": "setPoolManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewards",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_stakerRewards",
          "type": "address"
        }
      ],
      "name": "setRewardContracts",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "name": "setTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_voteDelegate",
          "type": "address"
        }
      ],
      "name": "setVoteDelegate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "shutdownPool",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "shutdownSystem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "staker",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakerIncentive",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakerRewards",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stashFactory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenFactory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_voteId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_votingAddress",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_support",
          "type": "bool"
        }
      ],
      "name": "vote",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "voteDelegate",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_gauge",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_weight",
          "type": "uint256[]"
        }
      ],
      "name": "voteGaugeWeight",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "voteOwnership",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "voteParameter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "withdrawAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "withdrawTo",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x6c2fe926e845b45b59658582f5a0f2662ab4d79c345198f0ca3ad42b00c4b571",
  "receipt": {
    "to": null,
    "from": "0xEFc3a819695932394D89b8AF6f49e0D89EDf9A40",
    "contractAddress": "0x099035Ca0D8FC878B7a5f38290133572bBe87F35",
    "transactionIndex": 46,
    "gasUsed": "3128287",
    "logsBloom": "0x
    "blockHash": "0x97a7b000023bb07dd009ee3632fee3e81df627ea51be98e267355303423db926",
    "transactionHash": "0x6c2fe926e845b45b59658582f5a0f2662ab4d79c345198f0ca3ad42b00c4b571",
    "logs": [],
    "blockNumber": 10645438,
    "cumulativeGasUsed": "21129263",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x9D2Bfc794F8e5f8Dc911499049aeCf46E74c58A7",
    "0xEFc3a819695932394D89b8AF6f49e0D89EDf9A40"
  ],
  "solcInputHash": "bd75603ac8a277dbfaeddf88f266bad8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FEE_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MaxFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lptoken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_stashVersion\",\"type\":\"uint256\"}],\"name\":\"addPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"}],\"name\":\"claimRewards\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_stake\",\"type\":\"bool\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_stake\",\"type\":\"bool\"}],\"name\":\"depositAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributionAddressId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"earmarkFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"earmarkIncentive\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"earmarkRewards\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeDistro\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"gaugeMap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isShutdown\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockFees\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockIncentive\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockRewards\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"platformFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"lptoken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"balRewards\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stash\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"shutdown\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardArbitrator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"rewardClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_arb\",\"type\":\"address\"}],\"name\":\"setArbitrator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rfactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sfactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tfactory\",\"type\":\"address\"}],\"name\":\"setFactories\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setFeeInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeM\",\"type\":\"address\"}],\"name\":\"setFeeManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lockFees\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakerFees\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_callerFees\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_platform\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"setGaugeRedirect\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolM\",\"type\":\"address\"}],\"name\":\"setPoolManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewards\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakerRewards\",\"type\":\"address\"}],\"name\":\"setRewardContracts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_voteDelegate\",\"type\":\"address\"}],\"name\":\"setVoteDelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"shutdownPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shutdownSystem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"staker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakerIncentive\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakerRewards\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stashFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_voteId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_votingAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_support\",\"type\":\"bool\"}],\"name\":\"vote\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"voteDelegate\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_gauge\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_weight\",\"type\":\"uint256[]\"}],\"name\":\"voteGaugeWeight\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"voteOwnership\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"voteParameter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"withdrawAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdrawTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"poolLength()\":{\"notice\":\"END SETTER SECTION ///\"},\"setOwner(address)\":{\"notice\":\"SETTER SECTION ///\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Controller.sol\":\"Controller\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"},\"contracts/Controller.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./utils/Interfaces.sol\\\";\\nimport \\\"./utils/MathUtil.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\ncontract Controller {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n    using Address for address;\\n\\n    address public constant bal =\\n        address(0xba100000625a3754423978a60c9317c58a424e3D);\\n    address public constant registry =\\n        address(0x0000000022D53366457F9d5E68Ec105046FC4383); //Note: Did not change this\\n    uint256 public constant distributionAddressId = 4;\\n    address public constant voteOwnership =\\n        address(0xE478de485ad2fe566d49342Cbd03E49ed7DB3356); //Note: Did not change this\\n    address public constant voteParameter =\\n        address(0xBCfF8B0b9419b9A88c44546519b1e909cF330399); //Note: Did not change this\\n\\n    uint256 public lockIncentive = 1000; //incentive to bal stakers\\n    uint256 public stakerIncentive = 450; //incentive to native token stakers\\n    uint256 public earmarkIncentive = 50; //incentive to users who spend gas to make calls\\n    uint256 public platformFee = 0; //possible fee to build treasury\\n    uint256 public constant MaxFees = 2000;\\n    uint256 public constant FEE_DENOMINATOR = 10000;\\n\\n    address public owner;\\n    address public feeManager;\\n    address public poolManager;\\n    address public immutable staker;\\n    address public immutable minter;\\n    address public rewardFactory;\\n    address public stashFactory;\\n    address public tokenFactory;\\n    address public rewardArbitrator;\\n    address public voteDelegate;\\n    address public treasury;\\n    address public stakerRewards; //bal rewards\\n    address public lockRewards; //balBal rewards(bal)\\n    address public lockFees; //cvxCrv vecrv fees -> What is Bal equivalent?\\n    address public feeDistro;\\n    address public feeToken;\\n\\n    bool public isShutdown;\\n\\n    struct PoolInfo {\\n        address lptoken;\\n        address token;\\n        address gauge;\\n        address balRewards;\\n        address stash;\\n        bool shutdown;\\n    }\\n\\n    //index(pid) -> pool\\n    PoolInfo[] public poolInfo;\\n    mapping(address => bool) public gaugeMap;\\n\\n    event Deposited(\\n        address indexed user,\\n        uint256 indexed poolid,\\n        uint256 amount\\n    );\\n    event Withdrawn(\\n        address indexed user,\\n        uint256 indexed poolid,\\n        uint256 amount\\n    );\\n\\n    constructor(address _staker, address _minter) public {\\n        isShutdown = false;\\n        staker = _staker;\\n        owner = msg.sender;\\n        voteDelegate = msg.sender;\\n        feeManager = msg.sender;\\n        poolManager = msg.sender;\\n        feeDistro = address(0);\\n        feeToken = address(0);\\n        treasury = address(0);\\n        minter = _minter;\\n    }\\n\\n    /// SETTER SECTION ///\\n\\n    function setOwner(address _owner) external {\\n        require(msg.sender == owner, \\\"!auth\\\");\\n        owner = _owner;\\n    }\\n\\n    function setFeeManager(address _feeM) external {\\n        require(msg.sender == feeManager, \\\"!auth\\\");\\n        feeManager = _feeM;\\n    }\\n\\n    function setPoolManager(address _poolM) external {\\n        require(msg.sender == poolManager, \\\"!auth\\\");\\n        poolManager = _poolM;\\n    }\\n\\n    function setFactories(\\n        address _rfactory,\\n        address _sfactory,\\n        address _tfactory\\n    ) external {\\n        require(msg.sender == owner, \\\"!auth\\\");\\n\\n        //reward factory only allow this to be called once even if owner\\n        //removes ability to inject malicious staking contracts\\n        //token factory can also be immutable\\n        if (rewardFactory == address(0)) {\\n            rewardFactory = _rfactory;\\n            tokenFactory = _tfactory;\\n        }\\n\\n        //stash factory should be considered more safe to change\\n        //updating may be required to handle new types of gauges\\n        stashFactory = _sfactory;\\n    }\\n\\n    function setArbitrator(address _arb) external {\\n        require(msg.sender == owner, \\\"!auth\\\");\\n        rewardArbitrator = _arb;\\n    }\\n\\n    function setVoteDelegate(address _voteDelegate) external {\\n        require(msg.sender == voteDelegate, \\\"!auth\\\");\\n        voteDelegate = _voteDelegate;\\n    }\\n\\n    function setRewardContracts(address _rewards, address _stakerRewards)\\n        external\\n    {\\n        require(msg.sender == owner, \\\"!auth\\\");\\n\\n        //reward contracts are immutable or else the owner\\n        //has a means to redeploy and mint bal via rewardClaimed()\\n        if (lockRewards == address(0)) {\\n            lockRewards = _rewards;\\n            stakerRewards = _stakerRewards;\\n        }\\n    }\\n\\n    // Set reward token and claim contract, get from Curve's registry\\n    function setFeeInfo() external {\\n        require(msg.sender == feeManager, \\\"!auth\\\");\\n\\n        feeDistro = IRegistry(registry).get_address(distributionAddressId);\\n        address _feeToken = IFeeDistro(feeDistro).token();\\n        if (feeToken != _feeToken) {\\n            //create a new reward contract for the new token\\n            lockFees = IRewardFactory(rewardFactory).CreateTokenRewards(\\n                _feeToken,\\n                lockRewards,\\n                address(this)\\n            );\\n            feeToken = _feeToken;\\n        }\\n    }\\n\\n    function setFees(\\n        uint256 _lockFees,\\n        uint256 _stakerFees,\\n        uint256 _callerFees,\\n        uint256 _platform\\n    ) external {\\n        require(msg.sender == feeManager, \\\"!auth\\\");\\n\\n        uint256 total = _lockFees.add(_stakerFees).add(_callerFees).add(\\n            _platform\\n        );\\n        require(total <= MaxFees, \\\">MaxFees\\\");\\n\\n        //values must be within certain ranges\\n        if (\\n            _lockFees >= 1000 &&\\n            _lockFees <= 1500 &&\\n            _stakerFees >= 300 &&\\n            _stakerFees <= 600 &&\\n            _callerFees >= 10 &&\\n            _callerFees <= 100 &&\\n            _platform <= 200\\n        ) {\\n            lockIncentive = _lockFees;\\n            stakerIncentive = _stakerFees;\\n            earmarkIncentive = _callerFees;\\n            platformFee = _platform;\\n        }\\n    }\\n\\n    function setTreasury(address _treasury) external {\\n        require(msg.sender == feeManager, \\\"!auth\\\");\\n        treasury = _treasury;\\n    }\\n\\n    /// END SETTER SECTION ///\\n\\n    function poolLength() external view returns (uint256) {\\n        return poolInfo.length;\\n    }\\n\\n    //create a new pool\\n    function addPool(\\n        address _lptoken,\\n        address _gauge,\\n        uint256 _stashVersion\\n    ) external returns (bool) {\\n        require(msg.sender == poolManager && !isShutdown, \\\"!add\\\");\\n        require(_gauge != address(0) && _lptoken != address(0), \\\"!param\\\");\\n\\n        //the next pool's pid\\n        uint256 pid = poolInfo.length;\\n\\n        //create a tokenized deposit\\n        address token = ITokenFactory(tokenFactory).CreateDepositToken(\\n            _lptoken\\n        );\\n        //create a reward contract for bal rewards\\n        address newRewardPool = IRewardFactory(rewardFactory).CreateBalRewards(\\n            pid,\\n            token\\n        );\\n        //create a stash to handle extra incentives\\n        address stash = IStashFactory(stashFactory).CreateStash(\\n            pid,\\n            _gauge,\\n            staker,\\n            _stashVersion\\n        );\\n\\n        //add the new pool\\n        poolInfo.push(\\n            PoolInfo({\\n                lptoken: _lptoken,\\n                token: token,\\n                gauge: _gauge,\\n                balRewards: newRewardPool,\\n                stash: stash,\\n                shutdown: false\\n            })\\n        );\\n        gaugeMap[_gauge] = true;\\n        //give stashes access to rewardfactory and voteproxy\\n        //   voteproxy so it can grab the incentive tokens off the contract after claiming rewards\\n        //   reward factory so that stashes can make new extra reward contracts if a new incentive is added to the gauge\\n        if (stash != address(0)) {\\n            poolInfo[pid].stash = stash;\\n            IStaker(staker).setStashAccess(stash, true);\\n            IRewardFactory(rewardFactory).setAccess(stash, true);\\n        }\\n        return true;\\n    }\\n\\n    //shutdown pool\\n    function shutdownPool(uint256 _pid) external returns (bool) {\\n        require(msg.sender == poolManager, \\\"!auth\\\");\\n        PoolInfo storage pool = poolInfo[_pid];\\n\\n        //withdraw from gauge\\n        try IStaker(staker).withdrawAll(pool.lptoken, pool.gauge) {} catch {}\\n\\n        pool.shutdown = true;\\n        gaugeMap[pool.gauge] = false;\\n        return true;\\n    }\\n\\n    //shutdown this contract.\\n    //  unstake and pull all lp tokens to this address\\n    //  only allow withdrawals\\n    function shutdownSystem() external {\\n        require(msg.sender == owner, \\\"!auth\\\");\\n        isShutdown = true;\\n\\n        for (uint256 i = 0; i < poolInfo.length; i++) {\\n            PoolInfo storage pool = poolInfo[i];\\n            if (pool.shutdown) continue;\\n\\n            address token = pool.lptoken;\\n            address gauge = pool.gauge;\\n\\n            //withdraw from gauge\\n            try IStaker(staker).withdrawAll(token, gauge) {\\n                pool.shutdown = true;\\n            } catch {}\\n        }\\n    }\\n\\n    //deposit lp tokens and stake\\n    function deposit(\\n        uint256 _pid,\\n        uint256 _amount,\\n        bool _stake\\n    ) public returns (bool) {\\n        require(!isShutdown, \\\"shutdown\\\");\\n        PoolInfo storage pool = poolInfo[_pid];\\n        require(pool.shutdown == false, \\\"pool is closed\\\");\\n\\n        //send to proxy to stake\\n        address lptoken = pool.lptoken;\\n        IERC20(lptoken).safeTransferFrom(msg.sender, staker, _amount);\\n\\n        //stake\\n        address gauge = pool.gauge;\\n        require(gauge != address(0), \\\"!gauge setting\\\");\\n        IStaker(staker).deposit(lptoken, gauge);\\n\\n        //some gauges claim rewards when depositing, stash them in a seperate contract until next claim\\n        address stash = pool.stash;\\n        if (stash != address(0)) {\\n            IStash(stash).stashRewards();\\n        }\\n\\n        address token = pool.token;\\n        if (_stake) {\\n            //mint here and send to rewards on user behalf\\n            ITokenMinter(token).mint(address(this), _amount);\\n            address rewardContract = pool.balRewards;\\n            IERC20(token).safeApprove(rewardContract, 0);\\n            IERC20(token).safeApprove(rewardContract, _amount);\\n            IRewards(rewardContract).stakeFor(msg.sender, _amount);\\n        } else {\\n            //add user balance directly\\n            ITokenMinter(token).mint(msg.sender, _amount);\\n        }\\n\\n        emit Deposited(msg.sender, _pid, _amount);\\n        return true;\\n    }\\n\\n    //deposit all lp tokens and stake\\n    function depositAll(uint256 _pid, bool _stake) external returns (bool) {\\n        address lptoken = poolInfo[_pid].lptoken;\\n        uint256 balance = IERC20(lptoken).balanceOf(msg.sender);\\n        deposit(_pid, balance, _stake);\\n        return true;\\n    }\\n\\n    //withdraw lp tokens\\n    function _withdraw(\\n        uint256 _pid,\\n        uint256 _amount,\\n        address _from,\\n        address _to\\n    ) internal {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        address lptoken = pool.lptoken;\\n        address gauge = pool.gauge;\\n\\n        //remove lp balance\\n        address token = pool.token;\\n        ITokenMinter(token).burn(_from, _amount);\\n\\n        //pull from gauge if not shutdown\\n        // if shutdown tokens will be in this contract\\n        if (!pool.shutdown) {\\n            IStaker(staker).withdraw(lptoken, gauge, _amount);\\n        }\\n\\n        //some gauges claim rewards when withdrawing, stash them in a seperate contract until next claim\\n        //do not call if shutdown since stashes wont have access\\n        address stash = pool.stash;\\n        if (stash != address(0) && !isShutdown && !pool.shutdown) {\\n            IStash(stash).stashRewards();\\n        }\\n\\n        //return lp tokens\\n        IERC20(lptoken).safeTransfer(_to, _amount);\\n\\n        emit Withdrawn(_to, _pid, _amount);\\n    }\\n\\n    //withdraw lp tokens\\n    function withdraw(uint256 _pid, uint256 _amount) public returns (bool) {\\n        _withdraw(_pid, _amount, msg.sender, msg.sender);\\n        return true;\\n    }\\n\\n    //withdraw all lp tokens\\n    function withdrawAll(uint256 _pid) public returns (bool) {\\n        address token = poolInfo[_pid].token;\\n        uint256 userBal = IERC20(token).balanceOf(msg.sender);\\n        withdraw(_pid, userBal);\\n        return true;\\n    }\\n\\n    //allow reward contracts to send here and withdraw to user\\n    function withdrawTo(\\n        uint256 _pid,\\n        uint256 _amount,\\n        address _to\\n    ) external returns (bool) {\\n        address rewardContract = poolInfo[_pid].balRewards;\\n        require(msg.sender == rewardContract, \\\"!auth\\\");\\n\\n        _withdraw(_pid, _amount, msg.sender, _to);\\n        return true;\\n    }\\n\\n    //delegate address votes on dao\\n    function vote(\\n        uint256 _voteId,\\n        address _votingAddress,\\n        bool _support\\n    ) external returns (bool) {\\n        require(msg.sender == voteDelegate, \\\"!auth\\\");\\n        require(\\n            _votingAddress == voteOwnership || _votingAddress == voteParameter,\\n            \\\"!voteAddr\\\"\\n        );\\n\\n        IStaker(staker).vote(_voteId, _votingAddress, _support);\\n        return true;\\n    }\\n\\n    function voteGaugeWeight(\\n        address[] calldata _gauge,\\n        uint256[] calldata _weight\\n    ) external returns (bool) {\\n        require(msg.sender == voteDelegate, \\\"!auth\\\");\\n\\n        for (uint256 i = 0; i < _gauge.length; i++) {\\n            IStaker(staker).voteGaugeWeight(_gauge[i], _weight[i]);\\n        }\\n        return true;\\n    }\\n\\n    function claimRewards(uint256 _pid, address _gauge)\\n        external\\n        returns (bool)\\n    {\\n        address stash = poolInfo[_pid].stash;\\n        require(msg.sender == stash, \\\"!auth\\\");\\n\\n        IStaker(staker).claimRewards(_gauge);\\n        return true;\\n    }\\n\\n    function setGaugeRedirect(uint256 _pid) external returns (bool) {\\n        address stash = poolInfo[_pid].stash;\\n        require(msg.sender == stash, \\\"!auth\\\");\\n        address gauge = poolInfo[_pid].gauge;\\n        bytes memory data = abi.encodeWithSelector(\\n            bytes4(keccak256(\\\"set_rewards_receiver(address)\\\")),\\n            stash\\n        );\\n        IStaker(staker).execute(gauge, uint256(0), data);\\n        return true;\\n    }\\n\\n    //claim bal and extra rewards and disperse to reward contracts\\n    function _earmarkRewards(uint256 _pid) internal {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        require(pool.shutdown == false, \\\"pool is closed\\\");\\n\\n        address gauge = pool.gauge;\\n\\n        //claim bal\\n        IStaker(staker).claimCrv(gauge);\\n\\n        //check if there are extra rewards\\n        address stash = pool.stash;\\n        if (stash != address(0)) {\\n            //claim extra rewards\\n            IStash(stash).claimRewards();\\n            //process extra rewards\\n            IStash(stash).processStash();\\n        }\\n\\n        //bal balance\\n        uint256 balBal = IERC20(bal).balanceOf(address(this));\\n\\n        if (balBal > 0) {\\n            uint256 _lockIncentive = balBal.mul(lockIncentive).div(\\n                FEE_DENOMINATOR\\n            );\\n            uint256 _stakerIncentive = balBal.mul(stakerIncentive).div(\\n                FEE_DENOMINATOR\\n            );\\n            uint256 _callIncentive = balBal.mul(earmarkIncentive).div(\\n                FEE_DENOMINATOR\\n            );\\n\\n            //send treasury\\n            if (\\n                treasury != address(0) &&\\n                treasury != address(this) &&\\n                platformFee > 0\\n            ) {\\n                //only subtract after address condition check\\n                uint256 _platform = balBal.mul(platformFee).div(\\n                    FEE_DENOMINATOR\\n                );\\n                balBal = balBal.sub(_platform);\\n                IERC20(bal).safeTransfer(treasury, _platform);\\n            }\\n\\n            //remove incentives from balance\\n            balBal = balBal.sub(_lockIncentive).sub(_callIncentive).sub(\\n                _stakerIncentive\\n            );\\n\\n            //send incentives for calling\\n            IERC20(bal).safeTransfer(msg.sender, _callIncentive);\\n\\n            //send bal to lp provider reward contract\\n            address rewardContract = pool.balRewards;\\n            IERC20(bal).safeTransfer(rewardContract, balBal);\\n            IRewards(rewardContract).queueNewRewards(balBal);\\n\\n            //send lockers' share of bal to reward contract\\n            IERC20(bal).safeTransfer(lockRewards, _lockIncentive);\\n            IRewards(lockRewards).queueNewRewards(_lockIncentive);\\n\\n            //send stakers's share of bal to reward contract\\n            IERC20(bal).safeTransfer(stakerRewards, _stakerIncentive);\\n            IRewards(stakerRewards).queueNewRewards(_stakerIncentive);\\n        }\\n    }\\n\\n    function earmarkRewards(uint256 _pid) external returns (bool) {\\n        require(!isShutdown, \\\"shutdown\\\");\\n        _earmarkRewards(_pid);\\n        return true;\\n    }\\n\\n    //claim fees from curve distro contract, put in lockers' reward contract\\n    function earmarkFees() external returns (bool) {\\n        //claim fee rewards\\n        IStaker(staker).claimFees(feeDistro, feeToken);\\n        //send fee rewards to reward contract\\n        uint256 _balance = IERC20(feeToken).balanceOf(address(this));\\n        IERC20(feeToken).safeTransfer(lockFees, _balance);\\n        IRewards(lockFees).queueNewRewards(_balance);\\n        return true;\\n    }\\n\\n    //callback from reward contract when crv is received.\\n    function rewardClaimed(\\n        uint256 _pid,\\n        address _address,\\n        uint256 _amount\\n    ) external returns (bool) {\\n        address rewardContract = poolInfo[_pid].balRewards;\\n        require(\\n            msg.sender == rewardContract || msg.sender == lockRewards,\\n            \\\"!auth\\\"\\n        );\\n\\n        //mint reward tokens\\n        ITokenMinter(minter).mint(_address, _amount);\\n\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0xb1118887d9411573368ca0cd1fbed6a312b061988c4f7edeb711dcdf4585bf54\",\"license\":\"MIT\"},\"contracts/utils/Interfaces.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\ninterface ICurveGauge {\\n    function deposit(uint256) external;\\n\\n    function balanceOf(address) external view returns (uint256);\\n\\n    function withdraw(uint256) external;\\n\\n    function claim_rewards() external;\\n\\n    function reward_tokens(uint256) external view returns (address); //v2\\n\\n    function rewarded_token() external view returns (address); //v1\\n\\n    function lp_token() external view returns (address);\\n}\\n\\ninterface ICurveVoteEscrow {\\n    function create_lock(uint256, uint256) external;\\n\\n    function increase_amount(uint256) external;\\n\\n    function increase_unlock_time(uint256) external;\\n\\n    function withdraw() external;\\n\\n    function smart_wallet_checker() external view returns (address);\\n}\\n\\ninterface IWalletChecker {\\n    function check(address) external view returns (bool);\\n}\\n\\ninterface IVoting {\\n    function vote(\\n        uint256,\\n        bool,\\n        bool\\n    ) external; //voteId, support, executeIfDecided\\n\\n    function getVote(uint256)\\n        external\\n        view\\n        returns (\\n            bool,\\n            bool,\\n            uint64,\\n            uint64,\\n            uint64,\\n            uint64,\\n            uint256,\\n            uint256,\\n            uint256,\\n            bytes memory\\n        );\\n\\n    function vote_for_gauge_weights(address, uint256) external;\\n}\\n\\ninterface IMinter {\\n    function mint(address) external;\\n}\\n\\ninterface IRegistry {\\n    function get_registry() external view returns (address);\\n\\n    function get_address(uint256 _id) external view returns (address);\\n\\n    function gauge_controller() external view returns (address);\\n\\n    function get_lp_token(address) external view returns (address);\\n\\n    function get_gauges(address)\\n        external\\n        view\\n        returns (address[10] memory, uint128[10] memory);\\n}\\n\\ninterface IStaker {\\n    function deposit(address, address) external;\\n\\n    function withdraw(address) external;\\n\\n    function withdraw(\\n        address,\\n        address,\\n        uint256\\n    ) external;\\n\\n    function withdrawAll(address, address) external;\\n\\n    function createLock(uint256, uint256) external;\\n\\n    function increaseAmount(uint256) external;\\n\\n    function increaseTime(uint256) external;\\n\\n    function release() external;\\n\\n    function claimCrv(address) external returns (uint256);\\n\\n    function claimRewards(address) external;\\n\\n    function claimFees(address, address) external;\\n\\n    function setStashAccess(address, bool) external;\\n\\n    function vote(\\n        uint256,\\n        address,\\n        bool\\n    ) external;\\n\\n    function voteGaugeWeight(address, uint256) external;\\n\\n    function balanceOfPool(address) external view returns (uint256);\\n\\n    function operator() external view returns (address);\\n\\n    function execute(\\n        address _to,\\n        uint256 _value,\\n        bytes calldata _data\\n    ) external returns (bool, bytes memory);\\n}\\n\\ninterface IRewards {\\n    function stake(address, uint256) external;\\n\\n    function stakeFor(address, uint256) external;\\n\\n    function withdraw(address, uint256) external;\\n\\n    function exit(address) external;\\n\\n    function getReward(address) external;\\n\\n    function queueNewRewards(uint256) external;\\n\\n    function notifyRewardAmount(uint256) external;\\n\\n    function addExtraReward(address) external;\\n\\n    function stakingToken() external view returns (address);\\n\\n    function rewardToken() external view returns (address);\\n\\n    function earned(address account) external view returns (uint256);\\n}\\n\\ninterface IStash {\\n    function stashRewards() external returns (bool);\\n\\n    function processStash() external returns (bool);\\n\\n    function claimRewards() external returns (bool);\\n\\n    function initialize(\\n        uint256 _pid,\\n        address _operator,\\n        address _staker,\\n        address _gauge,\\n        address _rewardFactory\\n    ) external;\\n}\\n\\ninterface IFeeDistro {\\n    function claim() external;\\n\\n    function token() external view returns (address);\\n}\\n\\ninterface ITokenMinter {\\n    function mint(address, uint256) external;\\n\\n    function burn(address, uint256) external;\\n}\\n\\ninterface IDeposit {\\n    function isShutdown() external view returns (bool);\\n\\n    function balanceOf(address _account) external view returns (uint256);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function poolInfo(uint256)\\n        external\\n        view\\n        returns (\\n            address,\\n            address,\\n            address,\\n            address,\\n            address,\\n            bool\\n        );\\n\\n    function rewardClaimed(\\n        uint256,\\n        address,\\n        uint256\\n    ) external;\\n\\n    function withdrawTo(\\n        uint256,\\n        uint256,\\n        address\\n    ) external;\\n\\n    function claimRewards(uint256, address) external returns (bool);\\n\\n    function rewardArbitrator() external returns (address);\\n\\n    function setGaugeRedirect(uint256 _pid) external returns (bool);\\n\\n    function owner() external returns (address);\\n}\\n\\ninterface ICrvDeposit {\\n    function deposit(uint256, bool) external;\\n\\n    function lockIncentive() external view returns (uint256);\\n}\\n\\ninterface IRewardFactory {\\n    function setAccess(address, bool) external;\\n\\n    function CreateBalRewards(uint256, address) external returns (address);\\n\\n    function CreateTokenRewards(\\n        address,\\n        address,\\n        address\\n    ) external returns (address);\\n\\n    function activeRewardCount(address) external view returns (uint256);\\n\\n    function addActiveReward(address, uint256) external returns (bool);\\n\\n    function removeActiveReward(address, uint256) external returns (bool);\\n}\\n\\ninterface IStashFactory {\\n    function CreateStash(\\n        uint256,\\n        address,\\n        address,\\n        uint256\\n    ) external returns (address);\\n}\\n\\ninterface ITokenFactory {\\n    function CreateDepositToken(address) external returns (address);\\n}\\n\\ninterface IPools {\\n    function addPool(\\n        address _lptoken,\\n        address _gauge,\\n        uint256 _stashVersion\\n    ) external returns (bool);\\n\\n    function forceAddPool(\\n        address _lptoken,\\n        address _gauge,\\n        uint256 _stashVersion\\n    ) external returns (bool);\\n\\n    function shutdownPool(uint256 _pid) external returns (bool);\\n\\n    function poolInfo(uint256)\\n        external\\n        view\\n        returns (\\n            address,\\n            address,\\n            address,\\n            address,\\n            address,\\n            bool\\n        );\\n\\n    function poolLength() external view returns (uint256);\\n\\n    function gaugeMap(address) external view returns (bool);\\n\\n    function setPoolManager(address _poolM) external;\\n}\\n\\ninterface IVestedEscrow {\\n    function fund(address[] calldata _recipient, uint256[] calldata _amount)\\n        external\\n        returns (bool);\\n}\\n\",\"keccak256\":\"0x9d4d25001eb30a3dce9ebd8823be5eab3a65245321d614af91c74ba27f194123\"},\"contracts/utils/MathUtil.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// copied from https://github.com/Uniswap/v2-core/blob/master/contracts/libraries/SafeMath.sol\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUtil {\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n}\\n\",\"keccak256\":\"0x9e105b0b40007fffed756069827f16b398d7b56123bb7d6771b6a3bdd547522a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040526103e86000556101c2600155603260025560006003553480156200002757600080fd5b506040516200363f3803806200363f8339810160408190526200004a91620000d9565b601180546001600160a01b0393841660805260048054336001600160a01b03199182168117909255600b80548216831790556005805482168317905560068054821690921790915560108054821690556001600160a81b0319909116909155600c805490911690551660a05262000111565b80516001600160a01b0381168114620000d457600080fd5b919050565b60008060408385031215620000ed57600080fd5b620000f883620000bc565b91506200010860208401620000bc565b90509250929050565b60805160a0516134a662000199600039600081816103c5015261164d0152600081816105390152818161095601528181610b6701528181610cbf01528181610d57015281816113560152818161145f015281816119a601528181611c1e01528181611df50152818161202501528181612238015281816123a9015261277601526134a66000f3fe608060405234801561001057600080fd5b50600436106103785760003560e01c80637303df9a116101d3578063b0eefabe11610104578063d0fb0203116100a2578063dc4c90d31161007c578063dc4c90d3146107b7578063e2cdd42a146107ca578063e77772fe146107dd578063f0f44260146107f057600080fd5b8063d0fb020314610788578063d6a0f5301461079b578063d73792a9146107ae57600080fd5b8063bfad96ba116100de578063bfad96ba1461072c578063cb0d5b521461073f578063cc956f3f14610762578063cfb9cfba1461077557600080fd5b8063b0eefabe146106ea578063b42eda71146106fd578063bf86d6901461071857600080fd5b80639123d40411610171578063958e2d311161014b578063958e2d31146106965780639f00332b146106a9578063a386a080146106bc578063ab366292146106d757600080fd5b80639123d4041461066857806393e846a01461067b57806395539a1d1461068357600080fd5b80637b103999116101ad5780637b103999146106185780637bd3b9951461062f5780637e29d6c2146106425780638da5cb5b1461065557600080fd5b80637303df9a146105e957806374874323146105f25780637aef67151461060557600080fd5b806343a0d066116102ad57806360cafe841161024b578063647846a511610225578063647846a51461059d5780636c7b69cb146105b05780636fcba377146105c357806371192b17146105d657600080fd5b806360cafe841461056e57806361d027b31461058157806362d28ac71461059457600080fd5b8063509406181161028757806350940618146105235780635a4ae5ca1461052c5780635ebaf1db1461053457806360759fce1461055b57600080fd5b806343a0d066146104ea578063441a3e70146104fd578063472d35b91461051057600080fd5b806322230b961161031a578063354af919116102f4578063354af919146104ab578063376d771a146104b35780633a088cd2146104c65780633d79d1c8146104cf57600080fd5b806322230b9614610487578063245e4bf01461048f57806326232a2e146104a257600080fd5b8063081e3eda11610356578063081e3eda146103e757806313af4035146103f957806314cd70e41461040e5780631526fe271461043157600080fd5b8063043b684a1461037d578063068eb19e146103ad57806307546172146103c0575b600080fd5b600a54610390906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b600854610390906001600160a01b031681565b6103907f000000000000000000000000000000000000000000000000000000000000000081565b6012545b6040519081526020016103a4565b61040c610407366004612ea0565b610803565b005b61042161041c366004612ebd565b610858565b60405190151581526020016103a4565b61044461043f366004612ef6565b6108c5565b604080516001600160a01b0397881681529587166020870152938616938501939093529084166060840152909216608082015290151560a082015260c0016103a4565b610421610926565b600754610390906001600160a01b031681565b6103eb60035481565b61040c610aa7565b600e54610390906001600160a01b031681565b6103eb60025481565b61039073ba100000625a3754423978a60c9317c58a424e3d81565b6104216104f8366004612f1d565b610bf0565b61042161050b366004612f4b565b610fe1565b61040c61051e366004612ea0565b610ff8565b6103eb60005481565b61040c611044565b6103907f000000000000000000000000000000000000000000000000000000000000000081565b610421610569366004612f6d565b611227565b61042161057c366004612ef6565b6112d3565b600c54610390906001600160a01b031681565b6103eb60015481565b601154610390906001600160a01b031681565b6104216105be366004612f9d565b6113ec565b61040c6105d1366004612fc2565b6114c5565b6104216105e4366004612ff4565b6115be565b6103eb6107d081565b61040c610600366004612ea0565b6116b4565b61040c610613366004612ea0565b611700565b6103906f22d53366457f9d5e68ec105046fc438381565b61040c61063d36600461302c565b61174c565b61042161065036600461306c565b6117db565b600454610390906001600160a01b031681565b610421610676366004612ef6565b611cf0565b6103eb600481565b61040c61069136600461309c565b611e83565b6104216106a4366004612ef6565b611ef2565b600b54610390906001600160a01b031681565b61039073e478de485ad2fe566d49342cbd03e49ed7db335681565b600f54610390906001600160a01b031681565b61040c6106f8366004612ea0565b611f9f565b61039073bcff8b0b9419b9a88c44546519b1e909cf33039981565b60115461042190600160a01b900460ff1681565b61042161073a366004613116565b611feb565b61042161074d366004612ea0565b60136020526000908152604090205460ff1681565b610421610770366004612ef6565b612105565b600d54610390906001600160a01b031681565b600554610390906001600160a01b031681565b601054610390906001600160a01b031681565b6103eb61271081565b600654610390906001600160a01b031681565b6104216107d8366004613182565b61215e565b600954610390906001600160a01b031681565b61040c6107fe366004612ea0565b61227c565b6004546001600160a01b031633146108365760405162461bcd60e51b815260040161082d906131b9565b60405180910390fd5b600480546001600160a01b0319166001600160a01b0392909216919091179055565b6000806012858154811061086e5761086e6131d8565b60009182526020909120600360059092020101546001600160a01b031690503381146108ac5760405162461bcd60e51b815260040161082d906131b9565b6108b8858533866122c8565b60019150505b9392505050565b601281815481106108d557600080fd5b6000918252602090912060059091020180546001820154600283015460038401546004909401546001600160a01b03938416955091831693908316929081169190811690600160a01b900460ff1686565b601054601154604051632dbfa73560e01b81526001600160a01b03928316600482015290821660248201526000917f00000000000000000000000000000000000000000000000000000000000000001690632dbfa73590604401600060405180830381600087803b15801561099a57600080fd5b505af11580156109ae573d6000803e3d6000fd5b50506011546040516370a0823160e01b8152306004820152600093506001600160a01b0390911691506370a0823190602401602060405180830381865afa1580156109fd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a2191906131ee565b600f54601154919250610a41916001600160a01b03908116911683612513565b600f5460405163590a41f560e01b8152600481018390526001600160a01b039091169063590a41f590602401600060405180830381600087803b158015610a8757600080fd5b505af1158015610a9b573d6000803e3d6000fd5b50505050600191505090565b6004546001600160a01b03163314610ad15760405162461bcd60e51b815260040161082d906131b9565b6011805460ff60a01b1916600160a01b17905560005b601254811015610bed57600060128281548110610b0657610b066131d8565b906000526020600020906005020190508060040160149054906101000a900460ff1615610b335750610bdb565b805460028201546040516301395c5960e31b81526001600160a01b03928316600482018190529183166024820181905291927f000000000000000000000000000000000000000000000000000000000000000016906309cae2c890604401600060405180830381600087803b158015610bab57600080fd5b505af1925050508015610bbc575060015b15610bd75760048301805460ff60a01b1916600160a01b1790555b5050505b80610be58161321d565b915050610ae7565b50565b601154600090600160a01b900460ff1615610c385760405162461bcd60e51b815260206004820152600860248201526739b43aba3237bbb760c11b604482015260640161082d565b600060128581548110610c4d57610c4d6131d8565b600091825260209091206005909102016004810154909150600160a01b900460ff1615610cad5760405162461bcd60e51b815260206004820152600e60248201526d1c1bdbdb081a5cc818db1bdcd95960921b604482015260640161082d565b80546001600160a01b0316610ce481337f00000000000000000000000000000000000000000000000000000000000000008861257b565b60028201546001600160a01b031680610d305760405162461bcd60e51b815260206004820152600e60248201526d2167617567652073657474696e6760901b604482015260640161082d565b604051631f2c13e160e31b81526001600160a01b03838116600483015282811660248301527f0000000000000000000000000000000000000000000000000000000000000000169063f9609f0890604401600060405180830381600087803b158015610d9b57600080fd5b505af1158015610daf573d6000803e3d6000fd5b5050505060048301546001600160a01b03168015610e2d57806001600160a01b031663b87bd4816040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610e07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e2b9190613236565b505b60018401546001600160a01b03168615610f3a576040516340c10f1960e01b8152306004820152602481018990526001600160a01b038216906340c10f1990604401600060405180830381600087803b158015610e8957600080fd5b505af1158015610e9d573d6000803e3d6000fd5b50505060038601546001600160a01b039081169150610ec09083168260006125b9565b610ed46001600160a01b038316828b6125b9565b6040516305dc812160e31b8152336004820152602481018a90526001600160a01b03821690632ee4090890604401600060405180830381600087803b158015610f1c57600080fd5b505af1158015610f30573d6000803e3d6000fd5b5050505050610f9b565b6040516340c10f1960e01b8152336004820152602481018990526001600160a01b038216906340c10f1990604401600060405180830381600087803b158015610f8257600080fd5b505af1158015610f96573d6000803e3d6000fd5b505050505b604051888152899033907f73a19dd210f1a7f902193214c0ee91dd35ee5b4d920cba8d519eca65a7b488ca9060200160405180910390a350600198975050505050505050565b6000610fef838333336122c8565b50600192915050565b6005546001600160a01b031633146110225760405162461bcd60e51b815260040161082d906131b9565b600580546001600160a01b0319166001600160a01b0392909216919091179055565b6005546001600160a01b0316331461106e5760405162461bcd60e51b815260040161082d906131b9565b60405163124fd3dd60e21b81526004808201526f22d53366457f9d5e68ec105046fc43839063493f4f7490602401602060405180830381865afa1580156110b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110dd9190613253565b601080546001600160a01b0319166001600160a01b0392909216918217905560408051637e062a3560e11b815290516000929163fc0c546a9160048083019260209291908290030181865afa15801561113a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061115e9190613253565b6011549091506001600160a01b03808316911614610bed57600754600e54604051637c6b091760e11b81526001600160a01b038481166004830152918216602482015230604482015291169063f8d6122e906064016020604051808303816000875af11580156111d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111f69190613253565b600f80546001600160a01b039283166001600160a01b03199182161790915560118054939092169216919091179055565b6000806012848154811061123d5761123d6131d8565b60009182526020822060059190910201546040516370a0823160e01b81523360048201526001600160a01b03909116925082906370a0823190602401602060405180830381865afa158015611296573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112ba91906131ee565b90506112c7858286610bf0565b50600195945050505050565b6006546000906001600160a01b031633146113005760405162461bcd60e51b815260040161082d906131b9565b600060128381548110611315576113156131d8565b60009182526020909120600590910201805460028201546040516301395c5960e31b81526001600160a01b03928316600482015290821660248201529192507f000000000000000000000000000000000000000000000000000000000000000016906309cae2c890604401600060405180830381600087803b15801561139a57600080fd5b505af19250505080156113ab575060015b5060048101805460ff60a01b1916600160a01b179055600201546001600160a01b03166000908152601360205260409020805460ff19169055506001919050565b60008060128481548110611402576114026131d8565b60009182526020909120600460059092020101546001600160a01b031690503381146114405760405162461bcd60e51b815260040161082d906131b9565b604051633bd73ee360e21b81526001600160a01b0384811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063ef5cfb8c90602401600060405180830381600087803b1580156114a357600080fd5b505af11580156114b7573d6000803e3d6000fd5b506001979650505050505050565b6005546001600160a01b031633146114ef5760405162461bcd60e51b815260040161082d906131b9565b600061150782611501858189896126ce565b906126ce565b90506107d08111156115465760405162461bcd60e51b81526020600482015260086024820152673e4d61784665657360c01b604482015260640161082d565b6103e8851015801561155a57506105dc8511155b8015611568575061012c8410155b801561157657506102588411155b80156115835750600a8310155b8015611590575060648311155b801561159d575060c88211155b156115b75760008590556001849055600283905560038290555b5050505050565b600080601285815481106115d4576115d46131d8565b60009182526020909120600360059092020101546001600160a01b031690503381148061160b5750600e546001600160a01b031633145b6116275760405162461bcd60e51b815260040161082d906131b9565b6040516340c10f1960e01b81526001600160a01b038581166004830152602482018590527f000000000000000000000000000000000000000000000000000000000000000016906340c10f1990604401600060405180830381600087803b15801561169157600080fd5b505af11580156116a5573d6000803e3d6000fd5b50600198975050505050505050565b600b546001600160a01b031633146116de5760405162461bcd60e51b815260040161082d906131b9565b600b80546001600160a01b0319166001600160a01b0392909216919091179055565b6006546001600160a01b0316331461172a5760405162461bcd60e51b815260040161082d906131b9565b600680546001600160a01b0319166001600160a01b0392909216919091179055565b6004546001600160a01b031633146117765760405162461bcd60e51b815260040161082d906131b9565b6007546001600160a01b03166117b757600780546001600160a01b038086166001600160a01b03199283161790925560098054928416929091169190911790555b50600880546001600160a01b0319166001600160a01b039290921691909117905550565b6006546000906001600160a01b0316331480156118025750601154600160a01b900460ff16155b6118375760405162461bcd60e51b815260040161082d906020808252600490820152630858591960e21b604082015260600190565b6001600160a01b0383161580159061185757506001600160a01b03841615155b61188c5760405162461bcd60e51b815260206004820152600660248201526521706172616d60d01b604482015260640161082d565b601254600954604051630452a26760e21b81526001600160a01b038781166004830152600092169063114a899c906024016020604051808303816000875af11580156118dc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119009190613253565b600754604051637c07b35160e01b8152600481018590526001600160a01b03808416602483015292935060009290911690637c07b351906044016020604051808303816000875af1158015611959573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061197d9190613253565b600854604051634ce5896f60e11b8152600481018690526001600160a01b0389811660248301527f00000000000000000000000000000000000000000000000000000000000000008116604483015260648201899052929350600092909116906399cb12de906084016020604051808303816000875af1158015611a05573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a299190613253565b6040805160c0810182526001600160a01b03808c16825286811660208084019182528c83168486018181528985166060870190815285891660808801818152600060a08a0181815260128054600181810183559184529b516005909c027fbb8a6a4669ba250d26cd7a459eca9d215f8307e33aebe50379bc5a3617ec3444810180549d8d166001600160a01b03199e8f1617905599517fbb8a6a4669ba250d26cd7a459eca9d215f8307e33aebe50379bc5a3617ec34458b018054918d16918e1691909117905595517fbb8a6a4669ba250d26cd7a459eca9d215f8307e33aebe50379bc5a3617ec34468a018054918c16918d1691909117905593517fbb8a6a4669ba250d26cd7a459eca9d215f8307e33aebe50379bc5a3617ec344789018054918b1691909b1617909955517fbb8a6a4669ba250d26cd7a459eca9d215f8307e33aebe50379bc5a3617ec3448909601805492511515600160a01b026001600160a81b031990931696909716959095171790945584526013905292909120805460ff19169091179055909150156114b7578060128581548110611bcf57611bcf6131d8565b60009182526020909120600590910201600490810180546001600160a01b0319166001600160a01b03938416179055604051637d1cb25960e11b815283831691810191909152600160248201527f00000000000000000000000000000000000000000000000000000000000000009091169063fa3964b290604401600060405180830381600087803b158015611c6457600080fd5b505af1158015611c78573d6000803e3d6000fd5b505060075460405163b84614a560e01b81526001600160a01b03858116600483015260016024830152909116925063b84614a59150604401600060405180830381600087803b158015611cca57600080fd5b505af1158015611cde573d6000803e3d6000fd5b50505050506001979650505050505050565b60008060128381548110611d0657611d066131d8565b60009182526020909120600460059092020101546001600160a01b03169050338114611d445760405162461bcd60e51b815260040161082d906131b9565b600060128481548110611d5957611d596131d8565b60009182526020822060059190910201600201546040516001600160a01b03858116602483015290911692507fbdf9811664f53779574e5d0027299590a75c0dec0ae32053c021cdb4e3844f679060440160408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051635b0e93fb60e11b81529091506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063b61d27f690611e2f90859060009086906004016132c8565b6000604051808303816000875af1158015611e4e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611e76919081019061330e565b5060019695505050505050565b6004546001600160a01b03163314611ead5760405162461bcd60e51b815260040161082d906131b9565b600e546001600160a01b0316611eee57600e80546001600160a01b038085166001600160a01b031992831617909255600d8054928416929091169190911790555b5050565b60008060128381548110611f0857611f086131d8565b60009182526020822060059190910201600101546040516370a0823160e01b81523360048201526001600160a01b03909116925082906370a0823190602401602060405180830381865afa158015611f64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f8891906131ee565b9050611f948482610fe1565b506001949350505050565b6004546001600160a01b03163314611fc95760405162461bcd60e51b815260040161082d906131b9565b600a80546001600160a01b0319166001600160a01b0392909216919091179055565b600b546000906001600160a01b031633146120185760405162461bcd60e51b815260040161082d906131b9565b60005b848110156112c7577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316635d7e9bcb878784818110612064576120646131d8565b90506020020160208101906120799190612ea0565b86868581811061208b5761208b6131d8565b6040516001600160e01b031960e087901b1681526001600160a01b0390941660048501526020029190910135602483015250604401600060405180830381600087803b1580156120da57600080fd5b505af11580156120ee573d6000803e3d6000fd5b5050505080806120fd9061321d565b91505061201b565b601154600090600160a01b900460ff161561214d5760405162461bcd60e51b815260206004820152600860248201526739b43aba3237bbb760c11b604482015260640161082d565b612156826126da565b506001919050565b600b546000906001600160a01b0316331461218b5760405162461bcd60e51b815260040161082d906131b9565b6001600160a01b03831673e478de485ad2fe566d49342cbd03e49ed7db335614806121d257506001600160a01b03831673bcff8b0b9419b9a88c44546519b1e909cf330399145b61220a5760405162461bcd60e51b815260206004820152600960248201526810bb37ba32a0b2323960b91b604482015260640161082d565b604051637166ea1560e11b8152600481018590526001600160a01b03848116602483015283151560448301527f0000000000000000000000000000000000000000000000000000000000000000169063e2cdd42a90606401600060405180830381600087803b1580156114a357600080fd5b6005546001600160a01b031633146122a65760405162461bcd60e51b815260040161082d906131b9565b600c80546001600160a01b0319166001600160a01b0392909216919091179055565b6000601285815481106122dd576122dd6131d8565b60009182526020909120600590910201805460028201546001830154604051632770a7eb60e21b81526001600160a01b038881166004830152602482018a905294955092841693918216929116908190639dc29fac90604401600060405180830381600087803b15801561235057600080fd5b505af1158015612364573d6000803e3d6000fd5b505050506004840154600160a01b900460ff1661240657604051636ce5768960e11b81526001600160a01b0384811660048301528381166024830152604482018990527f0000000000000000000000000000000000000000000000000000000000000000169063d9caed1290606401600060405180830381600087803b1580156123ed57600080fd5b505af1158015612401573d6000803e3d6000fd5b505050505b60048401546001600160a01b0316801580159061242d5750601154600160a01b900460ff16155b801561244557506004850154600160a01b900460ff16155b156124b057806001600160a01b031663b87bd4816040518163ffffffff1660e01b81526004016020604051808303816000875af115801561248a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124ae9190613236565b505b6124c46001600160a01b038516878a612513565b88866001600160a01b03167f92ccf450a286a957af52509bc1c9939d1a6a481783e142e41e2499f0bb66ebc68a60405161250091815260200190565b60405180910390a3505050505050505050565b6040516001600160a01b03831660248201526044810182905261257690849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612c14565b505050565b6040516001600160a01b03808516602483015283166044820152606481018290526125b39085906323b872dd60e01b9060840161253f565b50505050565b8015806126335750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e90604401602060405180830381865afa15801561260d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061263191906131ee565b155b61269e5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b606482015260840161082d565b6040516001600160a01b03831660248201526044810182905261257690849063095ea7b360e01b9060640161253f565b60006108be82846133d1565b6000601282815481106126ef576126ef6131d8565b600091825260209091206005909102016004810154909150600160a01b900460ff161561274f5760405162461bcd60e51b815260206004820152600e60248201526d1c1bdbdb081a5cc818db1bdcd95960921b604482015260640161082d565b6002810154604051631ff4de0360e11b81526001600160a01b0391821660048201819052917f00000000000000000000000000000000000000000000000000000000000000001690633fe9bc06906024016020604051808303816000875af11580156127bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127e391906131ee565b5060048201546001600160a01b031680156128c357806001600160a01b031663372500ab6040518163ffffffff1660e01b81526004016020604051808303816000875af1158015612838573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061285c9190613236565b50806001600160a01b031663ca8b01766040518163ffffffff1660e01b81526004016020604051808303816000875af115801561289d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128c19190613236565b505b6040516370a0823160e01b815230600482015260009073ba100000625a3754423978a60c9317c58a424e3d906370a0823190602401602060405180830381865afa158015612915573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061293991906131ee565b905080156115b757600061296461271061295e60005485612ce690919063ffffffff16565b90612cf2565b9050600061298361271061295e60015486612ce690919063ffffffff16565b905060006129a261271061295e60025487612ce690919063ffffffff16565b600c549091506001600160a01b0316158015906129ca5750600c546001600160a01b03163014155b80156129d857506000600354115b15612a375760006129fa61271061295e60035488612ce690919063ffffffff16565b9050612a068582612cfe565b600c54909550612a359073ba100000625a3754423978a60c9317c58a424e3d906001600160a01b031683612513565b505b612a4d82612a4783818888612cfe565b90612cfe565b9350612a6e73ba100000625a3754423978a60c9317c58a424e3d3383612513565b60038701546001600160a01b0316612a9b73ba100000625a3754423978a60c9317c58a424e3d8287612513565b60405163590a41f560e01b8152600481018690526001600160a01b0382169063590a41f590602401600060405180830381600087803b158015612add57600080fd5b505af1158015612af1573d6000803e3d6000fd5b5050600e54612b21925073ba100000625a3754423978a60c9317c58a424e3d91506001600160a01b031686612513565b600e5460405163590a41f560e01b8152600481018690526001600160a01b039091169063590a41f590602401600060405180830381600087803b158015612b6757600080fd5b505af1158015612b7b573d6000803e3d6000fd5b5050600d54612bab925073ba100000625a3754423978a60c9317c58a424e3d91506001600160a01b031685612513565b600d5460405163590a41f560e01b8152600481018590526001600160a01b039091169063590a41f590602401600060405180830381600087803b158015612bf157600080fd5b505af1158015612c05573d6000803e3d6000fd5b50505050505050505050505050565b6000612c69826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612d0a9092919063ffffffff16565b8051909150156125765780806020019051810190612c879190613236565b6125765760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161082d565b60006108be82846133e9565b60006108be8284613408565b60006108be828461342a565b6060612d198484600085612d21565b949350505050565b606082471015612d825760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161082d565b6001600160a01b0385163b612dd95760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161082d565b600080866001600160a01b03168587604051612df59190613441565b60006040518083038185875af1925050503d8060008114612e32576040519150601f19603f3d011682016040523d82523d6000602084013e612e37565b606091505b5091509150612e47828286612e52565b979650505050505050565b60608315612e615750816108be565b825115612e715782518084602001fd5b8160405162461bcd60e51b815260040161082d919061345d565b6001600160a01b0381168114610bed57600080fd5b600060208284031215612eb257600080fd5b81356108be81612e8b565b600080600060608486031215612ed257600080fd5b83359250602084013591506040840135612eeb81612e8b565b809150509250925092565b600060208284031215612f0857600080fd5b5035919050565b8015158114610bed57600080fd5b600080600060608486031215612f3257600080fd5b83359250602084013591506040840135612eeb81612f0f565b60008060408385031215612f5e57600080fd5b50508035926020909101359150565b60008060408385031215612f8057600080fd5b823591506020830135612f9281612f0f565b809150509250929050565b60008060408385031215612fb057600080fd5b823591506020830135612f9281612e8b565b60008060008060808587031215612fd857600080fd5b5050823594602084013594506040840135936060013592509050565b60008060006060848603121561300957600080fd5b83359250602084013561301b81612e8b565b929592945050506040919091013590565b60008060006060848603121561304157600080fd5b833561304c81612e8b565b9250602084013561305c81612e8b565b91506040840135612eeb81612e8b565b60008060006060848603121561308157600080fd5b833561308c81612e8b565b9250602084013561301b81612e8b565b600080604083850312156130af57600080fd5b82356130ba81612e8b565b91506020830135612f9281612e8b565b60008083601f8401126130dc57600080fd5b50813567ffffffffffffffff8111156130f457600080fd5b6020830191508360208260051b850101111561310f57600080fd5b9250929050565b6000806000806040858703121561312c57600080fd5b843567ffffffffffffffff8082111561314457600080fd5b613150888389016130ca565b9096509450602087013591508082111561316957600080fd5b50613176878288016130ca565b95989497509550505050565b60008060006060848603121561319757600080fd5b8335925060208401356131a981612e8b565b91506040840135612eeb81612f0f565b602080825260059082015264042c2eae8d60db1b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561320057600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b60006001820161322f5761322f613207565b5060010190565b60006020828403121561324857600080fd5b81516108be81612f0f565b60006020828403121561326557600080fd5b81516108be81612e8b565b60005b8381101561328b578181015183820152602001613273565b838111156125b35750506000910152565b600081518084526132b4816020860160208601613270565b601f01601f19169290920160200192915050565b60018060a01b03841681528260208201526060604082015260006132ef606083018461329c565b95945050505050565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561332157600080fd5b825161332c81612f0f565b602084015190925067ffffffffffffffff8082111561334a57600080fd5b818501915085601f83011261335e57600080fd5b815181811115613370576133706132f8565b604051601f8201601f19908116603f01168101908382118183101715613398576133986132f8565b816040528281528860208487010111156133b157600080fd5b6133c2836020830160208801613270565b80955050505050509250929050565b600082198211156133e4576133e4613207565b500190565b600081600019048311821515161561340357613403613207565b500290565b60008261342557634e487b7160e01b600052601260045260246000fd5b500490565b60008282101561343c5761343c613207565b500390565b60008251613453818460208701613270565b9190910192915050565b6020815260006108be602083018461329c56fea2646970667358221220003efd5ea555e6131ed9469ee2bd36266addda96a648598bc19a7cddb948dd3564736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106103785760003560e01c80637303df9a116101d3578063b0eefabe11610104578063d0fb0203116100a2578063dc4c90d31161007c578063dc4c90d3146107b7578063e2cdd42a146107ca578063e77772fe146107dd578063f0f44260146107f057600080fd5b8063d0fb020314610788578063d6a0f5301461079b578063d73792a9146107ae57600080fd5b8063bfad96ba116100de578063bfad96ba1461072c578063cb0d5b521461073f578063cc956f3f14610762578063cfb9cfba1461077557600080fd5b8063b0eefabe146106ea578063b42eda71146106fd578063bf86d6901461071857600080fd5b80639123d40411610171578063958e2d311161014b578063958e2d31146106965780639f00332b146106a9578063a386a080146106bc578063ab366292146106d757600080fd5b80639123d4041461066857806393e846a01461067b57806395539a1d1461068357600080fd5b80637b103999116101ad5780637b103999146106185780637bd3b9951461062f5780637e29d6c2146106425780638da5cb5b1461065557600080fd5b80637303df9a146105e957806374874323146105f25780637aef67151461060557600080fd5b806343a0d066116102ad57806360cafe841161024b578063647846a511610225578063647846a51461059d5780636c7b69cb146105b05780636fcba377146105c357806371192b17146105d657600080fd5b806360cafe841461056e57806361d027b31461058157806362d28ac71461059457600080fd5b8063509406181161028757806350940618146105235780635a4ae5ca1461052c5780635ebaf1db1461053457806360759fce1461055b57600080fd5b806343a0d066146104ea578063441a3e70146104fd578063472d35b91461051057600080fd5b806322230b961161031a578063354af919116102f4578063354af919146104ab578063376d771a146104b35780633a088cd2146104c65780633d79d1c8146104cf57600080fd5b806322230b9614610487578063245e4bf01461048f57806326232a2e146104a257600080fd5b8063081e3eda11610356578063081e3eda146103e757806313af4035146103f957806314cd70e41461040e5780631526fe271461043157600080fd5b8063043b684a1461037d578063068eb19e146103ad57806307546172146103c0575b600080fd5b600a54610390906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b600854610390906001600160a01b031681565b6103907f000000000000000000000000000000000000000000000000000000000000000081565b6012545b6040519081526020016103a4565b61040c610407366004612ea0565b610803565b005b61042161041c366004612ebd565b610858565b60405190151581526020016103a4565b61044461043f366004612ef6565b6108c5565b604080516001600160a01b0397881681529587166020870152938616938501939093529084166060840152909216608082015290151560a082015260c0016103a4565b610421610926565b600754610390906001600160a01b031681565b6103eb60035481565b61040c610aa7565b600e54610390906001600160a01b031681565b6103eb60025481565b61039073ba100000625a3754423978a60c9317c58a424e3d81565b6104216104f8366004612f1d565b610bf0565b61042161050b366004612f4b565b610fe1565b61040c61051e366004612ea0565b610ff8565b6103eb60005481565b61040c611044565b6103907f000000000000000000000000000000000000000000000000000000000000000081565b610421610569366004612f6d565b611227565b61042161057c366004612ef6565b6112d3565b600c54610390906001600160a01b031681565b6103eb60015481565b601154610390906001600160a01b031681565b6104216105be366004612f9d565b6113ec565b61040c6105d1366004612fc2565b6114c5565b6104216105e4366004612ff4565b6115be565b6103eb6107d081565b61040c610600366004612ea0565b6116b4565b61040c610613366004612ea0565b611700565b6103906f22d53366457f9d5e68ec105046fc438381565b61040c61063d36600461302c565b61174c565b61042161065036600461306c565b6117db565b600454610390906001600160a01b031681565b610421610676366004612ef6565b611cf0565b6103eb600481565b61040c61069136600461309c565b611e83565b6104216106a4366004612ef6565b611ef2565b600b54610390906001600160a01b031681565b61039073e478de485ad2fe566d49342cbd03e49ed7db335681565b600f54610390906001600160a01b031681565b61040c6106f8366004612ea0565b611f9f565b61039073bcff8b0b9419b9a88c44546519b1e909cf33039981565b60115461042190600160a01b900460ff1681565b61042161073a366004613116565b611feb565b61042161074d366004612ea0565b60136020526000908152604090205460ff1681565b610421610770366004612ef6565b612105565b600d54610390906001600160a01b031681565b600554610390906001600160a01b031681565b601054610390906001600160a01b031681565b6103eb61271081565b600654610390906001600160a01b031681565b6104216107d8366004613182565b61215e565b600954610390906001600160a01b031681565b61040c6107fe366004612ea0565b61227c565b6004546001600160a01b031633146108365760405162461bcd60e51b815260040161082d906131b9565b60405180910390fd5b600480546001600160a01b0319166001600160a01b0392909216919091179055565b6000806012858154811061086e5761086e6131d8565b60009182526020909120600360059092020101546001600160a01b031690503381146108ac5760405162461bcd60e51b815260040161082d906131b9565b6108b8858533866122c8565b60019150505b9392505050565b601281815481106108d557600080fd5b6000918252602090912060059091020180546001820154600283015460038401546004909401546001600160a01b03938416955091831693908316929081169190811690600160a01b900460ff1686565b601054601154604051632dbfa73560e01b81526001600160a01b03928316600482015290821660248201526000917f00000000000000000000000000000000000000000000000000000000000000001690632dbfa73590604401600060405180830381600087803b15801561099a57600080fd5b505af11580156109ae573d6000803e3d6000fd5b50506011546040516370a0823160e01b8152306004820152600093506001600160a01b0390911691506370a0823190602401602060405180830381865afa1580156109fd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a2191906131ee565b600f54601154919250610a41916001600160a01b03908116911683612513565b600f5460405163590a41f560e01b8152600481018390526001600160a01b039091169063590a41f590602401600060405180830381600087803b158015610a8757600080fd5b505af1158015610a9b573d6000803e3d6000fd5b50505050600191505090565b6004546001600160a01b03163314610ad15760405162461bcd60e51b815260040161082d906131b9565b6011805460ff60a01b1916600160a01b17905560005b601254811015610bed57600060128281548110610b0657610b066131d8565b906000526020600020906005020190508060040160149054906101000a900460ff1615610b335750610bdb565b805460028201546040516301395c5960e31b81526001600160a01b03928316600482018190529183166024820181905291927f000000000000000000000000000000000000000000000000000000000000000016906309cae2c890604401600060405180830381600087803b158015610bab57600080fd5b505af1925050508015610bbc575060015b15610bd75760048301805460ff60a01b1916600160a01b1790555b5050505b80610be58161321d565b915050610ae7565b50565b601154600090600160a01b900460ff1615610c385760405162461bcd60e51b815260206004820152600860248201526739b43aba3237bbb760c11b604482015260640161082d565b600060128581548110610c4d57610c4d6131d8565b600091825260209091206005909102016004810154909150600160a01b900460ff1615610cad5760405162461bcd60e51b815260206004820152600e60248201526d1c1bdbdb081a5cc818db1bdcd95960921b604482015260640161082d565b80546001600160a01b0316610ce481337f00000000000000000000000000000000000000000000000000000000000000008861257b565b60028201546001600160a01b031680610d305760405162461bcd60e51b815260206004820152600e60248201526d2167617567652073657474696e6760901b604482015260640161082d565b604051631f2c13e160e31b81526001600160a01b03838116600483015282811660248301527f0000000000000000000000000000000000000000000000000000000000000000169063f9609f0890604401600060405180830381600087803b158015610d9b57600080fd5b505af1158015610daf573d6000803e3d6000fd5b5050505060048301546001600160a01b03168015610e2d57806001600160a01b031663b87bd4816040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610e07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e2b9190613236565b505b60018401546001600160a01b03168615610f3a576040516340c10f1960e01b8152306004820152602481018990526001600160a01b038216906340c10f1990604401600060405180830381600087803b158015610e8957600080fd5b505af1158015610e9d573d6000803e3d6000fd5b50505060038601546001600160a01b039081169150610ec09083168260006125b9565b610ed46001600160a01b038316828b6125b9565b6040516305dc812160e31b8152336004820152602481018a90526001600160a01b03821690632ee4090890604401600060405180830381600087803b158015610f1c57600080fd5b505af1158015610f30573d6000803e3d6000fd5b5050505050610f9b565b6040516340c10f1960e01b8152336004820152602481018990526001600160a01b038216906340c10f1990604401600060405180830381600087803b158015610f8257600080fd5b505af1158015610f96573d6000803e3d6000fd5b505050505b604051888152899033907f73a19dd210f1a7f902193214c0ee91dd35ee5b4d920cba8d519eca65a7b488ca9060200160405180910390a350600198975050505050505050565b6000610fef838333336122c8565b50600192915050565b6005546001600160a01b031633146110225760405162461bcd60e51b815260040161082d906131b9565b600580546001600160a01b0319166001600160a01b0392909216919091179055565b6005546001600160a01b0316331461106e5760405162461bcd60e51b815260040161082d906131b9565b60405163124fd3dd60e21b81526004808201526f22d53366457f9d5e68ec105046fc43839063493f4f7490602401602060405180830381865afa1580156110b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110dd9190613253565b601080546001600160a01b0319166001600160a01b0392909216918217905560408051637e062a3560e11b815290516000929163fc0c546a9160048083019260209291908290030181865afa15801561113a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061115e9190613253565b6011549091506001600160a01b03808316911614610bed57600754600e54604051637c6b091760e11b81526001600160a01b038481166004830152918216602482015230604482015291169063f8d6122e906064016020604051808303816000875af11580156111d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111f69190613253565b600f80546001600160a01b039283166001600160a01b03199182161790915560118054939092169216919091179055565b6000806012848154811061123d5761123d6131d8565b60009182526020822060059190910201546040516370a0823160e01b81523360048201526001600160a01b03909116925082906370a0823190602401602060405180830381865afa158015611296573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112ba91906131ee565b90506112c7858286610bf0565b50600195945050505050565b6006546000906001600160a01b031633146113005760405162461bcd60e51b815260040161082d906131b9565b600060128381548110611315576113156131d8565b60009182526020909120600590910201805460028201546040516301395c5960e31b81526001600160a01b03928316600482015290821660248201529192507f000000000000000000000000000000000000000000000000000000000000000016906309cae2c890604401600060405180830381600087803b15801561139a57600080fd5b505af19250505080156113ab575060015b5060048101805460ff60a01b1916600160a01b179055600201546001600160a01b03166000908152601360205260409020805460ff19169055506001919050565b60008060128481548110611402576114026131d8565b60009182526020909120600460059092020101546001600160a01b031690503381146114405760405162461bcd60e51b815260040161082d906131b9565b604051633bd73ee360e21b81526001600160a01b0384811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063ef5cfb8c90602401600060405180830381600087803b1580156114a357600080fd5b505af11580156114b7573d6000803e3d6000fd5b506001979650505050505050565b6005546001600160a01b031633146114ef5760405162461bcd60e51b815260040161082d906131b9565b600061150782611501858189896126ce565b906126ce565b90506107d08111156115465760405162461bcd60e51b81526020600482015260086024820152673e4d61784665657360c01b604482015260640161082d565b6103e8851015801561155a57506105dc8511155b8015611568575061012c8410155b801561157657506102588411155b80156115835750600a8310155b8015611590575060648311155b801561159d575060c88211155b156115b75760008590556001849055600283905560038290555b5050505050565b600080601285815481106115d4576115d46131d8565b60009182526020909120600360059092020101546001600160a01b031690503381148061160b5750600e546001600160a01b031633145b6116275760405162461bcd60e51b815260040161082d906131b9565b6040516340c10f1960e01b81526001600160a01b038581166004830152602482018590527f000000000000000000000000000000000000000000000000000000000000000016906340c10f1990604401600060405180830381600087803b15801561169157600080fd5b505af11580156116a5573d6000803e3d6000fd5b50600198975050505050505050565b600b546001600160a01b031633146116de5760405162461bcd60e51b815260040161082d906131b9565b600b80546001600160a01b0319166001600160a01b0392909216919091179055565b6006546001600160a01b0316331461172a5760405162461bcd60e51b815260040161082d906131b9565b600680546001600160a01b0319166001600160a01b0392909216919091179055565b6004546001600160a01b031633146117765760405162461bcd60e51b815260040161082d906131b9565b6007546001600160a01b03166117b757600780546001600160a01b038086166001600160a01b03199283161790925560098054928416929091169190911790555b50600880546001600160a01b0319166001600160a01b039290921691909117905550565b6006546000906001600160a01b0316331480156118025750601154600160a01b900460ff16155b6118375760405162461bcd60e51b815260040161082d906020808252600490820152630858591960e21b604082015260600190565b6001600160a01b0383161580159061185757506001600160a01b03841615155b61188c5760405162461bcd60e51b815260206004820152600660248201526521706172616d60d01b604482015260640161082d565b601254600954604051630452a26760e21b81526001600160a01b038781166004830152600092169063114a899c906024016020604051808303816000875af11580156118dc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119009190613253565b600754604051637c07b35160e01b8152600481018590526001600160a01b03808416602483015292935060009290911690637c07b351906044016020604051808303816000875af1158015611959573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061197d9190613253565b600854604051634ce5896f60e11b8152600481018690526001600160a01b0389811660248301527f00000000000000000000000000000000000000000000000000000000000000008116604483015260648201899052929350600092909116906399cb12de906084016020604051808303816000875af1158015611a05573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a299190613253565b6040805160c0810182526001600160a01b03808c16825286811660208084019182528c83168486018181528985166060870190815285891660808801818152600060a08a0181815260128054600181810183559184529b516005909c027fbb8a6a4669ba250d26cd7a459eca9d215f8307e33aebe50379bc5a3617ec3444810180549d8d166001600160a01b03199e8f1617905599517fbb8a6a4669ba250d26cd7a459eca9d215f8307e33aebe50379bc5a3617ec34458b018054918d16918e1691909117905595517fbb8a6a4669ba250d26cd7a459eca9d215f8307e33aebe50379bc5a3617ec34468a018054918c16918d1691909117905593517fbb8a6a4669ba250d26cd7a459eca9d215f8307e33aebe50379bc5a3617ec344789018054918b1691909b1617909955517fbb8a6a4669ba250d26cd7a459eca9d215f8307e33aebe50379bc5a3617ec3448909601805492511515600160a01b026001600160a81b031990931696909716959095171790945584526013905292909120805460ff19169091179055909150156114b7578060128581548110611bcf57611bcf6131d8565b60009182526020909120600590910201600490810180546001600160a01b0319166001600160a01b03938416179055604051637d1cb25960e11b815283831691810191909152600160248201527f00000000000000000000000000000000000000000000000000000000000000009091169063fa3964b290604401600060405180830381600087803b158015611c6457600080fd5b505af1158015611c78573d6000803e3d6000fd5b505060075460405163b84614a560e01b81526001600160a01b03858116600483015260016024830152909116925063b84614a59150604401600060405180830381600087803b158015611cca57600080fd5b505af1158015611cde573d6000803e3d6000fd5b50505050506001979650505050505050565b60008060128381548110611d0657611d066131d8565b60009182526020909120600460059092020101546001600160a01b03169050338114611d445760405162461bcd60e51b815260040161082d906131b9565b600060128481548110611d5957611d596131d8565b60009182526020822060059190910201600201546040516001600160a01b03858116602483015290911692507fbdf9811664f53779574e5d0027299590a75c0dec0ae32053c021cdb4e3844f679060440160408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051635b0e93fb60e11b81529091506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063b61d27f690611e2f90859060009086906004016132c8565b6000604051808303816000875af1158015611e4e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611e76919081019061330e565b5060019695505050505050565b6004546001600160a01b03163314611ead5760405162461bcd60e51b815260040161082d906131b9565b600e546001600160a01b0316611eee57600e80546001600160a01b038085166001600160a01b031992831617909255600d8054928416929091169190911790555b5050565b60008060128381548110611f0857611f086131d8565b60009182526020822060059190910201600101546040516370a0823160e01b81523360048201526001600160a01b03909116925082906370a0823190602401602060405180830381865afa158015611f64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f8891906131ee565b9050611f948482610fe1565b506001949350505050565b6004546001600160a01b03163314611fc95760405162461bcd60e51b815260040161082d906131b9565b600a80546001600160a01b0319166001600160a01b0392909216919091179055565b600b546000906001600160a01b031633146120185760405162461bcd60e51b815260040161082d906131b9565b60005b848110156112c7577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316635d7e9bcb878784818110612064576120646131d8565b90506020020160208101906120799190612ea0565b86868581811061208b5761208b6131d8565b6040516001600160e01b031960e087901b1681526001600160a01b0390941660048501526020029190910135602483015250604401600060405180830381600087803b1580156120da57600080fd5b505af11580156120ee573d6000803e3d6000fd5b5050505080806120fd9061321d565b91505061201b565b601154600090600160a01b900460ff161561214d5760405162461bcd60e51b815260206004820152600860248201526739b43aba3237bbb760c11b604482015260640161082d565b612156826126da565b506001919050565b600b546000906001600160a01b0316331461218b5760405162461bcd60e51b815260040161082d906131b9565b6001600160a01b03831673e478de485ad2fe566d49342cbd03e49ed7db335614806121d257506001600160a01b03831673bcff8b0b9419b9a88c44546519b1e909cf330399145b61220a5760405162461bcd60e51b815260206004820152600960248201526810bb37ba32a0b2323960b91b604482015260640161082d565b604051637166ea1560e11b8152600481018590526001600160a01b03848116602483015283151560448301527f0000000000000000000000000000000000000000000000000000000000000000169063e2cdd42a90606401600060405180830381600087803b1580156114a357600080fd5b6005546001600160a01b031633146122a65760405162461bcd60e51b815260040161082d906131b9565b600c80546001600160a01b0319166001600160a01b0392909216919091179055565b6000601285815481106122dd576122dd6131d8565b60009182526020909120600590910201805460028201546001830154604051632770a7eb60e21b81526001600160a01b038881166004830152602482018a905294955092841693918216929116908190639dc29fac90604401600060405180830381600087803b15801561235057600080fd5b505af1158015612364573d6000803e3d6000fd5b505050506004840154600160a01b900460ff1661240657604051636ce5768960e11b81526001600160a01b0384811660048301528381166024830152604482018990527f0000000000000000000000000000000000000000000000000000000000000000169063d9caed1290606401600060405180830381600087803b1580156123ed57600080fd5b505af1158015612401573d6000803e3d6000fd5b505050505b60048401546001600160a01b0316801580159061242d5750601154600160a01b900460ff16155b801561244557506004850154600160a01b900460ff16155b156124b057806001600160a01b031663b87bd4816040518163ffffffff1660e01b81526004016020604051808303816000875af115801561248a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124ae9190613236565b505b6124c46001600160a01b038516878a612513565b88866001600160a01b03167f92ccf450a286a957af52509bc1c9939d1a6a481783e142e41e2499f0bb66ebc68a60405161250091815260200190565b60405180910390a3505050505050505050565b6040516001600160a01b03831660248201526044810182905261257690849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612c14565b505050565b6040516001600160a01b03808516602483015283166044820152606481018290526125b39085906323b872dd60e01b9060840161253f565b50505050565b8015806126335750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e90604401602060405180830381865afa15801561260d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061263191906131ee565b155b61269e5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b606482015260840161082d565b6040516001600160a01b03831660248201526044810182905261257690849063095ea7b360e01b9060640161253f565b60006108be82846133d1565b6000601282815481106126ef576126ef6131d8565b600091825260209091206005909102016004810154909150600160a01b900460ff161561274f5760405162461bcd60e51b815260206004820152600e60248201526d1c1bdbdb081a5cc818db1bdcd95960921b604482015260640161082d565b6002810154604051631ff4de0360e11b81526001600160a01b0391821660048201819052917f00000000000000000000000000000000000000000000000000000000000000001690633fe9bc06906024016020604051808303816000875af11580156127bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127e391906131ee565b5060048201546001600160a01b031680156128c357806001600160a01b031663372500ab6040518163ffffffff1660e01b81526004016020604051808303816000875af1158015612838573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061285c9190613236565b50806001600160a01b031663ca8b01766040518163ffffffff1660e01b81526004016020604051808303816000875af115801561289d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128c19190613236565b505b6040516370a0823160e01b815230600482015260009073ba100000625a3754423978a60c9317c58a424e3d906370a0823190602401602060405180830381865afa158015612915573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061293991906131ee565b905080156115b757600061296461271061295e60005485612ce690919063ffffffff16565b90612cf2565b9050600061298361271061295e60015486612ce690919063ffffffff16565b905060006129a261271061295e60025487612ce690919063ffffffff16565b600c549091506001600160a01b0316158015906129ca5750600c546001600160a01b03163014155b80156129d857506000600354115b15612a375760006129fa61271061295e60035488612ce690919063ffffffff16565b9050612a068582612cfe565b600c54909550612a359073ba100000625a3754423978a60c9317c58a424e3d906001600160a01b031683612513565b505b612a4d82612a4783818888612cfe565b90612cfe565b9350612a6e73ba100000625a3754423978a60c9317c58a424e3d3383612513565b60038701546001600160a01b0316612a9b73ba100000625a3754423978a60c9317c58a424e3d8287612513565b60405163590a41f560e01b8152600481018690526001600160a01b0382169063590a41f590602401600060405180830381600087803b158015612add57600080fd5b505af1158015612af1573d6000803e3d6000fd5b5050600e54612b21925073ba100000625a3754423978a60c9317c58a424e3d91506001600160a01b031686612513565b600e5460405163590a41f560e01b8152600481018690526001600160a01b039091169063590a41f590602401600060405180830381600087803b158015612b6757600080fd5b505af1158015612b7b573d6000803e3d6000fd5b5050600d54612bab925073ba100000625a3754423978a60c9317c58a424e3d91506001600160a01b031685612513565b600d5460405163590a41f560e01b8152600481018590526001600160a01b039091169063590a41f590602401600060405180830381600087803b158015612bf157600080fd5b505af1158015612c05573d6000803e3d6000fd5b50505050505050505050505050565b6000612c69826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612d0a9092919063ffffffff16565b8051909150156125765780806020019051810190612c879190613236565b6125765760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161082d565b60006108be82846133e9565b60006108be8284613408565b60006108be828461342a565b6060612d198484600085612d21565b949350505050565b606082471015612d825760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161082d565b6001600160a01b0385163b612dd95760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161082d565b600080866001600160a01b03168587604051612df59190613441565b60006040518083038185875af1925050503d8060008114612e32576040519150601f19603f3d011682016040523d82523d6000602084013e612e37565b606091505b5091509150612e47828286612e52565b979650505050505050565b60608315612e615750816108be565b825115612e715782518084602001fd5b8160405162461bcd60e51b815260040161082d919061345d565b6001600160a01b0381168114610bed57600080fd5b600060208284031215612eb257600080fd5b81356108be81612e8b565b600080600060608486031215612ed257600080fd5b83359250602084013591506040840135612eeb81612e8b565b809150509250925092565b600060208284031215612f0857600080fd5b5035919050565b8015158114610bed57600080fd5b600080600060608486031215612f3257600080fd5b83359250602084013591506040840135612eeb81612f0f565b60008060408385031215612f5e57600080fd5b50508035926020909101359150565b60008060408385031215612f8057600080fd5b823591506020830135612f9281612f0f565b809150509250929050565b60008060408385031215612fb057600080fd5b823591506020830135612f9281612e8b565b60008060008060808587031215612fd857600080fd5b5050823594602084013594506040840135936060013592509050565b60008060006060848603121561300957600080fd5b83359250602084013561301b81612e8b565b929592945050506040919091013590565b60008060006060848603121561304157600080fd5b833561304c81612e8b565b9250602084013561305c81612e8b565b91506040840135612eeb81612e8b565b60008060006060848603121561308157600080fd5b833561308c81612e8b565b9250602084013561301b81612e8b565b600080604083850312156130af57600080fd5b82356130ba81612e8b565b91506020830135612f9281612e8b565b60008083601f8401126130dc57600080fd5b50813567ffffffffffffffff8111156130f457600080fd5b6020830191508360208260051b850101111561310f57600080fd5b9250929050565b6000806000806040858703121561312c57600080fd5b843567ffffffffffffffff8082111561314457600080fd5b613150888389016130ca565b9096509450602087013591508082111561316957600080fd5b50613176878288016130ca565b95989497509550505050565b60008060006060848603121561319757600080fd5b8335925060208401356131a981612e8b565b91506040840135612eeb81612f0f565b602080825260059082015264042c2eae8d60db1b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561320057600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b60006001820161322f5761322f613207565b5060010190565b60006020828403121561324857600080fd5b81516108be81612f0f565b60006020828403121561326557600080fd5b81516108be81612e8b565b60005b8381101561328b578181015183820152602001613273565b838111156125b35750506000910152565b600081518084526132b4816020860160208601613270565b601f01601f19169290920160200192915050565b60018060a01b03841681528260208201526060604082015260006132ef606083018461329c565b95945050505050565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561332157600080fd5b825161332c81612f0f565b602084015190925067ffffffffffffffff8082111561334a57600080fd5b818501915085601f83011261335e57600080fd5b815181811115613370576133706132f8565b604051601f8201601f19908116603f01168101908382118183101715613398576133986132f8565b816040528281528860208487010111156133b157600080fd5b6133c2836020830160208801613270565b80955050505050509250929050565b600082198211156133e4576133e4613207565b500190565b600081600019048311821515161561340357613403613207565b500290565b60008261342557634e487b7160e01b600052601260045260246000fd5b500490565b60008282101561343c5761343c613207565b500390565b60008251613453818460208701613270565b9190910192915050565b6020815260006108be602083018461329c56fea2646970667358221220003efd5ea555e6131ed9469ee2bd36266addda96a648598bc19a7cddb948dd3564736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "poolLength()": {
        "notice": "END SETTER SECTION ///"
      },
      "setOwner(address)": {
        "notice": "SETTER SECTION ///"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3988,
        "contract": "contracts/Controller.sol:Controller",
        "label": "lockIncentive",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 3991,
        "contract": "contracts/Controller.sol:Controller",
        "label": "stakerIncentive",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 3994,
        "contract": "contracts/Controller.sol:Controller",
        "label": "earmarkIncentive",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 3997,
        "contract": "contracts/Controller.sol:Controller",
        "label": "platformFee",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 4005,
        "contract": "contracts/Controller.sol:Controller",
        "label": "owner",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 4007,
        "contract": "contracts/Controller.sol:Controller",
        "label": "feeManager",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 4009,
        "contract": "contracts/Controller.sol:Controller",
        "label": "poolManager",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 4015,
        "contract": "contracts/Controller.sol:Controller",
        "label": "rewardFactory",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 4017,
        "contract": "contracts/Controller.sol:Controller",
        "label": "stashFactory",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 4019,
        "contract": "contracts/Controller.sol:Controller",
        "label": "tokenFactory",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 4021,
        "contract": "contracts/Controller.sol:Controller",
        "label": "rewardArbitrator",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 4023,
        "contract": "contracts/Controller.sol:Controller",
        "label": "voteDelegate",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 4025,
        "contract": "contracts/Controller.sol:Controller",
        "label": "treasury",
        "offset": 0,
        "slot": "12",
        "type": "t_address"
      },
      {
        "astId": 4027,
        "contract": "contracts/Controller.sol:Controller",
        "label": "stakerRewards",
        "offset": 0,
        "slot": "13",
        "type": "t_address"
      },
      {
        "astId": 4029,
        "contract": "contracts/Controller.sol:Controller",
        "label": "lockRewards",
        "offset": 0,
        "slot": "14",
        "type": "t_address"
      },
      {
        "astId": 4031,
        "contract": "contracts/Controller.sol:Controller",
        "label": "lockFees",
        "offset": 0,
        "slot": "15",
        "type": "t_address"
      },
      {
        "astId": 4033,
        "contract": "contracts/Controller.sol:Controller",
        "label": "feeDistro",
        "offset": 0,
        "slot": "16",
        "type": "t_address"
      },
      {
        "astId": 4035,
        "contract": "contracts/Controller.sol:Controller",
        "label": "feeToken",
        "offset": 0,
        "slot": "17",
        "type": "t_address"
      },
      {
        "astId": 4037,
        "contract": "contracts/Controller.sol:Controller",
        "label": "isShutdown",
        "offset": 20,
        "slot": "17",
        "type": "t_bool"
      },
      {
        "astId": 4054,
        "contract": "contracts/Controller.sol:Controller",
        "label": "poolInfo",
        "offset": 0,
        "slot": "18",
        "type": "t_array(t_struct(PoolInfo)4050_storage)dyn_storage"
      },
      {
        "astId": 4058,
        "contract": "contracts/Controller.sol:Controller",
        "label": "gaugeMap",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(PoolInfo)4050_storage)dyn_storage": {
        "base": "t_struct(PoolInfo)4050_storage",
        "encoding": "dynamic_array",
        "label": "struct Controller.PoolInfo[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_struct(PoolInfo)4050_storage": {
        "encoding": "inplace",
        "label": "struct Controller.PoolInfo",
        "members": [
          {
            "astId": 4039,
            "contract": "contracts/Controller.sol:Controller",
            "label": "lptoken",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 4041,
            "contract": "contracts/Controller.sol:Controller",
            "label": "token",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 4043,
            "contract": "contracts/Controller.sol:Controller",
            "label": "gauge",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 4045,
            "contract": "contracts/Controller.sol:Controller",
            "label": "balRewards",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 4047,
            "contract": "contracts/Controller.sol:Controller",
            "label": "stash",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 4049,
            "contract": "contracts/Controller.sol:Controller",
            "label": "shutdown",
            "offset": 20,
            "slot": "4",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}