{
  "address": "0x9D2Bfc794F8e5f8Dc911499049aeCf46E74c58A7",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token_addr",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_authorizer_adaptor",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "locktime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int128",
          "name": "type_",
          "type": "int128"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ts",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "prevSupply",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "supply",
          "type": "uint256"
        }
      ],
      "name": "Supply",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ts",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "NAME",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SYMBOL",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "apply_smart_wallet_checker",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_t",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_block",
          "type": "uint256"
        }
      ],
      "name": "balanceOfAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "checkpoint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "commit_smart_wallet_checker",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokens",
          "type": "uint256"
        }
      ],
      "name": "create_lock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "deposit_for",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "epoch",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "future_smart_wallet_checker",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "get_last_user_slope",
      "outputs": [
        {
          "internalType": "int128",
          "name": "",
          "type": "int128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "increase_amount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_unlock_time",
          "type": "uint256"
        }
      ],
      "name": "increase_unlock_time",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "locked",
      "outputs": [
        {
          "internalType": "int128",
          "name": "amount",
          "type": "int128"
        },
        {
          "internalType": "uint256",
          "name": "end",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "locked__end",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "point_history",
      "outputs": [
        {
          "internalType": "int128",
          "name": "bias",
          "type": "int128"
        },
        {
          "internalType": "int128",
          "name": "slope",
          "type": "int128"
        },
        {
          "internalType": "uint256",
          "name": "ts",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "blk",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "slope_changes",
      "outputs": [
        {
          "internalType": "int128",
          "name": "",
          "type": "int128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "smart_wallet_checker",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "t",
          "type": "uint256"
        }
      ],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_block",
          "type": "uint256"
        }
      ],
      "name": "totalSupplyAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "user_point_epoch",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_idx",
          "type": "uint256"
        }
      ],
      "name": "user_point_history__ts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe4b61f15c88e17b7b04b465adbd6c0b3238380df70736b7be6cdda0e01ee37e0",
  "receipt": {
    "to": null,
    "from": "0xEFc3a819695932394D89b8AF6f49e0D89EDf9A40",
    "contractAddress": "0x9D2Bfc794F8e5f8Dc911499049aeCf46E74c58A7",
    "transactionIndex": 107,
    "gasUsed": "872050",
    "logsBloom": "0x
    "blockHash": "0x3c1de98a2bdb7941e9b56df71d7567fea77f5e8d9398d98992c6dd8995a2e4d5",
    "transactionHash": "0xe4b61f15c88e17b7b04b465adbd6c0b3238380df70736b7be6cdda0e01ee37e0",
    "logs": [],
    "blockNumber": 10642383,
    "cumulativeGasUsed": "22792763",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x1A4B29cB74FB2A8f549002ABB1953a1b93A07f51",
    "veBalMock",
    "VBM",
    "0xEFc3a819695932394D89b8AF6f49e0D89EDf9A40"
  ],
  "solcInputHash": "a30e732298cffd13029ce67a93a326ae",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_addr\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_authorizer_adaptor\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"locktime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int128\",\"name\":\"type_\",\"type\":\"int128\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ts\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"}],\"name\":\"Supply\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ts\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"NAME\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SYMBOL\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"apply_smart_wallet_checker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_t\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"balanceOfAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkpoint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"commit_smart_wallet_checker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"create_lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"deposit_for\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"future_smart_wallet_checker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"get_last_user_slope\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"increase_amount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_unlock_time\",\"type\":\"uint256\"}],\"name\":\"increase_unlock_time\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"locked\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"amount\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"locked__end\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"point_history\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"bias\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"slope\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"ts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blk\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"slope_changes\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"smart_wallet_checker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"t\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_block\",\"type\":\"uint256\"}],\"name\":\"totalSupplyAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"user_point_epoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_idx\",\"type\":\"uint256\"}],\"name\":\"user_point_history__ts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/test/veBalMock.sol\":\"veBalMock\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"contracts/test/veBalMock.sol\":{\"content\":\"//mock of vebal contract from mainnet\\n//by address 0xC128a9954e6c874eA3d62ce62B468bA073093F25\\n\\n// solium-disable linebreak-style\\npragma solidity 0.8.13;\\n\\n// import \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\ninterface BAL_ERC20 { //was just ERC20 in their Vyper contract\\n    function decimals() external view returns (uint256);\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function transfer(address to, uint256 amount) external returns (bool); //nonpayable\\n    function transferFrom(address spender, address to, uint256 amount) external returns (bool); //nonpayable\\n}\\n// Interface for checking whether address belongs to a whitelisted\\n// type of a smart wallet.\\n// When new types are added - the whole contract is changed\\n// The check() method is modifying to be able to use caching\\n// for individual wallet addresses \\ninterface SmartWalletChecker {\\n    function check(address addr) external returns (bool);//nonpayable\\n}   \\n\\n// contract BalMock is ERC20, ReentrancyGuard, SmartWalletChecker, BALERC20 {\\ncontract veBalMock is ReentrancyGuard {\\n// contract BalMock is BAL_ERC20, SmartWalletChecker{//}, ReentrancyGuard {\\n\\n    struct Point{\\n        int128 bias;\\n        int128 slope; // - dweight / dt\\n        uint256 ts;\\n        uint256 blk; // block\\n    }\\n    // We cannot really do block numbers per se b/c slope is per time, not per block\\n    // and per block could be fairly bad b/c Ethereum changes blocktimes.\\n    // What we can do is to extrapolate ***At functions\\n\\n    struct LockedBalance{\\n        int128 amount; \\n        uint256 end;\\n    }  \\n\\n    address constant ZERO_ADDRESS = address(0x0000000000000000000000000000000000000000);\\n\\n    int128 constant DEPOSIT_FOR_TYPE = 0;\\n    int128 constant CREATE_LOCK_TYPE = 1;\\n    int128 constant INCREASE_LOCK_AMOUNT = 2;\\n    int128 constant INCREASE_UNLOCK_TIME = 3;\\n\\n    event Deposit(address indexed provider, uint256 value, uint256 indexed locktime, int128 type_, uint256 ts); //if just type without _ --> was highlited as error\\n    event Withdraw(address indexed provider, uint256 value, uint256 ts);\\n    event Supply(uint256 prevSupply, uint256 supply);\\n\\n    uint256 constant WEEK = 7 * 86400; //all future times are rounded by week\\n    uint256 constant MAXTIME = 365 * 86400;  // 1 year\\n    uint256 constant MULTIPLIER = 10 ** 18;\\n\\n\\n    address immutable TOKEN; \\n    address immutable AUTHORIZER_ADAPTOR; //Authorizer Adaptor\\n\\n    //string is not succorted to be immutable in solidity\\n    string public NAME; //immutable NAME;\\n    string public SYMBOL; //immutable SYMBOL; \\n    uint256 immutable DECIMALS;\\n\\n    // uint256 public supply;\\n    mapping(address => uint256) supply;\\n    uint256 private _totalSupply;\\n\\n    mapping(address => LockedBalance) public locked;\\n\\n    uint256 public epoch;\\n\\n    Point[100000000000000000000000000000] public point_history; //epoch -> unsigned point\\n    mapping(address => Point[1000000000]) private user_point_history; //user -> Point[user_epoch]\\n    mapping(address => uint256) public user_point_epoch;\\n    mapping(uint256 => int128) public slope_changes; //time -> signed slope change\\n\\n    // Checker for whitelisted (smart contract) wallets which are allowed to deposit\\n    // The goal is to prevent tokenizing the escrow\\n    address public future_smart_wallet_checker;\\n    address public smart_wallet_checker;\\n\\n\\n    //__init__\\n    constructor(\\n        address token_addr,\\n        string memory _name,\\n        string memory  _symbol,\\n        address _authorizer_adaptor\\n    ) //ERC20(_name, _symbol)\\n    public {\\n        /**\\n        @notice Contract constructor\\n        @param token_addr 80/20 BAL-WETH BPT token address\\n        @param _name Token name\\n        @param _symbol Token symbol\\n        @param _authorizer_adaptor `AuthorizerAdaptor` contract address\\n        */\\n        require(_authorizer_adaptor != ZERO_ADDRESS, \\\"BalMock: _authorizer_adaptor == ZERO_ADDRESS\\\");\\n\\n        TOKEN = token_addr;\\n        AUTHORIZER_ADAPTOR = _authorizer_adaptor;\\n        point_history[0].blk = block.number;\\n        point_history[0].ts = block.timestamp;\\n\\n        uint256 _decimals = BAL_ERC20(token_addr).decimals();\\n        require(_decimals <= 255, \\\"BalMock: _decimals > 255\\\");\\n\\n        NAME = _name;\\n        SYMBOL = _symbol;\\n        DECIMALS = _decimals;\\n    }\\n\\n\\n    function token() external view returns (address){\\n        return TOKEN;\\n    }\\n    function name() public view virtual returns (string memory){\\n        return NAME;\\n    }\\n    function symbol() public view virtual returns (string memory){\\n        return SYMBOL;\\n    }\\n    function decimals() public view virtual returns (uint256){\\n        return DECIMALS;\\n    }\\n    function admin() external view returns (address){\\n        return AUTHORIZER_ADAPTOR;\\n    }\\n    function commit_smart_wallet_checker(address addr) external {}\\n    function apply_smart_wallet_checker() external {}\\n    function assert_not_contract(address addr) internal {}    \\n    function get_last_user_slope(address addr) external view returns (int128){\\n        /**\\n        @notice Get the most recently recorded rate of voting power decrease for `addr`\\n        @param addr Address of the user wallet\\n        @return Value of the slope\\n        */\\n        uint256 uepoch = user_point_epoch[addr];\\n        return user_point_history[addr][uepoch].slope;\\n    }\\n    function user_point_history__ts(address _addr, uint256 _idx) external view returns (uint256){\\n        /**\\n        @notice Get the timestamp for checkpoint `_idx` for `_addr`\\n        @param _addr User wallet address\\n        @param _idx User epoch number\\n        @return Epoch time of the checkpoint\\n    */\\n        return user_point_history[_addr][_idx].ts;\\n    }\\n    function locked__end(address _addr) external view returns (uint256){\\n        /**\\n        @notice Get timestamp when `_addr`'s lock finishes\\n        @param _addr User wallet\\n        @return Epoch time of the lock end\\n        */\\n        return locked[_addr].end;\\n    }\\n\\n// FROM ERC20\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        supply[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n// FROM ERC20 END\\n\\n    function _checkpoint(address addr, LockedBalance memory old_locked, LockedBalance memory new_locked) internal {}\\n    function _deposit_for(address _addr, uint256 _value, uint256 unlock_time, LockedBalance memory locked_balance, int128 type_) internal {}\\n    function checkpoint() external {}\\n    function deposit_for(address _addr, uint256 _value) external nonReentrant {\\n        _mint(_addr, _value);\\n    }\\n\\n    function create_lock(uint256 tokens) external nonReentrant {\\n        _mint(msg.sender, tokens);\\n        // BAL_ERC20(TOKEN).transferFrom(msg.sender, tokens);\\n    }\\n\\n    function increase_amount(uint256) external nonReentrant {}\\n    function increase_unlock_time(uint256 _unlock_time) external nonReentrant {}\\n    function withdraw() external nonReentrant {}\\n\\n    // The following ERC20/minime-compatible methods are not real balanceOf and supply!\\n    // They measure the weights for the purpose of voting, so they don't represent\\n    // real coins.\\n\\n    function find_block_epoch(uint256 _block, uint256 max_epoch) internal view returns (uint256){\\n        /**\\n        @notice Binary search to find epoch containing block number\\n        @param _block Block to find\\n        @param max_epoch Don't go beyond this epoch\\n        @return Epoch which contains _block\\n        */\\n\\n        // Binary search\\n        uint256 _min = 0;\\n        uint256 _max = max_epoch;\\n        //some code\\n\\n        return _min;\\n    }\\n    function find_timestamp_epoch(uint256 _timestamp, uint256 max_epoch) internal view returns (uint256){\\n        /**\\n        @notice Binary search to find epoch for timestamp\\n        @param _timestamp timestamp to find\\n        @param max_epoch Don't go beyond this epoch\\n        @return Epoch which contains _timestamp\\n        */\\n\\n        // Binary search\\n        uint256 _min = 0;\\n        uint256 _max = max_epoch;\\n        //some code\\n        \\n        return _min;\\n    }\\n    function find_block_user_epoch(address addr, uint256 _block, uint256 max_epoch) internal view returns (uint256){\\n        /**\\n        @notice Binary search to find epoch for block number\\n        @param _addr User for which to find user epoch for\\n        @param _block Block to find\\n        @param max_epoch Don't go beyond this epoch\\n        @return Epoch which contains _block\\n        */\\n\\n        // Binary search\\n        uint256 _min = 0;\\n        uint256 _max = max_epoch;\\n        //some code\\n        \\n        return _min;\\n    }\\n    function find_timestamp_user_epoch(address addr, uint256 _timestamp, uint256 max_epoch) internal view returns (uint256){\\n        /**\\n        @notice Binary search to find user epoch for timestamp\\n        @param _addr User for which to find user epoch for\\n        @param _timestamp timestamp to find\\n        @param max_epoch Don't go beyond this epoch\\n        @return Epoch which contains _timestamp\\n        */\\n\\n        // Binary search\\n        uint256 _min = 0;\\n        uint256 _max = max_epoch;\\n        //some code\\n        \\n        return _min;\\n    }\\n    function balanceOf(address addr, uint256 _t) external view returns (uint256){\\n        /**\\n        @notice Get the current voting power for `msg.sender`\\n        @dev Adheres to the ERC20 `balanceOf` interface for Aragon compatibility\\n        @param addr User wallet address\\n        @param _t Epoch time to return voting power at\\n        @return User voting power\\n        */\\n        uint256 _t = block.timestamp;\\n\\n        //some code and actual rerurn is not 1\\n        return 1;\\n    }\\n    function balanceOfAt(address addr, uint256 _block) external view returns (uint256){\\n        //some code and actual rerurn is not 1\\n        return 1;\\n    }\\n    function supply_at(Point memory p, uint256 t) internal view returns (uint256){\\n        //some code and actual rerurn is not 1\\n        return 1;    \\n    }\\n    function totalSupply(uint256 t) external view returns (uint256){\\n        uint256 t = block.timestamp;\\n        //some code and actual rerurn is not 1\\n        return 1;    \\n    }\\n    function totalSupplyAt(uint256 _block) external view returns (uint256){\\n        /**\\n        @notice Calculate total voting power at some point in the past\\n        @param _block Block to calculate the total voting power at\\n        @return Total voting power at `_block`\\n        */\\n\\n        require(_block <= block.number, \\\"_block > block.number\\\");\\n        uint256 _epoch = epoch;\\n        uint256 target_epoch = find_block_epoch(_block, _epoch);\\n\\n        Point memory point = point_history[target_epoch];\\n        uint256 dt = 0;\\n        if (target_epoch < _epoch){\\n            Point memory point_next = point_history[target_epoch + 1];\\n            if (point.blk != point_next.blk){\\n                dt = (_block - point.blk) * (point_next.ts - point.ts) / (point_next.blk - point.blk);\\n            }\\n        }else{\\n            if (point.blk != block.number){\\n                dt = (_block - point.blk) * (block.timestamp - point.ts) / (block.number - point.blk);\\n            }\\n        }\\n        // Now dt contains info on how far are we beyond point\\n\\n        return supply_at(point, point.ts + dt);\\n\\n        //some code and actual return is not 1\\n        // return 1; \\n    }\\n\\n}\\n\\n\\n\",\"keccak256\":\"0x8df5e59256315fba846eed57deb168b84647d02ddae6bfae3dc7a4cf66ae6653\"}},\"version\":1}",
  "bytecode": "0x60e06040523480156200001157600080fd5b50604051620010cb380380620010cb83398101604081905262000034916200034c565b60016000556001600160a01b038116620000aa5760405162461bcd60e51b815260206004820152602c60248201527f42616c4d6f636b3a205f617574686f72697a65725f61646170746f72203d3d2060448201526b5a45524f5f4144445245535360a01b60648201526084015b60405180910390fd5b6001600160a01b03848116608081905290821660a05243600955426008556040805163313ce56760e01b815290516000929163313ce5679160048083019260209291908290030181865afa15801562000107573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200012d9190620003dc565b905060ff811115620001825760405162461bcd60e51b815260206004820152601860248201527f42616c4d6f636b3a205f646563696d616c73203e2032353500000000000000006044820152606401620000a1565b835162000197906001906020870190620001bc565b508251620001ad906002906020860190620001bc565b5060c052506200043292505050565b828054620001ca90620003f6565b90600052602060002090601f016020900481019282620001ee576000855562000239565b82601f106200020957805160ff191683800117855562000239565b8280016001018555821562000239579182015b82811115620002395782518255916020019190600101906200021c565b50620002479291506200024b565b5090565b5b808211156200024757600081556001016200024c565b80516001600160a01b03811681146200027a57600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b600082601f830112620002a757600080fd5b81516001600160401b0380821115620002c457620002c46200027f565b604051601f8301601f19908116603f01168101908282118183101715620002ef57620002ef6200027f565b816040528381526020925086838588010111156200030c57600080fd5b600091505b8382101562000330578582018301518183018401529082019062000311565b83821115620003425760008385830101525b9695505050505050565b600080600080608085870312156200036357600080fd5b6200036e8562000262565b60208601519094506001600160401b03808211156200038c57600080fd5b6200039a8883890162000295565b94506040870151915080821115620003b157600080fd5b50620003c08782880162000295565b925050620003d16060860162000262565b905092959194509250565b600060208284031215620003ef57600080fd5b5051919050565b600181811c908216806200040b57607f821691505b6020821081036200042c57634e487b7160e01b600052602260045260246000fd5b50919050565b60805160a05160c051610c6962000462600039600061023f0152600061045b015260006104810152610c696000f3fe608060405234801561001057600080fd5b50600436106101ce5760003560e01c8063900cf0cf11610104578063cbf9fe5f116100a2578063f76f8d7811610071578063f76f8d7814610451578063f851a44014610459578063fc0c546a1461047f578063ffc9514d146104a557600080fd5b8063cbf9fe5f146103bb578063d1febfb914610403578063da020a181461043e578063eff7a6121461028057600080fd5b8063a3f4df7e116100de578063a3f4df7e14610373578063adc635891461037b578063bd85b039146103a7578063c2c4c5c11461027657600080fd5b8063900cf0cf1461034f57806395d89b4114610358578063981b24d01461036057600080fd5b80634ee2cd7e116101715780637175d4f71161014b5780637175d4f7146102e65780637c74a1741461031d5780638e5b490f146102765780638ff36fd11461033057600080fd5b80634ee2cd7e146101d357806357f901e21461029357806371197484146102a457600080fd5b8063313ce567116101ad578063313ce5671461023d5780633a46273e146102635780633ccfd60b146102785780634957677c1461028057600080fd5b8062fdd58e146101d3578063010ae757146101fc57806306fdde0314610228575b600080fd5b6101e96101e1366004610a6c565b600192915050565b6040519081526020015b60405180910390f35b6101e961020a366004610a96565b6c03c95a2f0b4856475fe00000086020526000908152604090205481565b6102306104b8565b6040516101f39190610ab8565b7f00000000000000000000000000000000000000000000000000000000000000006101e9565b610276610271366004610a6c565b61054a565b005b61027661058d565b61027661028e366004610b0d565b6105b6565b6102766102a1366004610a96565b50565b6102d36102b2366004610b0d565b6c03c95a2f0b4856475fe000000960205260009081526040902054600f0b81565b604051600f9190910b81526020016101f3565b6c03c95a2f0b4856475fe000000b54610305906001600160a01b031681565b6040516001600160a01b0390911681526020016101f3565b6102d361032b366004610a96565b6105e0565b6c03c95a2f0b4856475fe000000a54610305906001600160a01b031681565b6101e960065481565b610230610645565b6101e961036e366004610b0d565b610654565b61023061081d565b6101e9610389366004610a96565b6001600160a01b031660009081526005602052604090206001015490565b6101e96103b5366004610b0d565b50600190565b6103e96103c9366004610a96565b60056020526000908152604090208054600190910154600f9190910b9082565b60408051600f9390930b83526020830191909152016101f3565b610416610411366004610b0d565b6108ab565b60408051600f95860b81529390940b60208401529282015260608101919091526080016101f3565b6101e961044c366004610a6c565b6108ef565b610230610937565b7f0000000000000000000000000000000000000000000000000000000000000000610305565b7f0000000000000000000000000000000000000000000000000000000000000000610305565b6102766104b3366004610b0d565b610944565b6060600180546104c790610b26565b80601f01602080910402602001604051908101604052809291908181526020018280546104f390610b26565b80156105405780601f1061051557610100808354040283529160200191610540565b820191906000526020600020905b81548152906001019060200180831161052357829003601f168201915b5050505050905090565b6002600054036105755760405162461bcd60e51b815260040161056c90610b60565b60405180910390fd5b60026000556105848282610971565b50506001600055565b6002600054036105af5760405162461bcd60e51b815260040161056c90610b60565b6001600055565b6002600054036105d85760405162461bcd60e51b815260040161056c90610b60565b506001600055565b6001600160a01b03811660009081526c03c95a2f0b4856475fe000000860209081526040808320546c03c95a2f0b4856475fe0000007909252822081633b9aca00811061062f5761062f610b97565b6003020154600160801b9004600f0b9392505050565b6060600280546104c790610b26565b60004382111561069e5760405162461bcd60e51b81526020600482015260156024820152742fb13637b1b5901f10313637b1b597373ab6b132b960591b604482015260640161056c565b60065460408051608081018252600754600f81810b8352600160801b909104900b60208201526008549181019190915260095460608201526000908183156107b057600060076106ef856001610bc3565b6c01431e0fae6d7217caa0000000811061070b5761070b610b97565b60408051608081018252600392909202929092018054600f81810b8452600160801b909104900b60208301526001810154928201929092526002909101546060808301829052850151919250146107aa57826060015181606001516107709190610bdb565b836040015182604001516107849190610bdb565b6060850151610793908a610bdb565b61079d9190610bf2565b6107a79190610c11565b91505b506107ff565b438260600151146107ff5760608201516107ca9043610bdb565b60408301516107d99042610bdb565b60608401516107e89089610bdb565b6107f29190610bf2565b6107fc9190610c11565b90505b610813828284604001516101e19190610bc3565b9695505050505050565b6001805461082a90610b26565b80601f016020809104026020016040519081016040528092919081815260200182805461085690610b26565b80156108a35780601f10610878576101008083540402835291602001916108a3565b820191906000526020600020905b81548152906001019060200180831161088657829003601f168201915b505050505081565b6007816c01431e0fae6d7217caa000000081106108c757600080fd5b6003020180546001820154600290920154600f82810b9450600160801b90920490910b919084565b6001600160a01b03821660009081526c03c95a2f0b4856475fe00000076020526040812082633b9aca00811061092757610927610b97565b6003020160010154905092915050565b6002805461082a90610b26565b6002600054036109665760405162461bcd60e51b815260040161056c90610b60565b60026000556105d833825b6001600160a01b0382166109c75760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640161056c565b80600460008282546109d99190610bc3565b90915550506001600160a01b03821660009081526003602052604081208054839290610a06908490610bc3565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b80356001600160a01b0381168114610a6757600080fd5b919050565b60008060408385031215610a7f57600080fd5b610a8883610a50565b946020939093013593505050565b600060208284031215610aa857600080fd5b610ab182610a50565b9392505050565b600060208083528351808285015260005b81811015610ae557858101830151858201604001528201610ac9565b81811115610af7576000604083870101525b50601f01601f1916929092016040019392505050565b600060208284031215610b1f57600080fd5b5035919050565b600181811c90821680610b3a57607f821691505b602082108103610b5a57634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60008219821115610bd657610bd6610bad565b500190565b600082821015610bed57610bed610bad565b500390565b6000816000190483118215151615610c0c57610c0c610bad565b500290565b600082610c2e57634e487b7160e01b600052601260045260246000fd5b50049056fea264697066735822122013306a1025ac0f7d78c76b209a0d79401201ddc2f7241b10d40c3a21e5ee547464736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101ce5760003560e01c8063900cf0cf11610104578063cbf9fe5f116100a2578063f76f8d7811610071578063f76f8d7814610451578063f851a44014610459578063fc0c546a1461047f578063ffc9514d146104a557600080fd5b8063cbf9fe5f146103bb578063d1febfb914610403578063da020a181461043e578063eff7a6121461028057600080fd5b8063a3f4df7e116100de578063a3f4df7e14610373578063adc635891461037b578063bd85b039146103a7578063c2c4c5c11461027657600080fd5b8063900cf0cf1461034f57806395d89b4114610358578063981b24d01461036057600080fd5b80634ee2cd7e116101715780637175d4f71161014b5780637175d4f7146102e65780637c74a1741461031d5780638e5b490f146102765780638ff36fd11461033057600080fd5b80634ee2cd7e146101d357806357f901e21461029357806371197484146102a457600080fd5b8063313ce567116101ad578063313ce5671461023d5780633a46273e146102635780633ccfd60b146102785780634957677c1461028057600080fd5b8062fdd58e146101d3578063010ae757146101fc57806306fdde0314610228575b600080fd5b6101e96101e1366004610a6c565b600192915050565b6040519081526020015b60405180910390f35b6101e961020a366004610a96565b6c03c95a2f0b4856475fe00000086020526000908152604090205481565b6102306104b8565b6040516101f39190610ab8565b7f00000000000000000000000000000000000000000000000000000000000000006101e9565b610276610271366004610a6c565b61054a565b005b61027661058d565b61027661028e366004610b0d565b6105b6565b6102766102a1366004610a96565b50565b6102d36102b2366004610b0d565b6c03c95a2f0b4856475fe000000960205260009081526040902054600f0b81565b604051600f9190910b81526020016101f3565b6c03c95a2f0b4856475fe000000b54610305906001600160a01b031681565b6040516001600160a01b0390911681526020016101f3565b6102d361032b366004610a96565b6105e0565b6c03c95a2f0b4856475fe000000a54610305906001600160a01b031681565b6101e960065481565b610230610645565b6101e961036e366004610b0d565b610654565b61023061081d565b6101e9610389366004610a96565b6001600160a01b031660009081526005602052604090206001015490565b6101e96103b5366004610b0d565b50600190565b6103e96103c9366004610a96565b60056020526000908152604090208054600190910154600f9190910b9082565b60408051600f9390930b83526020830191909152016101f3565b610416610411366004610b0d565b6108ab565b60408051600f95860b81529390940b60208401529282015260608101919091526080016101f3565b6101e961044c366004610a6c565b6108ef565b610230610937565b7f0000000000000000000000000000000000000000000000000000000000000000610305565b7f0000000000000000000000000000000000000000000000000000000000000000610305565b6102766104b3366004610b0d565b610944565b6060600180546104c790610b26565b80601f01602080910402602001604051908101604052809291908181526020018280546104f390610b26565b80156105405780601f1061051557610100808354040283529160200191610540565b820191906000526020600020905b81548152906001019060200180831161052357829003601f168201915b5050505050905090565b6002600054036105755760405162461bcd60e51b815260040161056c90610b60565b60405180910390fd5b60026000556105848282610971565b50506001600055565b6002600054036105af5760405162461bcd60e51b815260040161056c90610b60565b6001600055565b6002600054036105d85760405162461bcd60e51b815260040161056c90610b60565b506001600055565b6001600160a01b03811660009081526c03c95a2f0b4856475fe000000860209081526040808320546c03c95a2f0b4856475fe0000007909252822081633b9aca00811061062f5761062f610b97565b6003020154600160801b9004600f0b9392505050565b6060600280546104c790610b26565b60004382111561069e5760405162461bcd60e51b81526020600482015260156024820152742fb13637b1b5901f10313637b1b597373ab6b132b960591b604482015260640161056c565b60065460408051608081018252600754600f81810b8352600160801b909104900b60208201526008549181019190915260095460608201526000908183156107b057600060076106ef856001610bc3565b6c01431e0fae6d7217caa0000000811061070b5761070b610b97565b60408051608081018252600392909202929092018054600f81810b8452600160801b909104900b60208301526001810154928201929092526002909101546060808301829052850151919250146107aa57826060015181606001516107709190610bdb565b836040015182604001516107849190610bdb565b6060850151610793908a610bdb565b61079d9190610bf2565b6107a79190610c11565b91505b506107ff565b438260600151146107ff5760608201516107ca9043610bdb565b60408301516107d99042610bdb565b60608401516107e89089610bdb565b6107f29190610bf2565b6107fc9190610c11565b90505b610813828284604001516101e19190610bc3565b9695505050505050565b6001805461082a90610b26565b80601f016020809104026020016040519081016040528092919081815260200182805461085690610b26565b80156108a35780601f10610878576101008083540402835291602001916108a3565b820191906000526020600020905b81548152906001019060200180831161088657829003601f168201915b505050505081565b6007816c01431e0fae6d7217caa000000081106108c757600080fd5b6003020180546001820154600290920154600f82810b9450600160801b90920490910b919084565b6001600160a01b03821660009081526c03c95a2f0b4856475fe00000076020526040812082633b9aca00811061092757610927610b97565b6003020160010154905092915050565b6002805461082a90610b26565b6002600054036109665760405162461bcd60e51b815260040161056c90610b60565b60026000556105d833825b6001600160a01b0382166109c75760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640161056c565b80600460008282546109d99190610bc3565b90915550506001600160a01b03821660009081526003602052604081208054839290610a06908490610bc3565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b80356001600160a01b0381168114610a6757600080fd5b919050565b60008060408385031215610a7f57600080fd5b610a8883610a50565b946020939093013593505050565b600060208284031215610aa857600080fd5b610ab182610a50565b9392505050565b600060208083528351808285015260005b81811015610ae557858101830151858201604001528201610ac9565b81811115610af7576000604083870101525b50601f01601f1916929092016040019392505050565b600060208284031215610b1f57600080fd5b5035919050565b600181811c90821680610b3a57607f821691505b602082108103610b5a57634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60008219821115610bd657610bd6610bad565b500190565b600082821015610bed57610bed610bad565b500390565b6000816000190483118215151615610c0c57610c0c610bad565b500290565b600082610c2e57634e487b7160e01b600052601260045260246000fd5b50049056fea264697066735822122013306a1025ac0f7d78c76b209a0d79401201ddc2f7241b10d40c3a21e5ee547464736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10,
        "contract": "contracts/test/veBalMock.sol:veBalMock",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 167,
        "contract": "contracts/test/veBalMock.sol:veBalMock",
        "label": "NAME",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 169,
        "contract": "contracts/test/veBalMock.sol:veBalMock",
        "label": "SYMBOL",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 175,
        "contract": "contracts/test/veBalMock.sol:veBalMock",
        "label": "supply",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 177,
        "contract": "contracts/test/veBalMock.sol:veBalMock",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 182,
        "contract": "contracts/test/veBalMock.sol:veBalMock",
        "label": "locked",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_struct(LockedBalance)102_storage)"
      },
      {
        "astId": 184,
        "contract": "contracts/test/veBalMock.sol:veBalMock",
        "label": "epoch",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 189,
        "contract": "contracts/test/veBalMock.sol:veBalMock",
        "label": "point_history",
        "offset": 0,
        "slot": "7",
        "type": "t_array(t_struct(Point)97_storage)100000000000000000000000000000_storage"
      },
      {
        "astId": 196,
        "contract": "contracts/test/veBalMock.sol:veBalMock",
        "label": "user_point_history",
        "offset": 0,
        "slot": "300000000000000000000000000007",
        "type": "t_mapping(t_address,t_array(t_struct(Point)97_storage)1000000000_storage)"
      },
      {
        "astId": 200,
        "contract": "contracts/test/veBalMock.sol:veBalMock",
        "label": "user_point_epoch",
        "offset": 0,
        "slot": "300000000000000000000000000008",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 204,
        "contract": "contracts/test/veBalMock.sol:veBalMock",
        "label": "slope_changes",
        "offset": 0,
        "slot": "300000000000000000000000000009",
        "type": "t_mapping(t_uint256,t_int128)"
      },
      {
        "astId": 206,
        "contract": "contracts/test/veBalMock.sol:veBalMock",
        "label": "future_smart_wallet_checker",
        "offset": 0,
        "slot": "300000000000000000000000000010",
        "type": "t_address"
      },
      {
        "astId": 208,
        "contract": "contracts/test/veBalMock.sol:veBalMock",
        "label": "smart_wallet_checker",
        "offset": 0,
        "slot": "300000000000000000000000000011",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Point)97_storage)100000000000000000000000000000_storage": {
        "base": "t_struct(Point)97_storage",
        "encoding": "inplace",
        "label": "struct veBalMock.Point[100000000000000000000000000000]",
        "numberOfBytes": "9600000000000000000000000000000"
      },
      "t_array(t_struct(Point)97_storage)1000000000_storage": {
        "base": "t_struct(Point)97_storage",
        "encoding": "inplace",
        "label": "struct veBalMock.Point[1000000000]",
        "numberOfBytes": "96000000000"
      },
      "t_int128": {
        "encoding": "inplace",
        "label": "int128",
        "numberOfBytes": "16"
      },
      "t_mapping(t_address,t_array(t_struct(Point)97_storage)1000000000_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct veBalMock.Point[1000000000])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Point)97_storage)1000000000_storage"
      },
      "t_mapping(t_address,t_struct(LockedBalance)102_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct veBalMock.LockedBalance)",
        "numberOfBytes": "32",
        "value": "t_struct(LockedBalance)102_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_int128)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => int128)",
        "numberOfBytes": "32",
        "value": "t_int128"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(LockedBalance)102_storage": {
        "encoding": "inplace",
        "label": "struct veBalMock.LockedBalance",
        "members": [
          {
            "astId": 99,
            "contract": "contracts/test/veBalMock.sol:veBalMock",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_int128"
          },
          {
            "astId": 101,
            "contract": "contracts/test/veBalMock.sol:veBalMock",
            "label": "end",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Point)97_storage": {
        "encoding": "inplace",
        "label": "struct veBalMock.Point",
        "members": [
          {
            "astId": 90,
            "contract": "contracts/test/veBalMock.sol:veBalMock",
            "label": "bias",
            "offset": 0,
            "slot": "0",
            "type": "t_int128"
          },
          {
            "astId": 92,
            "contract": "contracts/test/veBalMock.sol:veBalMock",
            "label": "slope",
            "offset": 16,
            "slot": "0",
            "type": "t_int128"
          },
          {
            "astId": 94,
            "contract": "contracts/test/veBalMock.sol:veBalMock",
            "label": "ts",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 96,
            "contract": "contracts/test/veBalMock.sol:veBalMock",
            "label": "blk",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}