{
  "address": "0x7E1583D22BAc3Aa20d590c5471EdCC42dc56636E",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "mintr_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "bal_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "veBal_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "gaugeController_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "bal",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gauge",
          "type": "address"
        }
      ],
      "name": "balanceOfPool",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gauge",
          "type": "address"
        }
      ],
      "name": "claimBal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_distroContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "claimFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gauge",
          "type": "address"
        }
      ],
      "name": "claimRewards",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_unlockTime",
          "type": "uint256"
        }
      ],
      "name": "createLock",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_gauge",
          "type": "address"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "execute",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gaugeController",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "increaseAmount",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "increaseTime",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "operator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "release",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_depositor",
          "type": "address"
        }
      ],
      "name": "setDepositor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        }
      ],
      "name": "setOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "setOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stash",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_status",
          "type": "bool"
        }
      ],
      "name": "setStashAccess",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "veBal",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_voteId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_votingAddress",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_support",
          "type": "bool"
        }
      ],
      "name": "vote",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gauge",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_weight",
          "type": "uint256"
        }
      ],
      "name": "voteGaugeWeight",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_gauge",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_gauge",
          "type": "address"
        }
      ],
      "name": "withdrawAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe5d2100e54e0c43a327f3d92bcbb647e143473ffa25da3e763c6e3f187202f8a",
  "receipt": {
    "to": null,
    "from": "0xEFc3a819695932394D89b8AF6f49e0D89EDf9A40",
    "contractAddress": "0x7E1583D22BAc3Aa20d590c5471EdCC42dc56636E",
    "transactionIndex": 36,
    "gasUsed": "1603044",
    "logsBloom": "0x
    "blockHash": "0x04c17194a20872b7815d56ea469ad4ae44b5e1f2f15e22a63fcd2a424a3492e2",
    "transactionHash": "0xe5d2100e54e0c43a327f3d92bcbb647e143473ffa25da3e763c6e3f187202f8a",
    "logs": [],
    "blockNumber": 10645425,
    "cumulativeGasUsed": "9392463",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xEFc3a819695932394D89b8AF6f49e0D89EDf9A40",
    "0x1A4B29cB74FB2A8f549002ABB1953a1b93A07f51",
    "0x9D2Bfc794F8e5f8Dc911499049aeCf46E74c58A7",
    "0xEFc3a819695932394D89b8AF6f49e0D89EDf9A40"
  ],
  "solcInputHash": "bd75603ac8a277dbfaeddf88f266bad8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"mintr_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bal_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"veBal_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"gaugeController_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"bal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"}],\"name\":\"balanceOfPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"}],\"name\":\"claimBal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_distroContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"claimFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"}],\"name\":\"claimRewards\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_unlockTime\",\"type\":\"uint256\"}],\"name\":\"createLock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gaugeController\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"increaseAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"increaseTime\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"release\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_depositor\",\"type\":\"address\"}],\"name\":\"setDepositor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stash\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setStashAccess\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"veBal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_voteId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_votingAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_support\",\"type\":\"bool\"}],\"name\":\"vote\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_weight\",\"type\":\"uint256\"}],\"name\":\"voteGaugeWeight\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"}],\"name\":\"withdrawAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/VoterProxy.sol\":\"VoterProxy\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"},\"contracts/VoterProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./utils/Interfaces.sol\\\";\\nimport \\\"./utils/MathUtil.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\ncontract VoterProxy {\\n    using SafeERC20 for IERC20;\\n    using Address for address;\\n    using SafeMath for uint256;\\n\\n    address public immutable mintr;\\n    address public immutable bal;\\n\\n    address public immutable veBal;\\n    address public immutable gaugeController;\\n\\n    address public owner;\\n    address public operator;\\n    address public depositor;\\n\\n    mapping(address => bool) private stashPool;\\n    mapping(address => bool) private protectedTokens;\\n\\n    constructor(\\n        address mintr_,\\n        address bal_,\\n        address veBal_,\\n        address gaugeController_\\n    ) public {\\n        owner = msg.sender;\\n\\n        mintr = mintr_;\\n        bal = bal_;\\n        veBal = veBal_;\\n        gaugeController = gaugeController_;\\n    }\\n\\n    function getName() external pure returns (string memory) {\\n        return \\\"CurveVoterProxy\\\";\\n    }\\n\\n    function setOwner(address _owner) external {\\n        require(msg.sender == owner, \\\"!auth\\\");\\n        owner = _owner;\\n    }\\n\\n    function setOperator(address _operator) external {\\n        require(msg.sender == owner, \\\"!auth\\\");\\n        require(\\n            operator == address(0) || IDeposit(operator).isShutdown() == true,\\n            \\\"needs shutdown\\\"\\n        );\\n\\n        operator = _operator;\\n    }\\n\\n    function setDepositor(address _depositor) external {\\n        require(msg.sender == owner, \\\"!auth\\\");\\n\\n        depositor = _depositor;\\n    }\\n\\n    function setStashAccess(address _stash, bool _status)\\n        external\\n        returns (bool)\\n    {\\n        require(msg.sender == operator, \\\"!auth\\\");\\n        if (_stash != address(0)) {\\n            stashPool[_stash] = _status;\\n        }\\n        return true;\\n    }\\n\\n    function deposit(address _token, address _gauge) external returns (bool) {\\n        require(msg.sender == operator, \\\"!auth\\\");\\n        if (protectedTokens[_token] == false) {\\n            protectedTokens[_token] = true;\\n        }\\n        if (protectedTokens[_gauge] == false) {\\n            protectedTokens[_gauge] = true;\\n        }\\n        uint256 balance = IERC20(_token).balanceOf(address(this));\\n        if (balance > 0) {\\n            IERC20(_token).safeApprove(_gauge, 0);\\n            IERC20(_token).safeApprove(_gauge, balance);\\n            ICurveGauge(_gauge).deposit(balance);\\n        }\\n        return true;\\n    }\\n\\n    //stash only function for pulling extra incentive reward tokens out\\n    function withdraw(IERC20 _asset) external returns (uint256 balance) {\\n        require(stashPool[msg.sender] == true, \\\"!auth\\\");\\n\\n        //check protection\\n        if (protectedTokens[address(_asset)] == true) {\\n            return 0;\\n        }\\n\\n        balance = _asset.balanceOf(address(this));\\n        _asset.safeTransfer(msg.sender, balance);\\n        return balance;\\n    }\\n\\n    // Withdraw partial funds\\n    function withdraw(\\n        address _token,\\n        address _gauge,\\n        uint256 _amount\\n    ) public returns (bool) {\\n        require(msg.sender == operator, \\\"!auth\\\");\\n        uint256 _balance = IERC20(_token).balanceOf(address(this));\\n        if (_balance < _amount) {\\n            _amount = _withdrawSome(_gauge, _amount.sub(_balance));\\n            _amount = _amount.add(_balance);\\n        }\\n        IERC20(_token).safeTransfer(msg.sender, _amount);\\n        return true;\\n    }\\n\\n    function withdrawAll(address _token, address _gauge)\\n        external\\n        returns (bool)\\n    {\\n        require(msg.sender == operator, \\\"!auth\\\");\\n        uint256 amount = balanceOfPool(_gauge).add(\\n            IERC20(_token).balanceOf(address(this))\\n        );\\n        withdraw(_token, _gauge, amount);\\n        return true;\\n    }\\n\\n    function _withdrawSome(address _gauge, uint256 _amount)\\n        internal\\n        returns (uint256)\\n    {\\n        ICurveGauge(_gauge).withdraw(_amount);\\n        return _amount;\\n    }\\n\\n    function createLock(uint256 _value, uint256 _unlockTime)\\n        external\\n        returns (bool)\\n    {\\n        require(msg.sender == depositor, \\\"!auth\\\");\\n        IERC20(bal).safeApprove(veBal, 0);\\n        IERC20(bal).safeApprove(veBal, _value);\\n        ICurveVoteEscrow(veBal).create_lock(_value, _unlockTime);\\n        return true;\\n    }\\n\\n    function increaseAmount(uint256 _value) external returns (bool) {\\n        require(msg.sender == depositor, \\\"!auth\\\");\\n        IERC20(bal).safeApprove(veBal, 0);\\n        IERC20(bal).safeApprove(veBal, _value);\\n        ICurveVoteEscrow(veBal).increase_amount(_value);\\n        return true;\\n    }\\n\\n    function increaseTime(uint256 _value) external returns (bool) {\\n        require(msg.sender == depositor, \\\"!auth\\\");\\n        ICurveVoteEscrow(veBal).increase_unlock_time(_value);\\n        return true;\\n    }\\n\\n    function release() external returns (bool) {\\n        require(msg.sender == depositor, \\\"!auth\\\");\\n        ICurveVoteEscrow(veBal).withdraw();\\n        return true;\\n    }\\n\\n    function vote(\\n        uint256 _voteId,\\n        address _votingAddress,\\n        bool _support\\n    ) external returns (bool) {\\n        require(msg.sender == operator, \\\"!auth\\\");\\n        IVoting(_votingAddress).vote(_voteId, _support, false);\\n        return true;\\n    }\\n\\n    function voteGaugeWeight(address _gauge, uint256 _weight)\\n        external\\n        returns (bool)\\n    {\\n        require(msg.sender == operator, \\\"!auth\\\");\\n\\n        //vote\\n        IVoting(gaugeController).vote_for_gauge_weights(_gauge, _weight);\\n        return true;\\n    }\\n\\n    function claimBal(address _gauge) external returns (uint256) {\\n        require(msg.sender == operator, \\\"!auth\\\");\\n\\n        uint256 _balance = 0;\\n        try IMinter(mintr).mint(_gauge) {\\n            _balance = IERC20(bal).balanceOf(address(this));\\n            IERC20(bal).safeTransfer(operator, _balance);\\n        } catch {}\\n\\n        return _balance;\\n    }\\n\\n    function claimRewards(address _gauge) external returns (bool) {\\n        require(msg.sender == operator, \\\"!auth\\\");\\n        ICurveGauge(_gauge).claim_rewards();\\n        return true;\\n    }\\n\\n    function claimFees(address _distroContract, address _token)\\n        external\\n        returns (uint256)\\n    {\\n        require(msg.sender == operator, \\\"!auth\\\");\\n        IFeeDistro(_distroContract).claim();\\n        uint256 _balance = IERC20(_token).balanceOf(address(this));\\n        IERC20(_token).safeTransfer(operator, _balance);\\n        return _balance;\\n    }\\n\\n    function balanceOfPool(address _gauge) public view returns (uint256) {\\n        return ICurveGauge(_gauge).balanceOf(address(this));\\n    }\\n\\n    function execute(\\n        address _to,\\n        uint256 _value,\\n        bytes calldata _data\\n    ) external returns (bool, bytes memory) {\\n        require(msg.sender == operator, \\\"!auth\\\");\\n\\n        (bool success, bytes memory result) = _to.call{value: _value}(_data);\\n\\n        return (success, result);\\n    }\\n}\\n\",\"keccak256\":\"0xffaa056644e685d881f87f537557f14c631f9b116d5cb730baa69fc63e56fd0d\",\"license\":\"MIT\"},\"contracts/utils/Interfaces.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\ninterface ICurveGauge {\\n    function deposit(uint256) external;\\n\\n    function balanceOf(address) external view returns (uint256);\\n\\n    function withdraw(uint256) external;\\n\\n    function claim_rewards() external;\\n\\n    function reward_tokens(uint256) external view returns (address); //v2\\n\\n    function rewarded_token() external view returns (address); //v1\\n\\n    function lp_token() external view returns (address);\\n}\\n\\ninterface ICurveVoteEscrow {\\n    function create_lock(uint256, uint256) external;\\n\\n    function increase_amount(uint256) external;\\n\\n    function increase_unlock_time(uint256) external;\\n\\n    function withdraw() external;\\n\\n    function smart_wallet_checker() external view returns (address);\\n}\\n\\ninterface IWalletChecker {\\n    function check(address) external view returns (bool);\\n}\\n\\ninterface IVoting {\\n    function vote(\\n        uint256,\\n        bool,\\n        bool\\n    ) external; //voteId, support, executeIfDecided\\n\\n    function getVote(uint256)\\n        external\\n        view\\n        returns (\\n            bool,\\n            bool,\\n            uint64,\\n            uint64,\\n            uint64,\\n            uint64,\\n            uint256,\\n            uint256,\\n            uint256,\\n            bytes memory\\n        );\\n\\n    function vote_for_gauge_weights(address, uint256) external;\\n}\\n\\ninterface IMinter {\\n    function mint(address) external;\\n}\\n\\ninterface IRegistry {\\n    function get_registry() external view returns (address);\\n\\n    function get_address(uint256 _id) external view returns (address);\\n\\n    function gauge_controller() external view returns (address);\\n\\n    function get_lp_token(address) external view returns (address);\\n\\n    function get_gauges(address)\\n        external\\n        view\\n        returns (address[10] memory, uint128[10] memory);\\n}\\n\\ninterface IStaker {\\n    function deposit(address, address) external;\\n\\n    function withdraw(address) external;\\n\\n    function withdraw(\\n        address,\\n        address,\\n        uint256\\n    ) external;\\n\\n    function withdrawAll(address, address) external;\\n\\n    function createLock(uint256, uint256) external;\\n\\n    function increaseAmount(uint256) external;\\n\\n    function increaseTime(uint256) external;\\n\\n    function release() external;\\n\\n    function claimCrv(address) external returns (uint256);\\n\\n    function claimRewards(address) external;\\n\\n    function claimFees(address, address) external;\\n\\n    function setStashAccess(address, bool) external;\\n\\n    function vote(\\n        uint256,\\n        address,\\n        bool\\n    ) external;\\n\\n    function voteGaugeWeight(address, uint256) external;\\n\\n    function balanceOfPool(address) external view returns (uint256);\\n\\n    function operator() external view returns (address);\\n\\n    function execute(\\n        address _to,\\n        uint256 _value,\\n        bytes calldata _data\\n    ) external returns (bool, bytes memory);\\n}\\n\\ninterface IRewards {\\n    function stake(address, uint256) external;\\n\\n    function stakeFor(address, uint256) external;\\n\\n    function withdraw(address, uint256) external;\\n\\n    function exit(address) external;\\n\\n    function getReward(address) external;\\n\\n    function queueNewRewards(uint256) external;\\n\\n    function notifyRewardAmount(uint256) external;\\n\\n    function addExtraReward(address) external;\\n\\n    function stakingToken() external view returns (address);\\n\\n    function rewardToken() external view returns (address);\\n\\n    function earned(address account) external view returns (uint256);\\n}\\n\\ninterface IStash {\\n    function stashRewards() external returns (bool);\\n\\n    function processStash() external returns (bool);\\n\\n    function claimRewards() external returns (bool);\\n\\n    function initialize(\\n        uint256 _pid,\\n        address _operator,\\n        address _staker,\\n        address _gauge,\\n        address _rewardFactory\\n    ) external;\\n}\\n\\ninterface IFeeDistro {\\n    function claim() external;\\n\\n    function token() external view returns (address);\\n}\\n\\ninterface ITokenMinter {\\n    function mint(address, uint256) external;\\n\\n    function burn(address, uint256) external;\\n}\\n\\ninterface IDeposit {\\n    function isShutdown() external view returns (bool);\\n\\n    function balanceOf(address _account) external view returns (uint256);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function poolInfo(uint256)\\n        external\\n        view\\n        returns (\\n            address,\\n            address,\\n            address,\\n            address,\\n            address,\\n            bool\\n        );\\n\\n    function rewardClaimed(\\n        uint256,\\n        address,\\n        uint256\\n    ) external;\\n\\n    function withdrawTo(\\n        uint256,\\n        uint256,\\n        address\\n    ) external;\\n\\n    function claimRewards(uint256, address) external returns (bool);\\n\\n    function rewardArbitrator() external returns (address);\\n\\n    function setGaugeRedirect(uint256 _pid) external returns (bool);\\n\\n    function owner() external returns (address);\\n}\\n\\ninterface ICrvDeposit {\\n    function deposit(uint256, bool) external;\\n\\n    function lockIncentive() external view returns (uint256);\\n}\\n\\ninterface IRewardFactory {\\n    function setAccess(address, bool) external;\\n\\n    function CreateBalRewards(uint256, address) external returns (address);\\n\\n    function CreateTokenRewards(\\n        address,\\n        address,\\n        address\\n    ) external returns (address);\\n\\n    function activeRewardCount(address) external view returns (uint256);\\n\\n    function addActiveReward(address, uint256) external returns (bool);\\n\\n    function removeActiveReward(address, uint256) external returns (bool);\\n}\\n\\ninterface IStashFactory {\\n    function CreateStash(\\n        uint256,\\n        address,\\n        address,\\n        uint256\\n    ) external returns (address);\\n}\\n\\ninterface ITokenFactory {\\n    function CreateDepositToken(address) external returns (address);\\n}\\n\\ninterface IPools {\\n    function addPool(\\n        address _lptoken,\\n        address _gauge,\\n        uint256 _stashVersion\\n    ) external returns (bool);\\n\\n    function forceAddPool(\\n        address _lptoken,\\n        address _gauge,\\n        uint256 _stashVersion\\n    ) external returns (bool);\\n\\n    function shutdownPool(uint256 _pid) external returns (bool);\\n\\n    function poolInfo(uint256)\\n        external\\n        view\\n        returns (\\n            address,\\n            address,\\n            address,\\n            address,\\n            address,\\n            bool\\n        );\\n\\n    function poolLength() external view returns (uint256);\\n\\n    function gaugeMap(address) external view returns (bool);\\n\\n    function setPoolManager(address _poolM) external;\\n}\\n\\ninterface IVestedEscrow {\\n    function fund(address[] calldata _recipient, uint256[] calldata _amount)\\n        external\\n        returns (bool);\\n}\\n\",\"keccak256\":\"0x9d4d25001eb30a3dce9ebd8823be5eab3a65245321d614af91c74ba27f194123\"},\"contracts/utils/MathUtil.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// copied from https://github.com/Uniswap/v2-core/blob/master/contracts/libraries/SafeMath.sol\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUtil {\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n}\\n\",\"keccak256\":\"0x9e105b0b40007fffed756069827f16b398d7b56123bb7d6771b6a3bdd547522a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101006040523480156200001257600080fd5b5060405162001d3038038062001d30833981016040819052620000359162000087565b600080546001600160a01b031916331790556001600160a01b0393841660805291831660a052821660c0521660e052620000e4565b80516001600160a01b03811681146200008257600080fd5b919050565b600080600080608085870312156200009e57600080fd5b620000a9856200006a565b9350620000b9602086016200006a565b9250620000c9604086016200006a565b9150620000d9606086016200006a565b905092959194509250565b60805160a05160c05160e051611ba26200018e600039600081816103350152610b04015260008181610268015281816105d101528181610626015281816106610152818161099601528181610b9901528181610df101528181610e460152610e880152600081816102ba015281816105af015281816106040152818161078e0152818161081501528181610dcf0152610e240152600081816103c9015261071d0152611ba26000f3fe608060405234801561001057600080fd5b50600436106101a95760003560e01c80638da5cb5b116100f9578063d1e61dcb11610097578063ef5cfb8c11610071578063ef5cfb8c14610411578063f2c098b714610424578063f9609f0814610437578063fa3964b21461044a57600080fd5b8063d1e61dcb146103c4578063d9caed12146103eb578063e2cdd42a146103fe57600080fd5b8063b3ab15fb116100d3578063b3ab15fb1461036a578063b52c05fe1461037d578063b61d27f614610390578063c7c4ff46146103b157600080fd5b80638da5cb5b1461031d57806399eecb3b14610330578063b0f637941461035757600080fd5b806334bce9031161016657806351cff8d91161014057806351cff8d9146102dc578063570ca735146102ef5780635d7e9bcb1461030257806386d1a69f1461031557600080fd5b806334bce903146102635780633c9a2a1a146102a25780633d79d1c8146102b557600080fd5b806309cae2c8146101ae57806313af4035146101d657806315456eba146101eb57806317d7de7c146101fe5780631e4b196a1461022f5780632dbfa73514610250575b600080fd5b6101c16101bc366004611817565b61045d565b60405190151581526020015b60405180910390f35b6101e96101e4366004611850565b610529565b005b6101c16101f936600461186d565b610575565b604080518082018252600f81526e4375727665566f74657250726f787960881b602082015290516101cd91906118e2565b61024261023d366004611850565b6106ce565b6040519081526020016101cd565b61024261025e366004611817565b610844565b61028a7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016101cd565b6101c16102b036600461186d565b610953565b61028a7f000000000000000000000000000000000000000000000000000000000000000081565b6102426102ea366004611850565b6109cd565b60015461028a906001600160a01b031681565b6101c16103103660046118f5565b610ab1565b6101c1610b6a565b60005461028a906001600160a01b031681565b61028a7f000000000000000000000000000000000000000000000000000000000000000081565b610242610365366004611850565b610c11565b6101e9610378366004611850565b610c7c565b6101c161038b366004611921565b610d95565b6103a361039e366004611943565b610ebf565b6040516101cd9291906119cc565b60025461028a906001600160a01b031681565b61028a7f000000000000000000000000000000000000000000000000000000000000000081565b6101c16103f93660046119e7565b610f5f565b6101c161040c366004611a36565b611037565b6101c161041f366004611850565b6110d7565b6101e9610432366004611850565b61113f565b6101c1610445366004611817565b61118b565b6101c1610458366004611a78565b611349565b6001546000906001600160a01b031633146104935760405162461bcd60e51b815260040161048a90611aa6565b60405180910390fd5b6040516370a0823160e01b8152306004820152600090610511906001600160a01b038616906370a0823190602401602060405180830381865afa1580156104de573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105029190611ac5565b61050b85610c11565b906113b3565b905061051e848483610f5f565b506001949350505050565b6000546001600160a01b031633146105535760405162461bcd60e51b815260040161048a90611aa6565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b6002546000906001600160a01b031633146105a25760405162461bcd60e51b815260040161048a90611aa6565b6105f76001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f000000000000000000000000000000000000000000000000000000000000000060006113bf565b61064b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f0000000000000000000000000000000000000000000000000000000000000000846113bf565b604051631255d9df60e21b8152600481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690634957677c906024015b600060405180830381600087803b1580156106ae57600080fd5b505af11580156106c2573d6000803e3d6000fd5b50600195945050505050565b6001546000906001600160a01b031633146106fb5760405162461bcd60e51b815260040161048a90611aa6565b6040516335313c2160e11b81526001600160a01b0383811660048301526000917f000000000000000000000000000000000000000000000000000000000000000090911690636a62784290602401600060405180830381600087803b15801561076357600080fd5b505af1925050508015610774575060015b1561083e576040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa1580156107dd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108019190611ac5565b60015490915061083e906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811691168361150c565b92915050565b6001546000906001600160a01b031633146108715760405162461bcd60e51b815260040161048a90611aa6565b826001600160a01b0316634e71d92d6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156108ac57600080fd5b505af11580156108c0573d6000803e3d6000fd5b50506040516370a0823160e01b8152306004820152600092506001600160a01b03851691506370a0823190602401602060405180830381865afa15801561090b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061092f9190611ac5565b60015490915061094c906001600160a01b0385811691168361150c565b9392505050565b6002546000906001600160a01b031633146109805760405162461bcd60e51b815260040161048a90611aa6565b6040516377fbd30960e11b8152600481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063eff7a61290602401610694565b3360009081526003602052604081205460ff161515600114610a015760405162461bcd60e51b815260040161048a90611aa6565b6001600160a01b03821660009081526004602052604090205460ff161515600103610a2e57506000919050565b6040516370a0823160e01b81523060048201526001600160a01b038316906370a0823190602401602060405180830381865afa158015610a72573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a969190611ac5565b9050610aac6001600160a01b038316338361150c565b919050565b6001546000906001600160a01b03163314610ade5760405162461bcd60e51b815260040161048a90611aa6565b604051631ae26c6560e31b81526001600160a01b038481166004830152602482018490527f0000000000000000000000000000000000000000000000000000000000000000169063d7136328906044015b600060405180830381600087803b158015610b4957600080fd5b505af1158015610b5d573d6000803e3d6000fd5b5060019695505050505050565b6002546000906001600160a01b03163314610b975760405162461bcd60e51b815260040161048a90611aa6565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633ccfd60b6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610bf257600080fd5b505af1158015610c06573d6000803e3d6000fd5b505050506001905090565b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa158015610c58573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061083e9190611ac5565b6000546001600160a01b03163314610ca65760405162461bcd60e51b815260040161048a90611aa6565b6001546001600160a01b03161580610d365750600160009054906101000a90046001600160a01b03166001600160a01b031663bf86d6906040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d0c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d309190611ade565b15156001145b610d735760405162461bcd60e51b815260206004820152600e60248201526d3732b2b2399039b43aba3237bbb760911b604482015260640161048a565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6002546000906001600160a01b03163314610dc25760405162461bcd60e51b815260040161048a90611aa6565b610e176001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f000000000000000000000000000000000000000000000000000000000000000060006113bf565b610e6b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f0000000000000000000000000000000000000000000000000000000000000000856113bf565b6040516365fc387360e01b815260048101849052602481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906365fc387390604401610b2f565b6001546000906060906001600160a01b03163314610eef5760405162461bcd60e51b815260040161048a90611aa6565b600080876001600160a01b0316878787604051610f0d929190611afb565b60006040518083038185875af1925050503d8060008114610f4a576040519150601f19603f3d011682016040523d82523d6000602084013e610f4f565b606091505b5090999098509650505050505050565b6001546000906001600160a01b03163314610f8c5760405162461bcd60e51b815260040161048a90611aa6565b6040516370a0823160e01b81523060048201526000906001600160a01b038616906370a0823190602401602060405180830381865afa158015610fd3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ff79190611ac5565b905082811015611023576110148461100f858461153c565b611548565b925061102083826113b3565b92505b61051e6001600160a01b038616338561150c565b6001546000906001600160a01b031633146110645760405162461bcd60e51b815260040161048a90611aa6565b604051636f899de560e11b8152600481018590528215156024820152600060448201526001600160a01b0384169063df133bca90606401600060405180830381600087803b1580156110b557600080fd5b505af11580156110c9573d6000803e3d6000fd5b506001979650505050505050565b6001546000906001600160a01b031633146111045760405162461bcd60e51b815260040161048a90611aa6565b816001600160a01b031663e6f1daf26040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156106ae57600080fd5b6000546001600160a01b031633146111695760405162461bcd60e51b815260040161048a90611aa6565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6001546000906001600160a01b031633146111b85760405162461bcd60e51b815260040161048a90611aa6565b6001600160a01b03831660009081526004602052604081205460ff1615159003611200576001600160a01b0383166000908152600460205260409020805460ff191660011790555b6001600160a01b03821660009081526004602052604081205460ff1615159003611248576001600160a01b0382166000908152600460205260409020805460ff191660011790555b6040516370a0823160e01b81523060048201526000906001600160a01b038516906370a0823190602401602060405180830381865afa15801561128f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112b39190611ac5565b9050801561133f576112d06001600160a01b0385168460006113bf565b6112e46001600160a01b03851684836113bf565b60405163b6b55f2560e01b8152600481018290526001600160a01b0384169063b6b55f2590602401600060405180830381600087803b15801561132657600080fd5b505af115801561133a573d6000803e3d6000fd5b505050505b5060019392505050565b6001546000906001600160a01b031633146113765760405162461bcd60e51b815260040161048a90611aa6565b6001600160a01b038316156113aa576001600160a01b0383166000908152600360205260409020805460ff19168315151790555b50600192915050565b600061094c8284611b21565b8015806114395750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e90604401602060405180830381865afa158015611413573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114379190611ac5565b155b6114a45760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b606482015260840161048a565b6040516001600160a01b03831660248201526044810182905261150790849063095ea7b360e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526115ac565b505050565b6040516001600160a01b03831660248201526044810182905261150790849063a9059cbb60e01b906064016114d0565b600061094c8284611b39565b604051632e1a7d4d60e01b8152600481018290526000906001600160a01b03841690632e1a7d4d90602401600060405180830381600087803b15801561158d57600080fd5b505af11580156115a1573d6000803e3d6000fd5b509395945050505050565b6000611601826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661167e9092919063ffffffff16565b805190915015611507578080602001905181019061161f9190611ade565b6115075760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161048a565b606061168d8484600085611695565b949350505050565b6060824710156116f65760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161048a565b6001600160a01b0385163b61174d5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161048a565b600080866001600160a01b031685876040516117699190611b50565b60006040518083038185875af1925050503d80600081146117a6576040519150601f19603f3d011682016040523d82523d6000602084013e6117ab565b606091505b50915091506117bb8282866117c6565b979650505050505050565b606083156117d557508161094c565b8251156117e55782518084602001fd5b8160405162461bcd60e51b815260040161048a91906118e2565b6001600160a01b038116811461181457600080fd5b50565b6000806040838503121561182a57600080fd5b8235611835816117ff565b91506020830135611845816117ff565b809150509250929050565b60006020828403121561186257600080fd5b813561094c816117ff565b60006020828403121561187f57600080fd5b5035919050565b60005b838110156118a1578181015183820152602001611889565b838111156118b0576000848401525b50505050565b600081518084526118ce816020860160208601611886565b601f01601f19169290920160200192915050565b60208152600061094c60208301846118b6565b6000806040838503121561190857600080fd5b8235611913816117ff565b946020939093013593505050565b6000806040838503121561193457600080fd5b50508035926020909101359150565b6000806000806060858703121561195957600080fd5b8435611964816117ff565b935060208501359250604085013567ffffffffffffffff8082111561198857600080fd5b818701915087601f83011261199c57600080fd5b8135818111156119ab57600080fd5b8860208285010111156119bd57600080fd5b95989497505060200194505050565b821515815260406020820152600061168d60408301846118b6565b6000806000606084860312156119fc57600080fd5b8335611a07816117ff565b92506020840135611a17816117ff565b929592945050506040919091013590565b801515811461181457600080fd5b600080600060608486031215611a4b57600080fd5b833592506020840135611a5d816117ff565b91506040840135611a6d81611a28565b809150509250925092565b60008060408385031215611a8b57600080fd5b8235611a96816117ff565b9150602083013561184581611a28565b602080825260059082015264042c2eae8d60db1b604082015260600190565b600060208284031215611ad757600080fd5b5051919050565b600060208284031215611af057600080fd5b815161094c81611a28565b8183823760009101908152919050565b634e487b7160e01b600052601160045260246000fd5b60008219821115611b3457611b34611b0b565b500190565b600082821015611b4b57611b4b611b0b565b500390565b60008251611b62818460208701611886565b919091019291505056fea2646970667358221220a6643f959c4b6f2876606f0e69ecb35e33416139e124f3039ffb8fbbb53be62464736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101a95760003560e01c80638da5cb5b116100f9578063d1e61dcb11610097578063ef5cfb8c11610071578063ef5cfb8c14610411578063f2c098b714610424578063f9609f0814610437578063fa3964b21461044a57600080fd5b8063d1e61dcb146103c4578063d9caed12146103eb578063e2cdd42a146103fe57600080fd5b8063b3ab15fb116100d3578063b3ab15fb1461036a578063b52c05fe1461037d578063b61d27f614610390578063c7c4ff46146103b157600080fd5b80638da5cb5b1461031d57806399eecb3b14610330578063b0f637941461035757600080fd5b806334bce9031161016657806351cff8d91161014057806351cff8d9146102dc578063570ca735146102ef5780635d7e9bcb1461030257806386d1a69f1461031557600080fd5b806334bce903146102635780633c9a2a1a146102a25780633d79d1c8146102b557600080fd5b806309cae2c8146101ae57806313af4035146101d657806315456eba146101eb57806317d7de7c146101fe5780631e4b196a1461022f5780632dbfa73514610250575b600080fd5b6101c16101bc366004611817565b61045d565b60405190151581526020015b60405180910390f35b6101e96101e4366004611850565b610529565b005b6101c16101f936600461186d565b610575565b604080518082018252600f81526e4375727665566f74657250726f787960881b602082015290516101cd91906118e2565b61024261023d366004611850565b6106ce565b6040519081526020016101cd565b61024261025e366004611817565b610844565b61028a7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016101cd565b6101c16102b036600461186d565b610953565b61028a7f000000000000000000000000000000000000000000000000000000000000000081565b6102426102ea366004611850565b6109cd565b60015461028a906001600160a01b031681565b6101c16103103660046118f5565b610ab1565b6101c1610b6a565b60005461028a906001600160a01b031681565b61028a7f000000000000000000000000000000000000000000000000000000000000000081565b610242610365366004611850565b610c11565b6101e9610378366004611850565b610c7c565b6101c161038b366004611921565b610d95565b6103a361039e366004611943565b610ebf565b6040516101cd9291906119cc565b60025461028a906001600160a01b031681565b61028a7f000000000000000000000000000000000000000000000000000000000000000081565b6101c16103f93660046119e7565b610f5f565b6101c161040c366004611a36565b611037565b6101c161041f366004611850565b6110d7565b6101e9610432366004611850565b61113f565b6101c1610445366004611817565b61118b565b6101c1610458366004611a78565b611349565b6001546000906001600160a01b031633146104935760405162461bcd60e51b815260040161048a90611aa6565b60405180910390fd5b6040516370a0823160e01b8152306004820152600090610511906001600160a01b038616906370a0823190602401602060405180830381865afa1580156104de573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105029190611ac5565b61050b85610c11565b906113b3565b905061051e848483610f5f565b506001949350505050565b6000546001600160a01b031633146105535760405162461bcd60e51b815260040161048a90611aa6565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b6002546000906001600160a01b031633146105a25760405162461bcd60e51b815260040161048a90611aa6565b6105f76001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f000000000000000000000000000000000000000000000000000000000000000060006113bf565b61064b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f0000000000000000000000000000000000000000000000000000000000000000846113bf565b604051631255d9df60e21b8152600481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690634957677c906024015b600060405180830381600087803b1580156106ae57600080fd5b505af11580156106c2573d6000803e3d6000fd5b50600195945050505050565b6001546000906001600160a01b031633146106fb5760405162461bcd60e51b815260040161048a90611aa6565b6040516335313c2160e11b81526001600160a01b0383811660048301526000917f000000000000000000000000000000000000000000000000000000000000000090911690636a62784290602401600060405180830381600087803b15801561076357600080fd5b505af1925050508015610774575060015b1561083e576040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa1580156107dd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108019190611ac5565b60015490915061083e906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811691168361150c565b92915050565b6001546000906001600160a01b031633146108715760405162461bcd60e51b815260040161048a90611aa6565b826001600160a01b0316634e71d92d6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156108ac57600080fd5b505af11580156108c0573d6000803e3d6000fd5b50506040516370a0823160e01b8152306004820152600092506001600160a01b03851691506370a0823190602401602060405180830381865afa15801561090b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061092f9190611ac5565b60015490915061094c906001600160a01b0385811691168361150c565b9392505050565b6002546000906001600160a01b031633146109805760405162461bcd60e51b815260040161048a90611aa6565b6040516377fbd30960e11b8152600481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063eff7a61290602401610694565b3360009081526003602052604081205460ff161515600114610a015760405162461bcd60e51b815260040161048a90611aa6565b6001600160a01b03821660009081526004602052604090205460ff161515600103610a2e57506000919050565b6040516370a0823160e01b81523060048201526001600160a01b038316906370a0823190602401602060405180830381865afa158015610a72573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a969190611ac5565b9050610aac6001600160a01b038316338361150c565b919050565b6001546000906001600160a01b03163314610ade5760405162461bcd60e51b815260040161048a90611aa6565b604051631ae26c6560e31b81526001600160a01b038481166004830152602482018490527f0000000000000000000000000000000000000000000000000000000000000000169063d7136328906044015b600060405180830381600087803b158015610b4957600080fd5b505af1158015610b5d573d6000803e3d6000fd5b5060019695505050505050565b6002546000906001600160a01b03163314610b975760405162461bcd60e51b815260040161048a90611aa6565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633ccfd60b6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610bf257600080fd5b505af1158015610c06573d6000803e3d6000fd5b505050506001905090565b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa158015610c58573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061083e9190611ac5565b6000546001600160a01b03163314610ca65760405162461bcd60e51b815260040161048a90611aa6565b6001546001600160a01b03161580610d365750600160009054906101000a90046001600160a01b03166001600160a01b031663bf86d6906040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d0c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d309190611ade565b15156001145b610d735760405162461bcd60e51b815260206004820152600e60248201526d3732b2b2399039b43aba3237bbb760911b604482015260640161048a565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6002546000906001600160a01b03163314610dc25760405162461bcd60e51b815260040161048a90611aa6565b610e176001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f000000000000000000000000000000000000000000000000000000000000000060006113bf565b610e6b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000167f0000000000000000000000000000000000000000000000000000000000000000856113bf565b6040516365fc387360e01b815260048101849052602481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906365fc387390604401610b2f565b6001546000906060906001600160a01b03163314610eef5760405162461bcd60e51b815260040161048a90611aa6565b600080876001600160a01b0316878787604051610f0d929190611afb565b60006040518083038185875af1925050503d8060008114610f4a576040519150601f19603f3d011682016040523d82523d6000602084013e610f4f565b606091505b5090999098509650505050505050565b6001546000906001600160a01b03163314610f8c5760405162461bcd60e51b815260040161048a90611aa6565b6040516370a0823160e01b81523060048201526000906001600160a01b038616906370a0823190602401602060405180830381865afa158015610fd3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ff79190611ac5565b905082811015611023576110148461100f858461153c565b611548565b925061102083826113b3565b92505b61051e6001600160a01b038616338561150c565b6001546000906001600160a01b031633146110645760405162461bcd60e51b815260040161048a90611aa6565b604051636f899de560e11b8152600481018590528215156024820152600060448201526001600160a01b0384169063df133bca90606401600060405180830381600087803b1580156110b557600080fd5b505af11580156110c9573d6000803e3d6000fd5b506001979650505050505050565b6001546000906001600160a01b031633146111045760405162461bcd60e51b815260040161048a90611aa6565b816001600160a01b031663e6f1daf26040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156106ae57600080fd5b6000546001600160a01b031633146111695760405162461bcd60e51b815260040161048a90611aa6565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6001546000906001600160a01b031633146111b85760405162461bcd60e51b815260040161048a90611aa6565b6001600160a01b03831660009081526004602052604081205460ff1615159003611200576001600160a01b0383166000908152600460205260409020805460ff191660011790555b6001600160a01b03821660009081526004602052604081205460ff1615159003611248576001600160a01b0382166000908152600460205260409020805460ff191660011790555b6040516370a0823160e01b81523060048201526000906001600160a01b038516906370a0823190602401602060405180830381865afa15801561128f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112b39190611ac5565b9050801561133f576112d06001600160a01b0385168460006113bf565b6112e46001600160a01b03851684836113bf565b60405163b6b55f2560e01b8152600481018290526001600160a01b0384169063b6b55f2590602401600060405180830381600087803b15801561132657600080fd5b505af115801561133a573d6000803e3d6000fd5b505050505b5060019392505050565b6001546000906001600160a01b031633146113765760405162461bcd60e51b815260040161048a90611aa6565b6001600160a01b038316156113aa576001600160a01b0383166000908152600360205260409020805460ff19168315151790555b50600192915050565b600061094c8284611b21565b8015806114395750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e90604401602060405180830381865afa158015611413573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114379190611ac5565b155b6114a45760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b606482015260840161048a565b6040516001600160a01b03831660248201526044810182905261150790849063095ea7b360e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526115ac565b505050565b6040516001600160a01b03831660248201526044810182905261150790849063a9059cbb60e01b906064016114d0565b600061094c8284611b39565b604051632e1a7d4d60e01b8152600481018290526000906001600160a01b03841690632e1a7d4d90602401600060405180830381600087803b15801561158d57600080fd5b505af11580156115a1573d6000803e3d6000fd5b509395945050505050565b6000611601826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661167e9092919063ffffffff16565b805190915015611507578080602001905181019061161f9190611ade565b6115075760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161048a565b606061168d8484600085611695565b949350505050565b6060824710156116f65760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161048a565b6001600160a01b0385163b61174d5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161048a565b600080866001600160a01b031685876040516117699190611b50565b60006040518083038185875af1925050503d80600081146117a6576040519150601f19603f3d011682016040523d82523d6000602084013e6117ab565b606091505b50915091506117bb8282866117c6565b979650505050505050565b606083156117d557508161094c565b8251156117e55782518084602001fd5b8160405162461bcd60e51b815260040161048a91906118e2565b6001600160a01b038116811461181457600080fd5b50565b6000806040838503121561182a57600080fd5b8235611835816117ff565b91506020830135611845816117ff565b809150509250929050565b60006020828403121561186257600080fd5b813561094c816117ff565b60006020828403121561187f57600080fd5b5035919050565b60005b838110156118a1578181015183820152602001611889565b838111156118b0576000848401525b50505050565b600081518084526118ce816020860160208601611886565b601f01601f19169290920160200192915050565b60208152600061094c60208301846118b6565b6000806040838503121561190857600080fd5b8235611913816117ff565b946020939093013593505050565b6000806040838503121561193457600080fd5b50508035926020909101359150565b6000806000806060858703121561195957600080fd5b8435611964816117ff565b935060208501359250604085013567ffffffffffffffff8082111561198857600080fd5b818701915087601f83011261199c57600080fd5b8135818111156119ab57600080fd5b8860208285010111156119bd57600080fd5b95989497505060200194505050565b821515815260406020820152600061168d60408301846118b6565b6000806000606084860312156119fc57600080fd5b8335611a07816117ff565b92506020840135611a17816117ff565b929592945050506040919091013590565b801515811461181457600080fd5b600080600060608486031215611a4b57600080fd5b833592506020840135611a5d816117ff565b91506040840135611a6d81611a28565b809150509250925092565b60008060408385031215611a8b57600080fd5b8235611a96816117ff565b9150602083013561184581611a28565b602080825260059082015264042c2eae8d60db1b604082015260600190565b600060208284031215611ad757600080fd5b5051919050565b600060208284031215611af057600080fd5b815161094c81611a28565b8183823760009101908152919050565b634e487b7160e01b600052601160045260246000fd5b60008219821115611b3457611b34611b0b565b500190565b600082821015611b4b57611b4b611b0b565b500390565b60008251611b62818460208701611886565b919091019291505056fea2646970667358221220a6643f959c4b6f2876606f0e69ecb35e33416139e124f3039ffb8fbbb53be62464736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6516,
        "contract": "contracts/VoterProxy.sol:VoterProxy",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 6518,
        "contract": "contracts/VoterProxy.sol:VoterProxy",
        "label": "operator",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 6520,
        "contract": "contracts/VoterProxy.sol:VoterProxy",
        "label": "depositor",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 6524,
        "contract": "contracts/VoterProxy.sol:VoterProxy",
        "label": "stashPool",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 6528,
        "contract": "contracts/VoterProxy.sol:VoterProxy",
        "label": "protectedTokens",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      }
    }
  }
}