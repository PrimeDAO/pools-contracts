{
  "address": "0x7fae6a4C8AFCb8F8b6878ae4308Ad1Ba7Eea4c88",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_staker",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_minter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_escrow",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FEE_DENOMINATOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bal",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_lock",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "_stakeAddress",
          "type": "address"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_lock",
          "type": "bool"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_lock",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "_stakeAddress",
          "type": "address"
        }
      ],
      "name": "depositAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "escrow",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "incentiveBal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialLock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockBalancer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockIncentive",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeManager",
          "type": "address"
        }
      ],
      "name": "setFeeManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_lockIncentive",
          "type": "uint256"
        }
      ],
      "name": "setFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "staker",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unlockTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xd7226815fe95db31574a62cf6edb66c0125a4e3f8786da534259e879dc9fdf28",
  "receipt": {
    "to": null,
    "from": "0xEFc3a819695932394D89b8AF6f49e0D89EDf9A40",
    "contractAddress": "0x7fae6a4C8AFCb8F8b6878ae4308Ad1Ba7Eea4c88",
    "transactionIndex": 8,
    "gasUsed": "1166454",
    "logsBloom": "0x
    "blockHash": "0xf1491d41fa90d531e8f1211cde91363acef0847f976d1698903c0510edb51fdd",
    "transactionHash": "0xd7226815fe95db31574a62cf6edb66c0125a4e3f8786da534259e879dc9fdf28",
    "logs": [],
    "blockNumber": 10645494,
    "cumulativeGasUsed": "4036286",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x9fe40475e29Bf67F1dF4a0E3113aF09B6ff866ec",
    "0x1A4B29cB74FB2A8f549002ABB1953a1b93A07f51",
    "0x9D2Bfc794F8e5f8Dc911499049aeCf46E74c58A7"
  ],
  "solcInputHash": "bd75603ac8a277dbfaeddf88f266bad8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_escrow\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FEE_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_lock\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_stakeAddress\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_lock\",\"type\":\"bool\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_lock\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_stakeAddress\",\"type\":\"address\"}],\"name\":\"depositAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"escrow\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"incentiveBal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockBalancer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockIncentive\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeManager\",\"type\":\"address\"}],\"name\":\"setFeeManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lockIncentive\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"staker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BalDepositor.sol\":\"BalDepositor\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"},\"contracts/BalDepositor.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport \\\"./utils/Interfaces.sol\\\";\\nimport \\\"./utils/MathUtil.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\ncontract BalDepositor {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n    using Address for address;\\n\\n    address public constant bal =\\n        address(0xba100000625a3754423978a60c9317c58a424e3D);\\n    address public immutable escrow;\\n    uint256 private constant MAXTIME = 4 * 364 * 86400;\\n    uint256 private constant WEEK = 7 * 86400;\\n\\n    uint256 public lockIncentive = 10; //incentive to users who spend gas to lock bal\\n    uint256 public constant FEE_DENOMINATOR = 10000;\\n\\n    address public feeManager;\\n    address public immutable staker;\\n    address public immutable minter;\\n    uint256 public incentiveBal = 0;\\n    uint256 public unlockTime;\\n\\n    constructor(\\n        address _staker,\\n        address _minter,\\n        address _escrow\\n    ) public {\\n        staker = _staker;\\n        minter = _minter;\\n        feeManager = msg.sender;\\n        escrow = _escrow;\\n    }\\n\\n    function setFeeManager(address _feeManager) external {\\n        require(msg.sender == feeManager, \\\"!auth\\\");\\n        feeManager = _feeManager;\\n    }\\n\\n    function setFees(uint256 _lockIncentive) external {\\n        require(msg.sender == feeManager, \\\"!auth\\\");\\n\\n        if (_lockIncentive >= 0 && _lockIncentive <= 30) {\\n            lockIncentive = _lockIncentive;\\n        }\\n    }\\n\\n    function initialLock() external {\\n        require(msg.sender == feeManager, \\\"!auth\\\");\\n\\n        uint256 vBal = IERC20(escrow).balanceOf(staker);\\n        if (vBal == 0) {\\n            uint256 unlockAt = block.timestamp + MAXTIME;\\n            uint256 unlockInWeeks = (unlockAt / WEEK) * WEEK;\\n\\n            //release old lock if exists\\n            IStaker(staker).release();\\n            //create new lock\\n            uint256 balBalanceStaker = IERC20(bal).balanceOf(staker);\\n            IStaker(staker).createLock(balBalanceStaker, unlockAt);\\n            unlockTime = unlockInWeeks;\\n        }\\n    }\\n\\n    function _lockBalancer() internal {\\n        uint256 balBalance = IERC20(bal).balanceOf(address(this));\\n        if (balBalance > 0) {\\n            IERC20(bal).safeTransfer(staker, balBalance);\\n        }\\n\\n        //increase ammount\\n        uint256 balBalanceStaker = IERC20(bal).balanceOf(staker);\\n        if (balBalanceStaker == 0) {\\n            return;\\n        }\\n\\n        //increase amount\\n        IStaker(staker).increaseAmount(balBalanceStaker);\\n\\n        uint256 unlockAt = block.timestamp + MAXTIME;\\n        uint256 unlockInWeeks = (unlockAt / WEEK) * WEEK;\\n\\n        //increase time too if over 2 week buffer\\n        if (unlockInWeeks.sub(unlockTime) > 2) {\\n            IStaker(staker).increaseTime(unlockAt);\\n            unlockTime = unlockInWeeks;\\n        }\\n    }\\n\\n    function lockBalancer() external {\\n        _lockBalancer();\\n\\n        //mint incentives\\n        if (incentiveBal > 0) {\\n            ITokenMinter(minter).mint(msg.sender, incentiveBal);\\n            incentiveBal = 0;\\n        }\\n    }\\n\\n    function deposit(\\n        uint256 _amount,\\n        bool _lock,\\n        address _stakeAddress\\n    ) public {\\n        require(_amount > 0, \\\"!>0\\\");\\n\\n        if (_lock) {\\n            //lock immediately, transfer directly to staker to skip an erc20 transfer\\n            IERC20(bal).safeTransferFrom(msg.sender, staker, _amount);\\n            _lockBalancer();\\n            if (incentiveBal > 0) {\\n                //add the incentive tokens here so they can be staked together\\n                _amount = _amount.add(incentiveBal);\\n                incentiveBal = 0;\\n            }\\n        } else {\\n            //move tokens here\\n            IERC20(bal).safeTransferFrom(msg.sender, address(this), _amount);\\n            //defer lock cost to another user\\n            uint256 callIncentive = _amount.mul(lockIncentive).div(\\n                FEE_DENOMINATOR\\n            );\\n            _amount = _amount.sub(callIncentive);\\n\\n            //add to a pool for lock caller\\n            incentiveBal = incentiveBal.add(callIncentive);\\n        }\\n\\n        bool depositOnly = _stakeAddress == address(0);\\n        if (depositOnly) {\\n            //mint for msg.sender\\n            ITokenMinter(minter).mint(msg.sender, _amount);\\n        } else {\\n            //mint here\\n            ITokenMinter(minter).mint(address(this), _amount);\\n            //stake for msg.sender\\n            IERC20(minter).safeApprove(_stakeAddress, 0);\\n            IERC20(minter).safeApprove(_stakeAddress, _amount);\\n            IRewards(_stakeAddress).stakeFor(msg.sender, _amount);\\n        }\\n    }\\n\\n    function deposit(uint256 _amount, bool _lock) external {\\n        deposit(_amount, _lock, address(0));\\n    }\\n\\n    function depositAll(bool _lock, address _stakeAddress) external {\\n        uint256 balBal = IERC20(bal).balanceOf(msg.sender); //This is balancer balance of msg.sender\\n        deposit(balBal, _lock, _stakeAddress);\\n    }\\n}\\n\",\"keccak256\":\"0x70ad819aab68800633365c16509250d8bb701216751b0a4ed48faa9f50ae7a20\"},\"contracts/utils/Interfaces.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\ninterface ICurveGauge {\\n    function deposit(uint256) external;\\n\\n    function balanceOf(address) external view returns (uint256);\\n\\n    function withdraw(uint256) external;\\n\\n    function claim_rewards() external;\\n\\n    function reward_tokens(uint256) external view returns (address); //v2\\n\\n    function rewarded_token() external view returns (address); //v1\\n\\n    function lp_token() external view returns (address);\\n}\\n\\ninterface ICurveVoteEscrow {\\n    function create_lock(uint256, uint256) external;\\n\\n    function increase_amount(uint256) external;\\n\\n    function increase_unlock_time(uint256) external;\\n\\n    function withdraw() external;\\n\\n    function smart_wallet_checker() external view returns (address);\\n}\\n\\ninterface IWalletChecker {\\n    function check(address) external view returns (bool);\\n}\\n\\ninterface IVoting {\\n    function vote(\\n        uint256,\\n        bool,\\n        bool\\n    ) external; //voteId, support, executeIfDecided\\n\\n    function getVote(uint256)\\n        external\\n        view\\n        returns (\\n            bool,\\n            bool,\\n            uint64,\\n            uint64,\\n            uint64,\\n            uint64,\\n            uint256,\\n            uint256,\\n            uint256,\\n            bytes memory\\n        );\\n\\n    function vote_for_gauge_weights(address, uint256) external;\\n}\\n\\ninterface IMinter {\\n    function mint(address) external;\\n}\\n\\ninterface IRegistry {\\n    function get_registry() external view returns (address);\\n\\n    function get_address(uint256 _id) external view returns (address);\\n\\n    function gauge_controller() external view returns (address);\\n\\n    function get_lp_token(address) external view returns (address);\\n\\n    function get_gauges(address)\\n        external\\n        view\\n        returns (address[10] memory, uint128[10] memory);\\n}\\n\\ninterface IStaker {\\n    function deposit(address, address) external;\\n\\n    function withdraw(address) external;\\n\\n    function withdraw(\\n        address,\\n        address,\\n        uint256\\n    ) external;\\n\\n    function withdrawAll(address, address) external;\\n\\n    function createLock(uint256, uint256) external;\\n\\n    function increaseAmount(uint256) external;\\n\\n    function increaseTime(uint256) external;\\n\\n    function release() external;\\n\\n    function claimCrv(address) external returns (uint256);\\n\\n    function claimRewards(address) external;\\n\\n    function claimFees(address, address) external;\\n\\n    function setStashAccess(address, bool) external;\\n\\n    function vote(\\n        uint256,\\n        address,\\n        bool\\n    ) external;\\n\\n    function voteGaugeWeight(address, uint256) external;\\n\\n    function balanceOfPool(address) external view returns (uint256);\\n\\n    function operator() external view returns (address);\\n\\n    function execute(\\n        address _to,\\n        uint256 _value,\\n        bytes calldata _data\\n    ) external returns (bool, bytes memory);\\n}\\n\\ninterface IRewards {\\n    function stake(address, uint256) external;\\n\\n    function stakeFor(address, uint256) external;\\n\\n    function withdraw(address, uint256) external;\\n\\n    function exit(address) external;\\n\\n    function getReward(address) external;\\n\\n    function queueNewRewards(uint256) external;\\n\\n    function notifyRewardAmount(uint256) external;\\n\\n    function addExtraReward(address) external;\\n\\n    function stakingToken() external view returns (address);\\n\\n    function rewardToken() external view returns (address);\\n\\n    function earned(address account) external view returns (uint256);\\n}\\n\\ninterface IStash {\\n    function stashRewards() external returns (bool);\\n\\n    function processStash() external returns (bool);\\n\\n    function claimRewards() external returns (bool);\\n\\n    function initialize(\\n        uint256 _pid,\\n        address _operator,\\n        address _staker,\\n        address _gauge,\\n        address _rewardFactory\\n    ) external;\\n}\\n\\ninterface IFeeDistro {\\n    function claim() external;\\n\\n    function token() external view returns (address);\\n}\\n\\ninterface ITokenMinter {\\n    function mint(address, uint256) external;\\n\\n    function burn(address, uint256) external;\\n}\\n\\ninterface IDeposit {\\n    function isShutdown() external view returns (bool);\\n\\n    function balanceOf(address _account) external view returns (uint256);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function poolInfo(uint256)\\n        external\\n        view\\n        returns (\\n            address,\\n            address,\\n            address,\\n            address,\\n            address,\\n            bool\\n        );\\n\\n    function rewardClaimed(\\n        uint256,\\n        address,\\n        uint256\\n    ) external;\\n\\n    function withdrawTo(\\n        uint256,\\n        uint256,\\n        address\\n    ) external;\\n\\n    function claimRewards(uint256, address) external returns (bool);\\n\\n    function rewardArbitrator() external returns (address);\\n\\n    function setGaugeRedirect(uint256 _pid) external returns (bool);\\n\\n    function owner() external returns (address);\\n}\\n\\ninterface ICrvDeposit {\\n    function deposit(uint256, bool) external;\\n\\n    function lockIncentive() external view returns (uint256);\\n}\\n\\ninterface IRewardFactory {\\n    function setAccess(address, bool) external;\\n\\n    function CreateBalRewards(uint256, address) external returns (address);\\n\\n    function CreateTokenRewards(\\n        address,\\n        address,\\n        address\\n    ) external returns (address);\\n\\n    function activeRewardCount(address) external view returns (uint256);\\n\\n    function addActiveReward(address, uint256) external returns (bool);\\n\\n    function removeActiveReward(address, uint256) external returns (bool);\\n}\\n\\ninterface IStashFactory {\\n    function CreateStash(\\n        uint256,\\n        address,\\n        address,\\n        uint256\\n    ) external returns (address);\\n}\\n\\ninterface ITokenFactory {\\n    function CreateDepositToken(address) external returns (address);\\n}\\n\\ninterface IPools {\\n    function addPool(\\n        address _lptoken,\\n        address _gauge,\\n        uint256 _stashVersion\\n    ) external returns (bool);\\n\\n    function forceAddPool(\\n        address _lptoken,\\n        address _gauge,\\n        uint256 _stashVersion\\n    ) external returns (bool);\\n\\n    function shutdownPool(uint256 _pid) external returns (bool);\\n\\n    function poolInfo(uint256)\\n        external\\n        view\\n        returns (\\n            address,\\n            address,\\n            address,\\n            address,\\n            address,\\n            bool\\n        );\\n\\n    function poolLength() external view returns (uint256);\\n\\n    function gaugeMap(address) external view returns (bool);\\n\\n    function setPoolManager(address _poolM) external;\\n}\\n\\ninterface IVestedEscrow {\\n    function fund(address[] calldata _recipient, uint256[] calldata _amount)\\n        external\\n        returns (bool);\\n}\\n\",\"keccak256\":\"0x9d4d25001eb30a3dce9ebd8823be5eab3a65245321d614af91c74ba27f194123\"},\"contracts/utils/MathUtil.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// copied from https://github.com/Uniswap/v2-core/blob/master/contracts/libraries/SafeMath.sol\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUtil {\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n}\\n\",\"keccak256\":\"0x9e105b0b40007fffed756069827f16b398d7b56123bb7d6771b6a3bdd547522a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e0604052600a600055600060025534801561001a57600080fd5b50604051620014b0380380620014b083398101604081905261003b91610086565b6001600160a01b0392831660a05290821660c052600180546001600160a01b03191633179055166080526100c9565b80516001600160a01b038116811461008157600080fd5b919050565b60008060006060848603121561009b57600080fd5b6100a48461006a565b92506100b26020850161006a565b91506100c06040850161006a565b90509250925092565b60805160a05160c05161134e620001626000396000818161010a015281816103b001528181610554015281816105d90152818161064a01526106810152600081816101cc015281816104730152818161075001528181610822015281816108a80152818161095201528181610a6901528181610aa501528181610b510152610c18015260008181610246015261077b015261134e6000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c80635ebaf1db11610097578063c5230deb11610066578063c5230deb1461021c578063d0fb020314610225578063d73792a914610238578063e2fdcc171461024157600080fd5b80635ebaf1db146101c757806380ed71e4146101ee578063836f8f20146102015780639a4083211461020957600080fd5b80633d79d1c8116100d35780633d79d1c814610188578063472d35b9146101a35780634f805abb146101b657806350940618146101be57600080fd5b80630754617214610105578063215537fd14610149578063251c1aa31461015e5780633d18678e14610175575b600080fd5b61012c7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b61015c6101573660046110eb565b610268565b005b61016760035481565b604051908152602001610140565b61015c610183366004611120565b6102f0565b61012c73ba100000625a3754423978a60c9317c58a424e3d81565b61015c6101b1366004611139565b610334565b61015c610380565b61016760005481565b61012c7f000000000000000000000000000000000000000000000000000000000000000081565b61015c6101fc366004611154565b61041c565b61015c61070f565b61015c610217366004611192565b6109c1565b61016760025481565b60015461012c906001600160a01b031681565b61016761271081565b61012c7f000000000000000000000000000000000000000000000000000000000000000081565b6040516370a0823160e01b815233600482015260009073ba100000625a3754423978a60c9317c58a424e3d906370a0823190602401602060405180830381865afa1580156102ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102de91906111c2565b90506102eb81848461041c565b505050565b6001546001600160a01b031633146103235760405162461bcd60e51b815260040161031a906111db565b60405180910390fd5b601e81116103315760008190555b50565b6001546001600160a01b0316331461035e5760405162461bcd60e51b815260040161031a906111db565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6103886109d1565b6002541561041a576002546040516340c10f1960e01b815233600482015260248101919091527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906340c10f1990604401600060405180830381600087803b1580156103fc57600080fd5b505af1158015610410573d6000803e3d6000fd5b5050600060025550505b565b600083116104525760405162461bcd60e51b81526020600482015260036024820152620213e360ec1b604482015260640161031a565b81156104c35761049873ba100000625a3754423978a60c9317c58a424e3d337f000000000000000000000000000000000000000000000000000000000000000086610c87565b6104a06109d1565b600254156104be576002546104b6908490610cf2565b600060025592505b610527565b6104e373ba100000625a3754423978a60c9317c58a424e3d333086610c87565b600061050661271061050060005487610d0590919063ffffffff16565b90610d11565b90506105128482610d1d565b6002549094506105229082610cf2565b600255505b6001600160a01b0381161580156105bd576040516340c10f1960e01b8152336004820152602481018590527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906340c10f1990604401600060405180830381600087803b1580156105a057600080fd5b505af11580156105b4573d6000803e3d6000fd5b50505050610709565b6040516340c10f1960e01b8152306004820152602481018590527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906340c10f1990604401600060405180830381600087803b15801561062557600080fd5b505af1158015610639573d6000803e3d6000fd5b506106749250506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169050836000610d29565b6106a86001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168386610d29565b6040516305dc812160e31b8152336004820152602481018590526001600160a01b03831690632ee4090890604401600060405180830381600087803b1580156106f057600080fd5b505af1158015610704573d6000803e3d6000fd5b505050505b50505050565b6001546001600160a01b031633146107395760405162461bcd60e51b815260040161031a906111db565b6040516370a0823160e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301526000917f0000000000000000000000000000000000000000000000000000000000000000909116906370a0823190602401602060405180830381865afa1580156107c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107e891906111c2565b90508060000361033157600061080263077f880042611210565b9050600062093a806108148184611228565b61081e919061124a565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166386d1a69f6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561087b57600080fd5b505af115801561088f573d6000803e3d6000fd5b50506040516370a0823160e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001660048201526000925073ba100000625a3754423978a60c9317c58a424e3d91506370a0823190602401602060405180830381865afa15801561090e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061093291906111c2565b604051635a9602ff60e11b815260048101829052602481018590529091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063b52c05fe90604401600060405180830381600087803b15801561099e57600080fd5b505af11580156109b2573d6000803e3d6000fd5b50505060039290925550505050565b6109cd8282600061041c565b5050565b6040516370a0823160e01b815230600482015260009073ba100000625a3754423978a60c9317c58a424e3d906370a0823190602401602060405180830381865afa158015610a23573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a4791906111c2565b90508015610a8e57610a8e73ba100000625a3754423978a60c9317c58a424e3d7f000000000000000000000000000000000000000000000000000000000000000083610e3e565b6040516370a0823160e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016600482015260009073ba100000625a3754423978a60c9317c58a424e3d906370a0823190602401602060405180830381865afa158015610b09573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b2d91906111c2565b905080600003610b3b575050565b604051630aa2b75d60e11b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906315456eba90602401600060405180830381600087803b158015610b9d57600080fd5b505af1158015610bb1573d6000803e3d6000fd5b50505050600063077f880042610bc79190611210565b9050600062093a80610bd98184611228565b610be3919061124a565b90506002610bfc60035483610d1d90919063ffffffff16565b111561070957604051631e4d150d60e11b8152600481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690633c9a2a1a90602401600060405180830381600087803b158015610c6457600080fd5b505af1158015610c78573d6000803e3d6000fd5b50505060038290555050505050565b6040516001600160a01b03808516602483015283166044820152606481018290526107099085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152610e6e565b6000610cfe8284611210565b9392505050565b6000610cfe828461124a565b6000610cfe8284611228565b6000610cfe8284611269565b801580610da35750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e90604401602060405180830381865afa158015610d7d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610da191906111c2565b155b610e0e5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b606482015260840161031a565b6040516001600160a01b0383166024820152604481018290526102eb90849063095ea7b360e01b90606401610cbb565b6040516001600160a01b0383166024820152604481018290526102eb90849063a9059cbb60e01b90606401610cbb565b6000610ec3826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610f409092919063ffffffff16565b8051909150156102eb5780806020019051810190610ee19190611280565b6102eb5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161031a565b6060610f4f8484600085610f57565b949350505050565b606082471015610fb85760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161031a565b6001600160a01b0385163b61100f5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161031a565b600080866001600160a01b0316858760405161102b91906112c9565b60006040518083038185875af1925050503d8060008114611068576040519150601f19603f3d011682016040523d82523d6000602084013e61106d565b606091505b509150915061107d828286611088565b979650505050505050565b60608315611097575081610cfe565b8251156110a75782518084602001fd5b8160405162461bcd60e51b815260040161031a91906112e5565b801515811461033157600080fd5b80356001600160a01b03811681146110e657600080fd5b919050565b600080604083850312156110fe57600080fd5b8235611109816110c1565b9150611117602084016110cf565b90509250929050565b60006020828403121561113257600080fd5b5035919050565b60006020828403121561114b57600080fd5b610cfe826110cf565b60008060006060848603121561116957600080fd5b83359250602084013561117b816110c1565b9150611189604085016110cf565b90509250925092565b600080604083850312156111a557600080fd5b8235915060208301356111b7816110c1565b809150509250929050565b6000602082840312156111d457600080fd5b5051919050565b602080825260059082015264042c2eae8d60db1b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b60008219821115611223576112236111fa565b500190565b60008261124557634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615611264576112646111fa565b500290565b60008282101561127b5761127b6111fa565b500390565b60006020828403121561129257600080fd5b8151610cfe816110c1565b60005b838110156112b85781810151838201526020016112a0565b838111156107095750506000910152565b600082516112db81846020870161129d565b9190910192915050565b602081526000825180602084015261130481604085016020870161129d565b601f01601f1916919091016040019291505056fea2646970667358221220ca807634a06b6923909c2626317aad17bb0b19543192a211333cc4f11b87147164736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101005760003560e01c80635ebaf1db11610097578063c5230deb11610066578063c5230deb1461021c578063d0fb020314610225578063d73792a914610238578063e2fdcc171461024157600080fd5b80635ebaf1db146101c757806380ed71e4146101ee578063836f8f20146102015780639a4083211461020957600080fd5b80633d79d1c8116100d35780633d79d1c814610188578063472d35b9146101a35780634f805abb146101b657806350940618146101be57600080fd5b80630754617214610105578063215537fd14610149578063251c1aa31461015e5780633d18678e14610175575b600080fd5b61012c7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b61015c6101573660046110eb565b610268565b005b61016760035481565b604051908152602001610140565b61015c610183366004611120565b6102f0565b61012c73ba100000625a3754423978a60c9317c58a424e3d81565b61015c6101b1366004611139565b610334565b61015c610380565b61016760005481565b61012c7f000000000000000000000000000000000000000000000000000000000000000081565b61015c6101fc366004611154565b61041c565b61015c61070f565b61015c610217366004611192565b6109c1565b61016760025481565b60015461012c906001600160a01b031681565b61016761271081565b61012c7f000000000000000000000000000000000000000000000000000000000000000081565b6040516370a0823160e01b815233600482015260009073ba100000625a3754423978a60c9317c58a424e3d906370a0823190602401602060405180830381865afa1580156102ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102de91906111c2565b90506102eb81848461041c565b505050565b6001546001600160a01b031633146103235760405162461bcd60e51b815260040161031a906111db565b60405180910390fd5b601e81116103315760008190555b50565b6001546001600160a01b0316331461035e5760405162461bcd60e51b815260040161031a906111db565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6103886109d1565b6002541561041a576002546040516340c10f1960e01b815233600482015260248101919091527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906340c10f1990604401600060405180830381600087803b1580156103fc57600080fd5b505af1158015610410573d6000803e3d6000fd5b5050600060025550505b565b600083116104525760405162461bcd60e51b81526020600482015260036024820152620213e360ec1b604482015260640161031a565b81156104c35761049873ba100000625a3754423978a60c9317c58a424e3d337f000000000000000000000000000000000000000000000000000000000000000086610c87565b6104a06109d1565b600254156104be576002546104b6908490610cf2565b600060025592505b610527565b6104e373ba100000625a3754423978a60c9317c58a424e3d333086610c87565b600061050661271061050060005487610d0590919063ffffffff16565b90610d11565b90506105128482610d1d565b6002549094506105229082610cf2565b600255505b6001600160a01b0381161580156105bd576040516340c10f1960e01b8152336004820152602481018590527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906340c10f1990604401600060405180830381600087803b1580156105a057600080fd5b505af11580156105b4573d6000803e3d6000fd5b50505050610709565b6040516340c10f1960e01b8152306004820152602481018590527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906340c10f1990604401600060405180830381600087803b15801561062557600080fd5b505af1158015610639573d6000803e3d6000fd5b506106749250506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169050836000610d29565b6106a86001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168386610d29565b6040516305dc812160e31b8152336004820152602481018590526001600160a01b03831690632ee4090890604401600060405180830381600087803b1580156106f057600080fd5b505af1158015610704573d6000803e3d6000fd5b505050505b50505050565b6001546001600160a01b031633146107395760405162461bcd60e51b815260040161031a906111db565b6040516370a0823160e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301526000917f0000000000000000000000000000000000000000000000000000000000000000909116906370a0823190602401602060405180830381865afa1580156107c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107e891906111c2565b90508060000361033157600061080263077f880042611210565b9050600062093a806108148184611228565b61081e919061124a565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166386d1a69f6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561087b57600080fd5b505af115801561088f573d6000803e3d6000fd5b50506040516370a0823160e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001660048201526000925073ba100000625a3754423978a60c9317c58a424e3d91506370a0823190602401602060405180830381865afa15801561090e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061093291906111c2565b604051635a9602ff60e11b815260048101829052602481018590529091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063b52c05fe90604401600060405180830381600087803b15801561099e57600080fd5b505af11580156109b2573d6000803e3d6000fd5b50505060039290925550505050565b6109cd8282600061041c565b5050565b6040516370a0823160e01b815230600482015260009073ba100000625a3754423978a60c9317c58a424e3d906370a0823190602401602060405180830381865afa158015610a23573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a4791906111c2565b90508015610a8e57610a8e73ba100000625a3754423978a60c9317c58a424e3d7f000000000000000000000000000000000000000000000000000000000000000083610e3e565b6040516370a0823160e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016600482015260009073ba100000625a3754423978a60c9317c58a424e3d906370a0823190602401602060405180830381865afa158015610b09573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b2d91906111c2565b905080600003610b3b575050565b604051630aa2b75d60e11b8152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906315456eba90602401600060405180830381600087803b158015610b9d57600080fd5b505af1158015610bb1573d6000803e3d6000fd5b50505050600063077f880042610bc79190611210565b9050600062093a80610bd98184611228565b610be3919061124a565b90506002610bfc60035483610d1d90919063ffffffff16565b111561070957604051631e4d150d60e11b8152600481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690633c9a2a1a90602401600060405180830381600087803b158015610c6457600080fd5b505af1158015610c78573d6000803e3d6000fd5b50505060038290555050505050565b6040516001600160a01b03808516602483015283166044820152606481018290526107099085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152610e6e565b6000610cfe8284611210565b9392505050565b6000610cfe828461124a565b6000610cfe8284611228565b6000610cfe8284611269565b801580610da35750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e90604401602060405180830381865afa158015610d7d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610da191906111c2565b155b610e0e5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b606482015260840161031a565b6040516001600160a01b0383166024820152604481018290526102eb90849063095ea7b360e01b90606401610cbb565b6040516001600160a01b0383166024820152604481018290526102eb90849063a9059cbb60e01b90606401610cbb565b6000610ec3826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610f409092919063ffffffff16565b8051909150156102eb5780806020019051810190610ee19190611280565b6102eb5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161031a565b6060610f4f8484600085610f57565b949350505050565b606082471015610fb85760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161031a565b6001600160a01b0385163b61100f5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161031a565b600080866001600160a01b0316858760405161102b91906112c9565b60006040518083038185875af1925050503d8060008114611068576040519150601f19603f3d011682016040523d82523d6000602084013e61106d565b606091505b509150915061107d828286611088565b979650505050505050565b60608315611097575081610cfe565b8251156110a75782518084602001fd5b8160405162461bcd60e51b815260040161031a91906112e5565b801515811461033157600080fd5b80356001600160a01b03811681146110e657600080fd5b919050565b600080604083850312156110fe57600080fd5b8235611109816110c1565b9150611117602084016110cf565b90509250929050565b60006020828403121561113257600080fd5b5035919050565b60006020828403121561114b57600080fd5b610cfe826110cf565b60008060006060848603121561116957600080fd5b83359250602084013561117b816110c1565b9150611189604085016110cf565b90509250925092565b600080604083850312156111a557600080fd5b8235915060208301356111b7816110c1565b809150509250929050565b6000602082840312156111d457600080fd5b5051919050565b602080825260059082015264042c2eae8d60db1b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b60008219821115611223576112236111fa565b500190565b60008261124557634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615611264576112646111fa565b500290565b60008282101561127b5761127b6111fa565b500390565b60006020828403121561129257600080fd5b8151610cfe816110c1565b60005b838110156112b85781810151838201526020016112a0565b838111156107095750506000910152565b600082516112db81846020870161129d565b9190910192915050565b602081526000825180602084015261130481604085016020870161129d565b601f01601f1916919091016040019291505056fea2646970667358221220ca807634a06b6923909c2626317aad17bb0b19543192a211333cc4f11b87147164736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2489,
        "contract": "contracts/BalDepositor.sol:BalDepositor",
        "label": "lockIncentive",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 2494,
        "contract": "contracts/BalDepositor.sol:BalDepositor",
        "label": "feeManager",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 2501,
        "contract": "contracts/BalDepositor.sol:BalDepositor",
        "label": "incentiveBal",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 2503,
        "contract": "contracts/BalDepositor.sol:BalDepositor",
        "label": "unlockTime",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}