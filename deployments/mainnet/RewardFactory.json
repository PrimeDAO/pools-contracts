{
  "address": "0x55eEFF0eEc6884aB3Ac1F3C454501dd9a8f2Df85",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_bal",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "Unauthorized",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "poolAddress",
          "type": "address"
        }
      ],
      "name": "BaseRewardPoolCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "reward",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        }
      ],
      "name": "ExtraRewardAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "reward",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        }
      ],
      "name": "ExtraRewardRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "stash",
          "type": "address"
        }
      ],
      "name": "StashAccessGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "baseRewardPool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "poolAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "VirtualBalanceRewardPoolCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_reward",
          "type": "address"
        }
      ],
      "name": "activeRewardCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_reward",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "addActiveReward",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bal",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_depositToken",
          "type": "address"
        }
      ],
      "name": "createBalRewards",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_mainRewards",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_rewardPoolOwner",
          "type": "address"
        }
      ],
      "name": "createTokenRewards",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stash",
          "type": "address"
        }
      ],
      "name": "grantRewardStashAccess",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "operator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_reward",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "removeActiveReward",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rewardActiveList",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x03ecb961980ced3adfe9220d59336a8a07054cba192f37e49ce0a32258d38dda",
  "receipt": {
    "to": null,
    "from": "0x5F9a7EA6A79Ef04F103bfe7BD45dA65476a5155C",
    "contractAddress": "0x55eEFF0eEc6884aB3Ac1F3C454501dd9a8f2Df85",
    "transactionIndex": 224,
    "gasUsed": "3686714",
    "logsBloom": "0x
    "blockHash": "0x0936ccfb2aefe31d81ebc0066718387d6b6119c0478b7968384a05077b9bb291",
    "transactionHash": "0x03ecb961980ced3adfe9220d59336a8a07054cba192f37e49ce0a32258d38dda",
    "logs": [],
    "blockNumber": 15267195,
    "cumulativeGasUsed": "18481147",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x190Bfc8FC0BC0C734c34383eAD884D00E00E91c0",
    "0xba100000625a3754423978a60c9317c58a424e3d"
  ],
  "solcInputHash": "7e57f81a6be83430d315781a62c52ee2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bal\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"}],\"name\":\"BaseRewardPoolCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"reward\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"ExtraRewardAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"reward\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"ExtraRewardRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"stash\",\"type\":\"address\"}],\"name\":\"StashAccessGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"baseRewardPool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"VirtualBalanceRewardPoolCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_reward\",\"type\":\"address\"}],\"name\":\"activeRewardCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_reward\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"addActiveReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_depositToken\",\"type\":\"address\"}],\"name\":\"createBalRewards\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mainRewards\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardPoolOwner\",\"type\":\"address\"}],\"name\":\"createTokenRewards\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stash\",\"type\":\"address\"}],\"name\":\"grantRewardStashAccess\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_reward\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"removeActiveReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardActiveList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"activeRewardCount(address)\":{\"returns\":{\"_0\":\"uint256 number of active rewards\"}},\"addActiveReward(address,uint256)\":{\"returns\":{\"_0\":\"true on success\"}},\"createBalRewards(uint256,address)\":{\"params\":{\"_depositToken\":\"address of the token\",\"_pid\":\"The pid of the pool\"}},\"createTokenRewards(address,address,address)\":{\"details\":\"used for extra incentive tokens(ex. snx) as well as vebal fees\",\"params\":{\"_mainRewards\":\"address of the main reward pool contract\",\"_rewardPoolOwner\":\"address of the reward pool owner\",\"_token\":\"address of the token\"},\"returns\":{\"_0\":\"address of the new reward pool\"}},\"grantRewardStashAccess(address)\":{\"details\":\"Stash contracts need access to create new Virtual balance pools for extra gauge incentives(ex. snx)\"},\"removeActiveReward(address,uint256)\":{\"params\":{\"_pid\":\"The pid of the pool\",\"_reward\":\"The address of the reward contract\"},\"returns\":{\"_0\":\"true on success\"}}},\"title\":\"RewardFactory contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"activeRewardCount(address)\":{\"notice\":\"Get active rewards count\"},\"addActiveReward(address,uint256)\":{\"notice\":\"Adds a new reward to the active list\"},\"createBalRewards(uint256,address)\":{\"notice\":\"Creates a new Reward pool\"},\"createTokenRewards(address,address,address)\":{\"notice\":\"Create a virtual balance reward pool that mimicks the balance of a pool's main reward contract\"},\"grantRewardStashAccess(address)\":{\"notice\":\"Grants rewardAccess to stash\"},\"removeActiveReward(address,uint256)\":{\"notice\":\"Removes active reward\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/factories/RewardFactory.sol\":\"RewardFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"contracts/BaseRewardPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n/**\\n *Submitted for verification at Etherscan.io on 2020-07-17\\n */\\n\\n/*\\n   ____            __   __        __   _\\n  / __/__ __ ___  / /_ / /  ___  / /_ (_)__ __\\n _\\\\ \\\\ / // // _ \\\\/ __// _ \\\\/ -_)/ __// / \\\\ \\\\ /\\n/___/ \\\\_, //_//_/\\\\__//_//_/\\\\__/ \\\\__//_/ /_\\\\_\\\\\\n     /___/\\n* Synthetix: BaseRewardPool.sol\\n*\\n* Docs: https://docs.synthetix.io/\\n*\\n*\\n* MIT License\\n*\\n*\\n* Copyright (c) 2020 Synthetix\\n*\\n* Permission is hereby granted, free of charge, to any person obtaining a copy\\n* of this software and associated documentation files (the \\\"Software\\\"), to deal\\n* in the Software without restriction, including without limitation the rights\\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n* copies of the Software, and to permit persons to whom the Software is\\n* furnished to do so, subject to the following conditions:\\n*\\n* The above copyright notice and this permission notice shall be included in all\\n* copies or substantial portions of the Software.\\n*\\n* THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n*/\\n\\n/**\\n *Submitted for verification at Etherscan.io on 2020-07-17\\n */\\n\\n/*\\n   ____            __   __        __   _\\n  / __/__ __ ___  / /_ / /  ___  / /_ (_)__ __\\n _\\\\ \\\\ / // // _ \\\\/ __// _ \\\\/ -_)/ __// / \\\\ \\\\ /\\n/___/ \\\\_, //_//_/\\\\__//_//_/\\\\__/ \\\\__//_/ /_\\\\_\\\\\\n     /___/\\n* Synthetix: BaseRewardPool.sol\\n*\\n* Docs: https://docs.synthetix.io/\\n*\\n*\\n* MIT License\\n*\\n*\\n* Copyright (c) 2020 Synthetix\\n*\\n* Permission is hereby granted, free of charge, to any person obtaining a copy\\n* of this software and associated documentation files (the \\\"Software\\\"), to deal\\n* in the Software without restriction, including without limitation the rights\\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n* copies of the Software, and to permit persons to whom the Software is\\n* furnished to do so, subject to the following conditions:\\n*\\n* The above copyright notice and this permission notice shall be included in all\\n* copies or substantial portions of the Software.\\n*\\n* THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n*/\\n\\nimport \\\"./utils/Interfaces.sol\\\";\\nimport \\\"./utils/MathUtil.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n/// @title Base Reward Pool contract\\n/// @dev Rewards contract for Prime Pools is based on the convex contract\\ncontract BaseRewardPool is IBaseRewardsPool {\\n    using SafeERC20 for IERC20;\\n    using MathUtil for uint256;\\n\\n    event RewardAdded(uint256 reward);\\n    event Staked(address indexed user, uint256 amount);\\n    event Withdrawn(address indexed user, uint256 amount);\\n    event RewardPaid(address indexed user, uint256 reward);\\n    event ExtraRewardsCleared();\\n    event ExtraRewardCleared(address extraReward);\\n\\n    error Unauthorized();\\n    error InvalidAmount();\\n\\n    uint256 public constant DURATION = 7 days;\\n    uint256 public constant NEW_REWARD_RATIO = 830;\\n\\n    // Rewards token is Bal\\n    IERC20 public immutable rewardToken;\\n    IERC20 public immutable stakingToken;\\n\\n    // Operator is Controller smart contract\\n    address public immutable operator;\\n    address public immutable rewardManager;\\n\\n    uint256 public pid;\\n    uint256 public periodFinish;\\n    uint256 public rewardRate;\\n    uint256 public lastUpdateTime;\\n    uint256 public rewardPerTokenStored;\\n    uint256 public queuedRewards;\\n    uint256 public currentRewards;\\n    uint256 public historicalRewards;\\n    uint256 private _totalSupply;\\n\\n    mapping(address => uint256) public userRewardPerTokenPaid;\\n    mapping(address => uint256) public rewards;\\n    mapping(address => uint256) private _balances;\\n\\n    address[] public extraRewards;\\n\\n    constructor(\\n        uint256 pid_,\\n        address stakingToken_,\\n        address rewardToken_,\\n        address operator_,\\n        address rewardManager_\\n    ) {\\n        pid = pid_;\\n        stakingToken = IERC20(stakingToken_);\\n        rewardToken = IERC20(rewardToken_);\\n        operator = operator_;\\n        rewardManager = rewardManager_;\\n    }\\n\\n    modifier updateReward(address account) {\\n        rewardPerTokenStored = rewardPerToken();\\n        lastUpdateTime = lastTimeRewardApplicable();\\n        if (account != address(0)) {\\n            rewards[account] = earned(account);\\n            userRewardPerTokenPaid[account] = rewardPerTokenStored;\\n        }\\n        _;\\n    }\\n\\n    modifier onlyAddress(address authorizedAddress) {\\n        if (msg.sender != authorizedAddress) {\\n            revert Unauthorized();\\n        }\\n        _;\\n    }\\n\\n    /// @notice Returns total supply\\n    function totalSupply() public view returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /// @notice Get the specified address' balance\\n    /// @param account The address of the token holder\\n    /// @return The `account`'s balance\\n    function balanceOf(address account) public view returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /// @notice Returns number of extra rewards\\n    function extraRewardsLength() external view returns (uint256) {\\n        return extraRewards.length;\\n    }\\n\\n    /// @notice Adds an extra reward\\n    /// @dev only `rewardManager` can add extra rewards\\n    /// @param _reward token address of the reward\\n    function addExtraReward(address _reward) external onlyAddress(rewardManager) {\\n        require(_reward != address(0), \\\"!reward setting\\\");\\n        extraRewards.push(_reward);\\n    }\\n\\n    /// @notice Clears extra rewards\\n    /// @dev Only Prime multising has the ability to do this\\n    /// if you want to remove only one token, use `clearExtraReward`\\n    function clearExtraRewards() external onlyAddress(IController(operator).owner()) {\\n        delete extraRewards;\\n        emit ExtraRewardsCleared();\\n    }\\n\\n    /// @notice Clears extra reward by index\\n    /// @param index index of the extra reward to clear\\n    function clearExtraReward(uint256 index) external onlyAddress(IController(operator).owner()) {\\n        address extraReward = extraRewards[index];\\n        // Move the last element into the place to delete\\n        extraRewards[index] = extraRewards[extraRewards.length - 1];\\n        // Remove the last element\\n        extraRewards.pop();\\n        emit ExtraRewardCleared(extraReward);\\n    }\\n\\n    /// @notice Returns last time reward applicable\\n    /// @return The lower value of current block.timestamp or last time reward applicable\\n    function lastTimeRewardApplicable() public view returns (uint256) {\\n        // solhint-disable-next-line\\n        return MathUtil.min(block.timestamp, periodFinish);\\n    }\\n\\n    /// @notice Returns rewards per token staked\\n    /// @return The rewards per token staked\\n    function rewardPerToken() public view returns (uint256) {\\n        uint256 totalSupplyMemory = totalSupply();\\n        if (totalSupplyMemory == 0) {\\n            return rewardPerTokenStored;\\n        }\\n        return\\n            rewardPerTokenStored +\\n            (((lastTimeRewardApplicable() - lastUpdateTime) * rewardRate * 1e18) / totalSupplyMemory);\\n    }\\n\\n    /// @notice Returns the `account`'s earned rewards\\n    /// @param account The address of the token holder\\n    /// @return The `account`'s earned rewards\\n    function earned(address account) public view returns (uint256) {\\n        return (balanceOf(account) * (rewardPerToken() - userRewardPerTokenPaid[account])) / 1e18 + rewards[account];\\n    }\\n\\n    /// @notice Stakes `amount` tokens\\n    /// @param _amount The amount of tokens user wants to stake\\n    function stake(uint256 _amount) public {\\n        stakeFor(msg.sender, _amount);\\n    }\\n\\n    /// @notice Stakes all BAL tokens\\n    function stakeAll() external {\\n        uint256 balance = stakingToken.balanceOf(msg.sender);\\n        stake(balance);\\n    }\\n\\n    /// @notice Stakes `amount` tokens for `_for`\\n    /// @param _for Who are we staking for\\n    /// @param _amount The amount of tokens user wants to stake\\n    function stakeFor(address _for, uint256 _amount) public updateReward(_for) {\\n        if (_amount < 1) {\\n            revert InvalidAmount();\\n        }\\n\\n        stakeToExtraRewards(_for, _amount);\\n\\n        _totalSupply = _totalSupply + (_amount);\\n        // update _for balances\\n        _balances[_for] = _balances[_for] + (_amount);\\n        // take away from sender\\n        stakingToken.transferFrom(msg.sender, address(this), _amount);\\n        emit Staked(_for, _amount);\\n    }\\n\\n    /// @notice Withdraw `amount` tokens and possibly unwrap\\n    /// @param _amount The amount of tokens that the user wants to withdraw\\n    /// @param _claim Whether or not the user wants to claim their rewards\\n    /// @param _unwrap Whether or not the user wants to unwrap to BLP tokens\\n    function withdraw(\\n        uint256 _amount,\\n        bool _claim,\\n        bool _unwrap\\n    ) public updateReward(msg.sender) {\\n        if (_amount < 1) {\\n            revert InvalidAmount();\\n        }\\n\\n        // withdraw from linked rewards\\n        withdrawExtraRewards(msg.sender, _amount);\\n\\n        _totalSupply = _totalSupply - (_amount);\\n        _balances[msg.sender] = _balances[msg.sender] - (_amount);\\n\\n        if (_unwrap) {\\n            IController(operator).withdrawTo(pid, _amount, msg.sender);\\n        } else {\\n            // return staked tokens to sender\\n            stakingToken.transfer(msg.sender, _amount);\\n        }\\n        emit Withdrawn(msg.sender, _amount);\\n\\n        // claim staking rewards\\n        if (_claim) {\\n            getReward(msg.sender, true);\\n        }\\n    }\\n\\n    /// @notice Withdraw all tokens\\n    /// @param _claim Whether or not the user wants to claim their rewards\\n    function withdrawAll(bool _claim) external {\\n        withdraw(_balances[msg.sender], _claim, false);\\n    }\\n\\n    /// @notice Withdraw all tokens and unwrap\\n    /// @param _claim Whether or not the user wants to claim their rewards\\n    function withdrawAllAndUnwrap(bool _claim) external {\\n        withdraw(_balances[msg.sender], _claim, true);\\n    }\\n\\n    /// @notice Claims Rewards for `_account`\\n    /// @param _account The account to claim rewards for\\n    /// @param _claimExtras Whether or not the user wants to claim extra rewards\\n    function getReward(address _account, bool _claimExtras) public updateReward(_account) {\\n        uint256 reward = rewards[_account];\\n        if (reward > 0) {\\n            rewards[_account] = 0;\\n            rewardToken.safeTransfer(_account, reward);\\n            emit RewardPaid(_account, reward);\\n        }\\n\\n        // also get rewards from linked rewards\\n        if (_claimExtras) {\\n            address[] memory extraRewardsMemory = extraRewards;\\n            for (uint256 i = 0; i < extraRewardsMemory.length; i = i.unsafeInc()) {\\n                IRewards(extraRewardsMemory[i]).getReward(_account);\\n            }\\n        }\\n    }\\n\\n    /// @notice Claims Reward for signer\\n    function getReward() external {\\n        getReward(msg.sender, true);\\n    }\\n\\n    /// @notice Donates reward token to this contract\\n    /// @param _amount The amount of tokens to donate\\n    function donate(uint256 _amount) external {\\n        IERC20(rewardToken).safeTransferFrom(msg.sender, address(this), _amount);\\n        queuedRewards = queuedRewards + _amount;\\n    }\\n\\n    /// @notice Queue new rewards\\n    /// @dev Only the operator can queue new rewards\\n    /// @param _rewards The amount of tokens to queue\\n    function queueNewRewards(uint256 _rewards) external onlyAddress(operator) {\\n        _rewards = _rewards + queuedRewards;\\n\\n        // solhint-disable-next-line\\n        if (block.timestamp >= periodFinish) {\\n            notifyRewardAmount(_rewards);\\n            queuedRewards = 0;\\n            return;\\n        }\\n\\n        // solhint-disable-next-line\\n        uint256 elapsedTime = block.timestamp - (periodFinish - DURATION);\\n        uint256 currentAtNow = rewardRate * elapsedTime;\\n        uint256 queuedRatio = (currentAtNow * 1000) / _rewards;\\n\\n        if (queuedRatio < NEW_REWARD_RATIO) {\\n            notifyRewardAmount(_rewards);\\n            queuedRewards = 0;\\n        } else {\\n            queuedRewards = _rewards;\\n        }\\n    }\\n\\n    /// @dev Stakes `amount` tokens for address `for` to extra rewards tokens\\n    /// RewardManager `rewardManager` is responsible for adding reward tokens\\n    /// @param _for Who are we staking for\\n    /// @param _amount The amount of tokens user wants to stake\\n    function stakeToExtraRewards(address _for, uint256 _amount) internal {\\n        address[] memory extraRewardsMemory = extraRewards;\\n        for (uint256 i = 0; i < extraRewardsMemory.length; i = i.unsafeInc()) {\\n            IRewards(extraRewardsMemory[i]).stake(_for, _amount);\\n        }\\n    }\\n\\n    /// @dev Stakes `amount` tokens for address `for` to extra rewards tokens\\n    /// RewardManager `rewardManager` is responsible for adding reward tokens\\n    /// @param _for Who are we staking for\\n    /// @param _amount The amount of tokens user wants to stake\\n    function withdrawExtraRewards(address _for, uint256 _amount) internal {\\n        address[] memory extraRewardsMemory = extraRewards;\\n        for (uint256 i = 0; i < extraRewardsMemory.length; i = i.unsafeInc()) {\\n            IRewards(extraRewardsMemory[i]).withdraw(_for, _amount);\\n        }\\n    }\\n\\n    function notifyRewardAmount(uint256 reward) internal updateReward(address(0)) {\\n        historicalRewards = historicalRewards + reward;\\n        // solhint-disable-next-line\\n        if (block.timestamp >= periodFinish) {\\n            rewardRate = reward / DURATION;\\n        } else {\\n            // solhint-disable-next-line\\n            uint256 remaining = periodFinish - block.timestamp;\\n            uint256 leftover = remaining * rewardRate;\\n            reward = reward + leftover;\\n            rewardRate = reward / DURATION;\\n        }\\n        currentRewards = reward;\\n        // solhint-disable-next-line\\n        lastUpdateTime = block.timestamp;\\n        // solhint-disable-next-line\\n        periodFinish = block.timestamp + DURATION;\\n        emit RewardAdded(reward);\\n    }\\n}\\n\",\"keccak256\":\"0xb848a45c0fc0eefb81f2e9e7b0f4f5bd49f9d3cdae30d9286c2b120c4e60c0a9\",\"license\":\"MIT\"},\"contracts/VirtualBalanceRewardPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n/**\\n *Submitted for verification at Etherscan.io on 2020-07-17\\n */\\n\\n/*\\n   ____            __   __        __   _\\n  / __/__ __ ___  / /_ / /  ___  / /_ (_)__ __\\n _\\\\ \\\\ / // // _ \\\\/ __// _ \\\\/ -_)/ __// / \\\\ \\\\ /\\n/___/ \\\\_, //_//_/\\\\__//_//_/\\\\__/ \\\\__//_/ /_\\\\_\\\\\\n     /___/\\n* Synthetix: VirtualBalanceRewardPool.sol\\n*\\n* Docs: https://docs.synthetix.io/\\n*\\n*\\n* MIT License\\n* ===========\\n*\\n* Copyright (c) 2020 Synthetix\\n*\\n* Permission is hereby granted, free of charge, to any person obtaining a copy\\n* of this software and associated documentation files (the \\\"Software\\\"), to deal\\n* in the Software without restriction, including without limitation the rights\\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n* copies of the Software, and to permit persons to whom the Software is\\n* furnished to do so, subject to the following conditions:\\n*\\n* The above copyright notice and this permission notice shall be included in all\\n* copies or substantial portions of the Software.\\n*\\n* THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n*/\\n\\nimport \\\"./utils/Interfaces.sol\\\";\\nimport \\\"./utils/MathUtil.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\ncontract VirtualBalanceRewardPool {\\n    using SafeERC20 for IERC20;\\n\\n    event RewardAdded(uint256 reward);\\n    event Staked(address indexed user, uint256 amount);\\n    event Withdrawn(address indexed user, uint256 amount);\\n    event RewardPaid(address indexed user, uint256 reward);\\n\\n    error Unauthorized();\\n\\n    uint256 public constant DURATION = 7 days;\\n    uint256 public constant NEW_REWARD_RATIO = 830;\\n\\n    IBaseRewardsPool public immutable deposits;\\n    IERC20 public immutable rewardToken;\\n    address public immutable operator;\\n\\n    uint256 public periodFinish;\\n    uint256 public rewardRate;\\n    uint256 public lastUpdateTime;\\n    uint256 public rewardPerTokenStored;\\n    uint256 public queuedRewards;\\n    uint256 public currentRewards;\\n    uint256 public historicalRewards;\\n\\n    mapping(address => uint256) public userRewardPerTokenPaid;\\n    mapping(address => uint256) public rewards;\\n\\n    constructor(\\n        address deposit_,\\n        address reward_,\\n        address op_\\n    ) {\\n        deposits = IBaseRewardsPool(deposit_);\\n        rewardToken = IERC20(reward_);\\n        operator = op_;\\n    }\\n\\n    modifier updateReward(address account) {\\n        rewardPerTokenStored = rewardPerToken();\\n        lastUpdateTime = lastTimeRewardApplicable();\\n        if (account != address(0)) {\\n            rewards[account] = earned(account);\\n            userRewardPerTokenPaid[account] = rewardPerTokenStored;\\n        }\\n        _;\\n    }\\n\\n    modifier onlyDeposits() {\\n        if (msg.sender != address(deposits)) {\\n            revert Unauthorized();\\n        }\\n        _;\\n    }\\n\\n    function totalSupply() public view returns (uint256) {\\n        return deposits.totalSupply();\\n    }\\n\\n    function balanceOf(address account) public view returns (uint256) {\\n        return deposits.balanceOf(account);\\n    }\\n\\n    function lastTimeRewardApplicable() public view returns (uint256) {\\n        // solhint-disable-next-line\\n        return MathUtil.min(block.timestamp, periodFinish);\\n    }\\n\\n    function rewardPerToken() public view returns (uint256) {\\n        uint256 totalSupplyMemory = totalSupply();\\n        if (totalSupplyMemory == 0) {\\n            return rewardPerTokenStored;\\n        }\\n        return\\n            rewardPerTokenStored +\\n            (((lastTimeRewardApplicable() - lastUpdateTime) * rewardRate * 1e18) / totalSupplyMemory);\\n    }\\n\\n    function earned(address account) public view returns (uint256) {\\n        return (balanceOf(account) * (rewardPerToken() - userRewardPerTokenPaid[account])) / 1e18 + rewards[account];\\n    }\\n\\n    //update reward, emit, call linked reward's stake\\n    function stake(address _account, uint256 amount) external updateReward(_account) onlyDeposits {\\n        emit Staked(_account, amount);\\n    }\\n\\n    function withdraw(address _account, uint256 amount) public updateReward(_account) onlyDeposits {\\n        emit Withdrawn(_account, amount);\\n    }\\n\\n    function getReward(address _account) public updateReward(_account) {\\n        uint256 reward = earned(_account);\\n        if (reward > 0) {\\n            rewards[_account] = 0;\\n            rewardToken.safeTransfer(_account, reward);\\n            emit RewardPaid(_account, reward);\\n        }\\n    }\\n\\n    function getReward() external {\\n        getReward(msg.sender);\\n    }\\n\\n    function donate(uint256 _amount) external {\\n        IERC20(rewardToken).safeTransferFrom(msg.sender, address(this), _amount);\\n        queuedRewards = queuedRewards + _amount;\\n    }\\n\\n    function queueNewRewards(uint256 _rewards) external {\\n        if (msg.sender != operator) {\\n            revert Unauthorized();\\n        }\\n        _rewards = _rewards + queuedRewards;\\n        // solhint-disable-next-line\\n        if (block.timestamp >= periodFinish) {\\n            notifyRewardAmount(_rewards);\\n            queuedRewards = 0;\\n            return;\\n        }\\n\\n        //et = now - (finish-duration)\\n        // solhint-disable-next-line\\n        uint256 elapsedTime = block.timestamp - (periodFinish - DURATION);\\n        //current at now: rewardRate * elapsedTime\\n        uint256 currentAtNow = rewardRate * elapsedTime;\\n        uint256 queuedRatio = (currentAtNow * 1000) / _rewards;\\n        if (queuedRatio < NEW_REWARD_RATIO) {\\n            notifyRewardAmount(_rewards);\\n            queuedRewards = 0;\\n        } else {\\n            queuedRewards = _rewards;\\n        }\\n    }\\n\\n    function notifyRewardAmount(uint256 reward) internal updateReward(address(0)) {\\n        historicalRewards = historicalRewards + reward;\\n        // solhint-disable-next-line\\n        if (block.timestamp >= periodFinish) {\\n            rewardRate = reward / DURATION;\\n        } else {\\n            // solhint-disable-next-line\\n            uint256 remaining = periodFinish - block.timestamp;\\n            uint256 leftover = remaining * rewardRate;\\n            reward = reward + leftover;\\n            rewardRate = reward / DURATION;\\n        }\\n        currentRewards = reward;\\n        // solhint-disable-next-line\\n        lastUpdateTime = block.timestamp;\\n        // solhint-disable-next-line\\n        periodFinish = block.timestamp + DURATION;\\n        emit RewardAdded(reward);\\n    }\\n}\\n\",\"keccak256\":\"0x98e6eaccaa7c2f6bfb70b25b922b8dd459755567ed9b3c218c4168358de6be8d\",\"license\":\"MIT\"},\"contracts/factories/RewardFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\nimport \\\"../utils/Interfaces.sol\\\";\\nimport \\\"../BaseRewardPool.sol\\\";\\nimport \\\"../VirtualBalanceRewardPool.sol\\\";\\nimport \\\"../utils/MathUtil.sol\\\";\\n\\n/// @title RewardFactory contract\\ncontract RewardFactory is IRewardFactory {\\n    using MathUtil for uint256;\\n\\n    event ExtraRewardAdded(address reward, uint256 pid);\\n    event ExtraRewardRemoved(address reward, uint256 pid);\\n    event StashAccessGranted(address stash);\\n    event BaseRewardPoolCreated(address poolAddress);\\n    event VirtualBalanceRewardPoolCreated(address baseRewardPool, address poolAddress, address token);\\n\\n    error Unauthorized();\\n\\n    address public immutable bal;\\n    address public immutable operator;\\n\\n    mapping(address => bool) private rewardAccess;\\n    mapping(address => uint256[]) public rewardActiveList;\\n\\n    constructor(address _operator, address _bal) {\\n        operator = _operator;\\n        bal = _bal;\\n    }\\n\\n    /// @notice Get active rewards count\\n    /// @return uint256 number of active rewards\\n    function activeRewardCount(address _reward) external view returns (uint256) {\\n        return rewardActiveList[_reward].length;\\n    }\\n\\n    /// @notice Adds a new reward to the active list\\n    /// @return true on success\\n    function addActiveReward(address _reward, uint256 _pid) external returns (bool) {\\n        if (!rewardAccess[msg.sender]) {\\n            revert Unauthorized();\\n        }\\n        uint256 pid = _pid + 1; // offset by 1 so that we can use 0 as empty\\n\\n        uint256[] memory activeListMemory = rewardActiveList[_reward];\\n        for (uint256 i = 0; i < activeListMemory.length; i = i.unsafeInc()) {\\n            if (activeListMemory[i] == pid) return true;\\n        }\\n        rewardActiveList[_reward].push(pid);\\n        emit ExtraRewardAdded(_reward, _pid);\\n        return true;\\n    }\\n\\n    /// @notice Removes active reward\\n    /// @param _reward The address of the reward contract\\n    /// @param _pid The pid of the pool\\n    /// @return true on success\\n    function removeActiveReward(address _reward, uint256 _pid) external returns (bool) {\\n        if (!rewardAccess[msg.sender]) {\\n            revert Unauthorized();\\n        }\\n        uint256 pid = _pid + 1; //offset by 1 so that we can use 0 as empty\\n\\n        uint256[] memory activeListMemory = rewardActiveList[_reward];\\n        for (uint256 i = 0; i < activeListMemory.length; i = i.unsafeInc()) {\\n            if (activeListMemory[i] == pid) {\\n                if (i != activeListMemory.length - 1) {\\n                    rewardActiveList[_reward][i] = rewardActiveList[_reward][activeListMemory.length - 1];\\n                }\\n                rewardActiveList[_reward].pop();\\n                emit ExtraRewardRemoved(_reward, _pid);\\n                break;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /// @notice Grants rewardAccess to stash\\n    /// @dev Stash contracts need access to create new Virtual balance pools for extra gauge incentives(ex. snx)\\n    function grantRewardStashAccess(address _stash) external {\\n        if (msg.sender != operator) {\\n            revert Unauthorized();\\n        }\\n        rewardAccess[_stash] = true;\\n        emit StashAccessGranted(_stash);\\n    }\\n\\n    //Create a Managed Reward Pool to handle distribution of all bal mined in a pool\\n    /// @notice Creates a new Reward pool\\n    /// @param _pid The pid of the pool\\n    /// @param _depositToken address of the token\\n    function createBalRewards(uint256 _pid, address _depositToken) external returns (address) {\\n        if (msg.sender != operator) {\\n            revert Unauthorized();\\n        }\\n\\n        BaseRewardPool rewardPool = new BaseRewardPool(_pid, _depositToken, bal, msg.sender, address(this));\\n        emit BaseRewardPoolCreated(address(rewardPool));\\n\\n        return address(rewardPool);\\n    }\\n\\n    /// @notice Create a virtual balance reward pool that mimicks the balance of a pool's main reward contract\\n    /// @dev used for extra incentive tokens(ex. snx) as well as vebal fees\\n    /// @param _token address of the token\\n    /// @param _mainRewards address of the main reward pool contract\\n    /// @param _rewardPoolOwner address of the reward pool owner\\n    /// @return address of the new reward pool\\n    function createTokenRewards(\\n        address _token,\\n        address _mainRewards,\\n        address _rewardPoolOwner\\n    ) external returns (address) {\\n        if (msg.sender != operator && !rewardAccess[msg.sender]) {\\n            revert Unauthorized();\\n        }\\n\\n        // create new pool, use main pool for balance lookup\\n        VirtualBalanceRewardPool rewardPool = new VirtualBalanceRewardPool(_mainRewards, _token, _rewardPoolOwner);\\n        emit VirtualBalanceRewardPoolCreated(_mainRewards, address(rewardPool), _token);\\n\\n        address rAddress = address(rewardPool);\\n        // add the new pool to main pool's list of extra rewards, assuming this factory has \\\"reward manager\\\" role\\n        IRewards(_mainRewards).addExtraReward(rAddress);\\n        return rAddress;\\n    }\\n}\\n\",\"keccak256\":\"0x53513bc8e2ec830605b26908e234f6cc6db31ad2d0f514f6e80f4fea19e84559\",\"license\":\"MIT\"},\"contracts/utils/Interfaces.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IBalGauge {\\n    function deposit(uint256) external;\\n\\n    function balanceOf(address) external view returns (uint256);\\n\\n    function withdraw(uint256) external;\\n\\n    function claim_rewards() external;\\n\\n    function reward_tokens(uint256) external view returns (address);\\n\\n    function lp_token() external view returns (address);\\n}\\n\\ninterface IBalVoteEscrow {\\n    function create_lock(uint256, uint256) external;\\n\\n    function increase_amount(uint256) external;\\n\\n    function increase_unlock_time(uint256) external;\\n\\n    function withdraw() external;\\n\\n    function smart_wallet_checker() external view returns (address);\\n\\n    function balanceOf(address, uint256) external view returns (uint256);\\n\\n    function balanceOfAt(address, uint256) external view returns (uint256);\\n}\\n\\ninterface IVoting {\\n    function vote_for_gauge_weights(address, uint256) external;\\n}\\n\\ninterface IMinter {\\n    function mint(address) external;\\n}\\n\\ninterface IBalDepositor {\\n    function d2dBal() external view returns (address);\\n\\n    function wethBal() external view returns (address);\\n\\n    function burnD2DBal(address _from, uint256 _amount) external;\\n}\\n\\ninterface IVoterProxy {\\n    function deposit(address _token, address _gauge) external;\\n\\n    function withdrawWethBal(address _to) external;\\n\\n    function wethBal() external view returns (address);\\n\\n    function depositor() external view returns (address);\\n\\n    function withdraw(\\n        address _token,\\n        address _gauge,\\n        uint256 _amount\\n    ) external;\\n\\n    function withdrawAll(address _token, address _gauge) external;\\n\\n    function createLock(uint256 _value, uint256 _unlockTime) external;\\n\\n    function increaseAmount(uint256 _value) external;\\n\\n    function increaseTime(uint256 _unlockTimestamp) external;\\n\\n    function release() external;\\n\\n    function claimBal(address _gauge) external returns (uint256);\\n\\n    function claimRewards(address _gauge) external;\\n\\n    function claimFees(address _distroContract, IERC20[] calldata _tokens) external;\\n\\n    function delegateVotingPower(address _delegateTo) external;\\n\\n    function clearDelegate() external;\\n\\n    function voteMultipleGauges(address[] calldata _gauges, uint256[] calldata _weights) external;\\n\\n    function balanceOfPool(address _gauge) external view returns (uint256);\\n\\n    function operator() external view returns (address);\\n\\n    function execute(\\n        address _to,\\n        uint256 _value,\\n        bytes calldata _data\\n    ) external returns (bool, bytes memory);\\n}\\n\\ninterface ISnapshotDelegateRegistry {\\n    function setDelegate(bytes32 id, address delegate) external;\\n\\n    function clearDelegate(bytes32 id) external;\\n}\\n\\ninterface IRewards {\\n    function stake(address, uint256) external;\\n\\n    function stakeFor(address, uint256) external;\\n\\n    function withdraw(address, uint256) external;\\n\\n    function exit(address) external;\\n\\n    function getReward(address) external;\\n\\n    function queueNewRewards(uint256) external;\\n\\n    function notifyRewardAmount(uint256) external;\\n\\n    function addExtraReward(address) external;\\n\\n    function stakingToken() external view returns (address);\\n\\n    function rewardToken() external view returns (address);\\n\\n    function earned(address account) external view returns (uint256);\\n}\\n\\ninterface IStash {\\n    function processStash() external;\\n\\n    function claimRewards() external;\\n\\n    function initialize(\\n        uint256 _pid,\\n        address _operator,\\n        address _gauge,\\n        address _rewardFactory\\n    ) external;\\n}\\n\\ninterface IFeeDistro {\\n    /**\\n     * @notice Claims all pending distributions of the provided token for a user.\\n     * @dev It's not necessary to explicitly checkpoint before calling this function, it will ensure the FeeDistributor\\n     * is up to date before calculating the amount of tokens to be claimed.\\n     * @param user - The user on behalf of which to claim.\\n     * @param token - The ERC20 token address to be claimed.\\n     * @return The amount of `token` sent to `user` as a result of claiming.\\n     */\\n    function claimToken(address user, IERC20 token) external returns (uint256);\\n\\n    /**\\n     * @notice Claims a number of tokens on behalf of a user.\\n     * @dev A version of `claimToken` which supports claiming multiple `tokens` on behalf of `user`.\\n     * See `claimToken` for more details.\\n     * @param user - The user on behalf of which to claim.\\n     * @param tokens - An array of ERC20 token addresses to be claimed.\\n     * @return An array of the amounts of each token in `tokens` sent to `user` as a result of claiming.\\n     */\\n    function claimTokens(address user, IERC20[] calldata tokens) external returns (uint256[] memory);\\n}\\n\\ninterface ITokenMinter {\\n    function mint(address, uint256) external;\\n\\n    function burn(address, uint256) external;\\n}\\n\\ninterface IBaseRewardsPool {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address _account) external view returns (uint256);\\n}\\n\\ninterface IController {\\n    /// @notice returns the number of pools\\n    function poolLength() external returns (uint256);\\n\\n    /// @notice Deposits an amount of LP token into a specific pool,\\n    /// mints reward and optionally tokens and  stakes them into the reward contract\\n    /// @dev Sender must approve LP tokens to Controller smart contract\\n    /// @param _pid The pool id to deposit lp tokens into\\n    /// @param _amount The amount of lp tokens to be deposited\\n    /// @param _stake bool for wheather the tokens should be staked\\n    function deposit(\\n        uint256 _pid,\\n        uint256 _amount,\\n        bool _stake\\n    ) external;\\n\\n    /// @notice Deposits and stakes all LP tokens\\n    /// @dev Sender must approve LP tokens to Controller smart contract\\n    /// @param _pid The pool id to deposit lp tokens into\\n    /// @param _stake bool for wheather the tokens should be staked\\n    function depositAll(uint256 _pid, bool _stake) external;\\n\\n    /// @notice Withdraws lp tokens from the pool\\n    /// @param _pid The pool id to withdraw lp tokens from\\n    /// @param _amount amount of LP tokens to withdraw\\n    function withdraw(uint256 _pid, uint256 _amount) external;\\n\\n    /// @notice Withdraws all of the lp tokens in the pool\\n    /// @param _pid The pool id to withdraw lp tokens from\\n    function withdrawAll(uint256 _pid) external;\\n\\n    /// @notice Withdraws LP tokens and sends them to a specified address\\n    /// @param _pid The pool id to deposit lp tokens into\\n    /// @param _amount amount of LP tokens to withdraw\\n    function withdrawTo(\\n        uint256 _pid,\\n        uint256 _amount,\\n        address _to\\n    ) external;\\n\\n    /// @notice Withdraws `amount` of unlocked WethBal to controller\\n    /// @dev WethBal is redeemable by burning equivalent amount of D2D WethBal\\n    function withdrawUnlockedWethBal() external;\\n\\n    /// @notice Burns all D2DWethBal from a user, and transfers the equivalent amount of unlocked WethBal tokes\\n    function redeemWethBal() external;\\n\\n    /// @notice Claims rewards from a pool and disperses them to the rewards contract\\n    /// @param _pid the id of the pool where lp tokens are held\\n    function earmarkRewards(uint256 _pid) external;\\n\\n    /// @notice Claims rewards from the Balancer's fee distributor contract and transfers the tokens into the rewards contract\\n    function earmarkFees() external;\\n\\n    function isShutdown() external view returns (bool);\\n\\n    function poolInfo(uint256)\\n        external\\n        view\\n        returns (\\n            address,\\n            address,\\n            address,\\n            address,\\n            address,\\n            bool\\n        );\\n\\n    function claimRewards(uint256, address) external;\\n\\n    function owner() external returns (address);\\n}\\n\\ninterface IRewardFactory {\\n    function grantRewardStashAccess(address) external;\\n\\n    function createBalRewards(uint256, address) external returns (address);\\n\\n    function createTokenRewards(\\n        address,\\n        address,\\n        address\\n    ) external returns (address);\\n\\n    function activeRewardCount(address) external view returns (uint256);\\n\\n    function addActiveReward(address, uint256) external returns (bool);\\n\\n    function removeActiveReward(address, uint256) external returns (bool);\\n}\\n\\ninterface IStashFactory {\\n    function createStash(uint256 _pid, address _gauge) external returns (address);\\n}\\n\\ninterface ITokenFactory {\\n    function createDepositToken(address) external returns (address);\\n}\\n\\ninterface IProxyFactory {\\n    function clone(address _target) external returns (address);\\n}\\n\\ninterface IRewardHook {\\n    function onRewardClaim() external;\\n}\\n\",\"keccak256\":\"0x98f8f4c5e094e34ec48993d3e1af8a272524e6707c3f17cc7bd45bdb15bbb378\",\"license\":\"MIT\"},\"contracts/utils/MathUtil.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\n// copied from https://github.com/Uniswap/v2-core/blob/master/contracts/libraries/SafeMath.sol\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUtil {\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /// @dev Gas optimization for loops that iterate over extra rewards\\n    /// We know that this can't overflow because we can't interate over big arrays\\n    function unsafeInc(uint256 x) internal pure returns (uint256) {\\n        unchecked {\\n            return x + 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8969c0e7b65ca3bf8e8c76ea850d4b02e488c94e25735fe6b2c55b4ae14416a4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c060405234801561001057600080fd5b5060405161430638038061430683398101604081905261002f91610062565b6001600160a01b0391821660a05216608052610095565b80516001600160a01b038116811461005d57600080fd5b919050565b6000806040838503121561007557600080fd5b61007e83610046565b915061008c60208401610046565b90509250929050565b60805160a0516142306100d66000396000818161016801528181610202015281816103500152610522015260008181610141015261025f01526142306000f3fe608060405234801561001057600080fd5b50600436106100a35760003560e01c8063570ca735116100765780638d9622d91161005b5780638d9622d91461019f578063b7f927b1146101b2578063ef9126ad146101d557600080fd5b8063570ca735146101635780635e4e27db1461018a57600080fd5b80630d5843f7146100a857806315914c99146100f15780632f1b3271146101295780633d79d1c81461013c575b600080fd5b6100de6100b6366004610a70565b73ffffffffffffffffffffffffffffffffffffffff1660009081526001602052604090205490565b6040519081526020015b60405180910390f35b6101046100ff366004610a92565b6101e8565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100e8565b610104610137366004610abe565b610336565b6101047f000000000000000000000000000000000000000000000000000000000000000081565b6101047f000000000000000000000000000000000000000000000000000000000000000081565b61019d610198366004610a70565b61050a565b005b6100de6101ad366004610b01565b6105fc565b6101c56101c0366004610b01565b61062d565b60405190151581526020016100e8565b6101c56101e3366004610b01565b6107b6565b60003373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610259576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600083837f0000000000000000000000000000000000000000000000000000000000000000333060405161028c90610a2d565b94855273ffffffffffffffffffffffffffffffffffffffff938416602086015291831660408501528216606084015216608082015260a001604051809103906000f0801580156102e0573d6000803e3d6000fd5b5060405173ffffffffffffffffffffffffffffffffffffffff821681529091507f5bd44d764a58e71a25d2b30b54bed1ee46db8a4e6cae6b612922e01753648cd89060200160405180910390a190505b92915050565b60003373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000161480159061038e57503360009081526020819052604090205460ff16155b156103c5576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008385846040516103d690610a3a565b73ffffffffffffffffffffffffffffffffffffffff938416815291831660208301529091166040820152606001604051809103906000f08015801561041f573d6000803e3d6000fd5b506040805173ffffffffffffffffffffffffffffffffffffffff8781168252838116602083015288168183015290519192507fe87c21edfbea3bd3b4baad66630e4c80d5a21832ae8d463ed86968848c306965919081900360600190a16040517f5e43c47b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8083166004830152829190861690635e43c47b90602401600060405180830381600087803b1580156104e857600080fd5b505af11580156104fc573d6000803e3d6000fd5b509298975050505050505050565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610579576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff81166000818152602081815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905590519182527fcf1795ce10e0d72fcbcf5bbb54ccf220665e482448f7eb2d098c312508f20f1e910160405180910390a150565b6001602052816000526040600020818154811061061857600080fd5b90600052602060002001600091509150505481565b3360009081526020819052604081205460ff16610676576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610683836001610b5a565b73ffffffffffffffffffffffffffffffffffffffff85166000908152600160209081526040808320805482518185028101850190935280835294955092939092918301828280156106f357602002820191906000526020600020905b8154815260200190600101908083116106df575b5050505050905060005b815181101561073a578282828151811061071957610719610b72565b6020026020010151036107325760019350505050610330565b6001016106fd565b5073ffffffffffffffffffffffffffffffffffffffff8516600081815260016020818152604080842080549384018155845292819020909101859055815192835282018690527fccaa4228edc196fe326dc22a0e85f8229bb3ade47ee6aaa15ce84cd8f655103c910160405180910390a1506001949350505050565b3360009081526020819052604081205460ff166107ff576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061080c836001610b5a565b73ffffffffffffffffffffffffffffffffffffffff851660009081526001602090815260408083208054825181850281018501909352808352949550929390929183018282801561087c57602002820191906000526020600020905b815481526020019060010190808311610868575b5050505050905060005b8151811015610a2157828282815181106108a2576108a2610b72565b602002602001015103610a1957600182516108bd9190610ba1565b81146109705773ffffffffffffffffffffffffffffffffffffffff86166000908152600160208190526040909120835190916108f891610ba1565b8154811061090857610908610b72565b9060005260206000200154600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020828154811061096357610963610b72565b6000918252602090912001555b73ffffffffffffffffffffffffffffffffffffffff861660009081526001602052604090208054806109a4576109a4610bb8565b600190038181906000526020600020016000905590557fbc9ef12cf81dc2bfe808c00e39a5cf69b38ff4e9e7f8bd964be6d463254a24668686604051610a0c92919073ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b60405180910390a1610a21565b600101610886565b50600195945050505050565b61223d80610be883390190565b6113d680612e2583390190565b803573ffffffffffffffffffffffffffffffffffffffff81168114610a6b57600080fd5b919050565b600060208284031215610a8257600080fd5b610a8b82610a47565b9392505050565b60008060408385031215610aa557600080fd5b82359150610ab560208401610a47565b90509250929050565b600080600060608486031215610ad357600080fd5b610adc84610a47565b9250610aea60208501610a47565b9150610af860408501610a47565b90509250925092565b60008060408385031215610b1457600080fd5b610b1d83610a47565b946020939093013593505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008219821115610b6d57610b6d610b2b565b500190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082821015610bb357610bb3610b2b565b500390565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfe6101006040523480156200001257600080fd5b506040516200223d3803806200223d83398101604081905262000035916200007b565b6000949094556001600160a01b0392831660a052908216608052811660c0521660e052620000e2565b80516001600160a01b03811681146200007657600080fd5b919050565b600080600080600060a086880312156200009457600080fd5b85519450620000a6602087016200005e565b9350620000b6604087016200005e565b9250620000c6606087016200005e565b9150620000d6608087016200005e565b90509295509295909350565b60805160a05160c05160e0516120db62000162600039600081816102b50152610d0001526000818161038c015281816105bc015281816106f201528181610bf001526112f001526000818161042b01528181610ac901528181611129015261139b01526000818161050101528181610f3601526114f901526120db6000f3fe608060405234801561001057600080fd5b506004361061025b5760003560e01c80637050ccd911610145578063a694fc3a116100bd578063df136d651161008c578063f106845411610071578063f1068454146104e0578063f14faf6f146104e9578063f7c618c1146104fc57600080fd5b8063df136d65146104ce578063ebe2b12b146104d757600080fd5b8063a694fc3a146104a2578063c8f33c91146104b5578063cd3daf9d146104be578063d55a23f4146104c657600080fd5b806380faa57d116101145780638dcb4061116100f95780638dcb40611461047e578063901a7d531461048657806392930b451461048f57600080fd5b806380faa57d146104565780638b8763471461045e57600080fd5b80637050ccd9146103dd57806370a08231146103f057806372f702f3146104265780637b0a47ee1461044d57600080fd5b80632ee40908116101d85780634cfe2f4a116101a7578063590a41f51161018c578063590a41f5146103ae5780635e43c47b146103c157806363d38c3b146103d457600080fd5b80634cfe2f4a1461037e578063570ca7351461038757600080fd5b80632ee409081461033d5780633d18b9121461035057806340c354461461035857806349f039a21461036b57600080fd5b806318160ddd1161022f5780631c1c6fe5116102145780631c1c6fe51461030e57806321ef0fae14610321578063262d3d6d1461033457600080fd5b806318160ddd146102fc5780631be052891461030457600080fd5b80628cc262146102605780630569d388146102865780630700037d146102905780630f4ef8a6146102b0575b600080fd5b61027361026e366004611d7d565b610523565b6040519081526020015b60405180910390f35b61028e6105ba565b005b61027361029e366004611d7d565b600a6020526000908152604090205481565b6102d77f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161027d565b600854610273565b61027362093a8081565b61028e61031c366004611da8565b6106d2565b61028e61032f366004611dc5565b6106f0565b61027360075481565b61028e61034b366004611dde565b610967565b61028e610b8e565b6102d7610366366004611dc5565b610b9b565b61028e610379366004611da8565b610bd2565b61027361033e81565b6102d77f000000000000000000000000000000000000000000000000000000000000000081565b61028e6103bc366004611dc5565b610bee565b61028e6103cf366004611d7d565b610cfe565b61027360055481565b61028e6103eb366004611e0a565b610e68565b6102736103fe366004611d7d565b73ffffffffffffffffffffffffffffffffffffffff166000908152600b602052604090205490565b6102d77f000000000000000000000000000000000000000000000000000000000000000081565b61027360025481565b6102736110e5565b61027361046c366004611d7d565b60096020526000908152604090205481565b61028e6110f8565b61027360065481565b61028e61049d366004611e43565b6111b4565b61028e6104b0366004611dc5565b611465565b61027360035481565b61027361146f565b600c54610273565b61027360045481565b61027360015481565b61027360005481565b61028e6104f7366004611dc5565b6114df565b6102d77f000000000000000000000000000000000000000000000000000000000000000081565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600a60209081526040808320546009909252822054670de0b6b3a76400009061056661146f565b6105709190611eb4565b73ffffffffffffffffffffffffffffffffffffffff85166000908152600b60205260409020546105a09190611ecb565b6105aa9190611f08565b6105b49190611f43565b92915050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610627573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061064b9190611f5b565b3373ffffffffffffffffffffffffffffffffffffffff82161461069a576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6106a6600c6000611d29565b6040517f1a53a10dfbef82dfcf34ce946c284b478164f6e7496a07fc0cbe69d01ff44f0990600090a150565b336000908152600b60205260408120546106ed9183906111b4565b50565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b81526004016020604051808303816000875af115801561075d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107819190611f5b565b3373ffffffffffffffffffffffffffffffffffffffff8216146107d0576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600c83815481106107e5576107e5611f78565b600091825260209091200154600c805473ffffffffffffffffffffffffffffffffffffffff90921692509061081c90600190611eb4565b8154811061082c5761082c611f78565b600091825260209091200154600c805473ffffffffffffffffffffffffffffffffffffffff909216918590811061086557610865611f78565b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600c8054806108be576108be611fa7565b60008281526020908190207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff908301810180547fffffffffffffffffffffffff000000000000000000000000000000000000000016905590910190915560405173ffffffffffffffffffffffffffffffffffffffff831681527f34304d78213ed24f75e323bc823dc4883b456fbe135029e6ae3c1597e6c7d436910160405180910390a1505050565b8161097061146f565b60045561097b6110e5565b60035573ffffffffffffffffffffffffffffffffffffffff8116156109dc576109a381610523565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600a60209081526040808320939093556004546009909152919020555b6001821015610a17576040517f2c5211c600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610a218383611535565b81600854610a2f9190611f43565b60085573ffffffffffffffffffffffffffffffffffffffff83166000908152600b6020526040902054610a63908390611f43565b73ffffffffffffffffffffffffffffffffffffffff8481166000908152600b6020526040908190209290925590517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018490527f0000000000000000000000000000000000000000000000000000000000000000909116906323b872dd906064016020604051808303816000875af1158015610b14573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b389190611fd6565b508273ffffffffffffffffffffffffffffffffffffffff167f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d83604051610b8191815260200190565b60405180910390a2505050565b610b99336001610e68565b565b600c8181548110610bab57600080fd5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b336000908152600b60205260409020546106ed908260016111b4565b7f00000000000000000000000000000000000000000000000000000000000000003373ffffffffffffffffffffffffffffffffffffffff821614610c5e576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600554610c6b9083611f43565b91506001544210610c8857610c7f82611664565b60006005555050565b600062093a80600154610c9b9190611eb4565b610ca59042611eb4565b9050600081600254610cb79190611ecb565b9050600084610cc8836103e8611ecb565b610cd29190611f08565b905061033e811015610cf157610ce785611664565b6000600555610cf7565b60058590555b5050505050565b7f00000000000000000000000000000000000000000000000000000000000000003373ffffffffffffffffffffffffffffffffffffffff821614610d6e576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8216610df0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f217265776172642073657474696e67000000000000000000000000000000000060448201526064015b60405180910390fd5b50600c80546001810182556000919091527fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c70180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b81610e7161146f565b600455610e7c6110e5565b60035573ffffffffffffffffffffffffffffffffffffffff811615610edd57610ea481610523565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600a60209081526040808320939093556004546009909152919020555b73ffffffffffffffffffffffffffffffffffffffff83166000908152600a60205260409020548015610fae5773ffffffffffffffffffffffffffffffffffffffff8085166000908152600a6020526040812055610f5d907f000000000000000000000000000000000000000000000000000000000000000016858361179f565b8373ffffffffffffffffffffffffffffffffffffffff167fe2403640ba68fed3a2f88b7557551d1993f84b99bb10ff833f0cf8db0c5e048682604051610fa591815260200190565b60405180910390a25b82156110df576000600c80548060200260200160405190810160405280929190818152602001828054801561101957602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311610fee575b5050505050905060005b81518110156110dc5781818151811061103e5761103e611f78565b60209081029190910101516040517fc00007b000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff88811660048301529091169063c00007b090602401600060405180830381600087803b1580156110b357600080fd5b505af11580156110c7573d6000803e3d6000fd5b505050506110d58160010190565b9050611023565b50505b50505050565b60006110f342600154611878565b905090565b6040517f70a082310000000000000000000000000000000000000000000000000000000081523360048201526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906370a0823190602401602060405180830381865afa158015611185573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111a99190611ff3565b90506106ed81611465565b336111bd61146f565b6004556111c86110e5565b60035573ffffffffffffffffffffffffffffffffffffffff811615611229576111f081610523565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600a60209081526040808320939093556004546009909152919020555b6001841015611264576040517f2c5211c600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61126e3385611890565b8360085461127c9190611eb4565b600855336000908152600b602052604090205461129a908590611eb4565b336000908152600b60205260409020558115611366576000546040517f14cd70e40000000000000000000000000000000000000000000000000000000081526004810191909152602481018590523360448201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906314cd70e490606401600060405180830381600087803b15801561134957600080fd5b505af115801561135d573d6000803e3d6000fd5b5050505061141f565b6040517fa9059cbb000000000000000000000000000000000000000000000000000000008152336004820152602481018590527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063a9059cbb906044016020604051808303816000875af11580156113f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061141d9190611fd6565b505b60405184815233907f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d59060200160405180910390a282156110df576110df336001610e68565b6106ed3382610967565b60008061147b60085490565b90508060000361148d57505060045490565b8060025460035461149c6110e5565b6114a69190611eb4565b6114b09190611ecb565b6114c290670de0b6b3a7640000611ecb565b6114cc9190611f08565b6004546114d99190611f43565b91505090565b61152173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000163330846119bf565b8060055461152f9190611f43565b60055550565b6000600c80548060200260200160405190810160405280929190818152602001828054801561159a57602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff16815260019091019060200180831161156f575b5050505050905060005b81518110156110df578181815181106115bf576115bf611f78565b60209081029190910101516040517fadc9772e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8681166004830152602482018690529091169063adc9772e90604401600060405180830381600087803b15801561163b57600080fd5b505af115801561164f573d6000803e3d6000fd5b5050505061165d8160010190565b90506115a4565b600061166e61146f565b6004556116796110e5565b60035573ffffffffffffffffffffffffffffffffffffffff8116156116da576116a181610523565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600a60209081526040808320939093556004546009909152919020555b816007546116e89190611f43565b60075560015442106117095761170162093a8083611f08565b60025561174c565b6000426001546117199190611eb4565b905060006002548261172b9190611ecb565b90506117378185611f43565b935061174662093a8085611f08565b60025550505b60068290554260038190556117659062093a8090611f43565b6001556040518281527fde88a922e0d3b88b24e9623efeb464919c6bf9f66857a65e2bfcf2ce87a9433d9060200160405180910390a15050565b60405173ffffffffffffffffffffffffffffffffffffffff83166024820152604481018290526118739084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152611a1d565b505050565b60008183106118875781611889565b825b9392505050565b6000600c8054806020026020016040519081016040528092919081815260200182805480156118f557602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff1681526001909101906020018083116118ca575b5050505050905060005b81518110156110df5781818151811061191a5761191a611f78565b60209081029190910101516040517ff3fef3a300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8681166004830152602482018690529091169063f3fef3a390604401600060405180830381600087803b15801561199657600080fd5b505af11580156119aa573d6000803e3d6000fd5b505050506119b88160010190565b90506118ff565b60405173ffffffffffffffffffffffffffffffffffffffff808516602483015283166044820152606481018290526110df9085907f23b872dd00000000000000000000000000000000000000000000000000000000906084016117f1565b6000611a7f826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16611b299092919063ffffffff16565b8051909150156118735780806020019051810190611a9d9190611fd6565b611873576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610de7565b6060611b388484600085611b40565b949350505050565b606082471015611bd2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610de7565b73ffffffffffffffffffffffffffffffffffffffff85163b611c50576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610de7565b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051611c799190612038565b60006040518083038185875af1925050503d8060008114611cb6576040519150601f19603f3d011682016040523d82523d6000602084013e611cbb565b606091505b5091509150611ccb828286611cd6565b979650505050505050565b60608315611ce5575081611889565b825115611cf55782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610de79190612054565b50805460008255906000526020600020908101906106ed91905b80821115611d575760008155600101611d43565b5090565b73ffffffffffffffffffffffffffffffffffffffff811681146106ed57600080fd5b600060208284031215611d8f57600080fd5b813561188981611d5b565b80151581146106ed57600080fd5b600060208284031215611dba57600080fd5b813561188981611d9a565b600060208284031215611dd757600080fd5b5035919050565b60008060408385031215611df157600080fd5b8235611dfc81611d5b565b946020939093013593505050565b60008060408385031215611e1d57600080fd5b8235611e2881611d5b565b91506020830135611e3881611d9a565b809150509250929050565b600080600060608486031215611e5857600080fd5b833592506020840135611e6a81611d9a565b91506040840135611e7a81611d9a565b809150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082821015611ec657611ec6611e85565b500390565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611f0357611f03611e85565b500290565b600082611f3e577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b60008219821115611f5657611f56611e85565b500190565b600060208284031215611f6d57600080fd5b815161188981611d5b565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b600060208284031215611fe857600080fd5b815161188981611d9a565b60006020828403121561200557600080fd5b5051919050565b60005b8381101561202757818101518382015260200161200f565b838111156110df5750506000910152565b6000825161204a81846020870161200c565b9190910192915050565b602081526000825180602084015261207381604085016020870161200c565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016040019291505056fea26469706673582212201b9f910874aa5d59d1c87c27499fb617a13474e789963a2f1048d1ac6ae1ae6564736f6c634300080f003360e060405234801561001057600080fd5b50604051620013d6380380620013d68339810160408190526100319161006a565b6001600160a01b0392831660805290821660a0521660c0526100ad565b80516001600160a01b038116811461006557600080fd5b919050565b60008060006060848603121561007f57600080fd5b6100888461004e565b92506100966020850161004e565b91506100a46040850161004e565b90509250925092565b60805160a05160c0516112c86200010e6000396000818161026c01526104c001526000818161036b01528181610866015261096301526000818161020d0152818161040b015281816105fd015281816107050152610a2c01526112c86000f3fe608060405234801561001057600080fd5b50600436106101a25760003560e01c80637b0a47ee116100ee578063c8f33c9111610097578063ebe2b12b11610071578063ebe2b12b14610337578063f14faf6f14610340578063f3fef3a314610353578063f7c618c11461036657600080fd5b8063c8f33c911461031d578063cd3daf9d14610326578063df136d651461032e57600080fd5b8063901a7d53116100c8578063901a7d53146102ee578063adc9772e146102f7578063c00007b01461030a57600080fd5b80637b0a47ee146102bd57806380faa57d146102c65780638b876347146102ce57600080fd5b80633d18b91211610150578063590a41f51161012a578063590a41f51461028e57806363d38c3b146102a157806370a08231146102aa57600080fd5b80633d18b912146102545780634cfe2f4a1461025e578063570ca7351461026757600080fd5b80631be05289116101815780631be05289146101f5578063262d3d6d146101ff578063323a5e0b1461020857600080fd5b80628cc262146101a75780630700037d146101cd57806318160ddd146101ed575b600080fd5b6101ba6101b536600461108a565b61038d565b6040519081526020015b60405180910390f35b6101ba6101db36600461108a565b60086020526000908152604090205481565b6101ba610407565b6101ba62093a8081565b6101ba60065481565b61022f7f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101c4565b61025c61049d565b005b6101ba61033e81565b61022f7f000000000000000000000000000000000000000000000000000000000000000081565b61025c61029c3660046110a5565b6104a8565b6101ba60045481565b6101ba6102b836600461108a565b6105b5565b6101ba60015481565b6101ba61066a565b6101ba6102dc36600461108a565b60076020526000908152604090205481565b6101ba60055481565b61025c6103053660046110be565b610678565b61025c61031836600461108a565b6107b1565b6101ba60025481565b6101ba6108da565b6101ba60035481565b6101ba60005481565b61025c61034e3660046110a5565b610949565b61025c6103613660046110be565b61099f565b61022f7f000000000000000000000000000000000000000000000000000000000000000081565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600860209081526040808320546007909252822054670de0b6b3a7640000906103d06108da565b6103da9190611117565b6103e3856105b5565b6103ed919061112e565b6103f7919061116b565b61040191906111a6565b92915050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610474573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061049891906111be565b905090565b6104a6336107b1565b565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610517576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60045461052490826111a6565b905060005442106105405761053881610acb565b506000600455565b600062093a806000546105539190611117565b61055d9042611117565b905060008160015461056f919061112e565b9050600083610580836103e861112e565b61058a919061116b565b905061033e8110156105a95761059f84610acb565b60006004556105af565b60048490555b50505050565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82811660048301526000917f0000000000000000000000000000000000000000000000000000000000000000909116906370a0823190602401602060405180830381865afa158015610646573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061040191906111be565b600061049842600054610c06565b816106816108da565b60035561068c61066a565b60025573ffffffffffffffffffffffffffffffffffffffff8116156106ed576106b48161038d565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600860209081526040808320939093556003546007909152919020555b3373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000161461075c576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff167f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d836040516107a491815260200190565b60405180910390a2505050565b806107ba6108da565b6003556107c561066a565b60025573ffffffffffffffffffffffffffffffffffffffff811615610826576107ed8161038d565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600860209081526040808320939093556003546007909152919020555b60006108318361038d565b905080156108d55773ffffffffffffffffffffffffffffffffffffffff80841660009081526008602052604081205561088d907f0000000000000000000000000000000000000000000000000000000000000000168483610c1e565b8273ffffffffffffffffffffffffffffffffffffffff167fe2403640ba68fed3a2f88b7557551d1993f84b99bb10ff833f0cf8db0c5e0486826040516107a491815260200190565b505050565b6000806108e5610407565b9050806000036108f757505060035490565b8060015460025461090661066a565b6109109190611117565b61091a919061112e565b61092c90670de0b6b3a764000061112e565b610936919061116b565b60035461094391906111a6565b91505090565b61098b73ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016333084610cf2565b8060045461099991906111a6565b60045550565b816109a86108da565b6003556109b361066a565b60025573ffffffffffffffffffffffffffffffffffffffff811615610a14576109db8161038d565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600860209081526040808320939093556003546007909152919020555b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610a83576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff167f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5836040516107a491815260200190565b6000610ad56108da565b600355610ae061066a565b60025573ffffffffffffffffffffffffffffffffffffffff811615610b4157610b088161038d565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600860209081526040808320939093556003546007909152919020555b81600654610b4f91906111a6565b6006556000544210610b7057610b6862093a808361116b565b600155610bb3565b600042600054610b809190611117565b9050600060015482610b92919061112e565b9050610b9e81856111a6565b9350610bad62093a808561116b565b60015550505b6005829055426002819055610bcc9062093a80906111a6565b6000556040518281527fde88a922e0d3b88b24e9623efeb464919c6bf9f66857a65e2bfcf2ce87a9433d9060200160405180910390a15050565b6000818310610c155781610c17565b825b9392505050565b60405173ffffffffffffffffffffffffffffffffffffffff83166024820152604481018290526108d59084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152610d50565b60405173ffffffffffffffffffffffffffffffffffffffff808516602483015283166044820152606481018290526105af9085907f23b872dd0000000000000000000000000000000000000000000000000000000090608401610c70565b6000610db2826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16610e619092919063ffffffff16565b8051909150156108d55780806020019051810190610dd091906111d7565b6108d5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6060610e708484600085610e78565b949350505050565b606082471015610f0a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610e58565b73ffffffffffffffffffffffffffffffffffffffff85163b610f88576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610e58565b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051610fb19190611225565b60006040518083038185875af1925050503d8060008114610fee576040519150601f19603f3d011682016040523d82523d6000602084013e610ff3565b606091505b509150915061100382828661100e565b979650505050505050565b6060831561101d575081610c17565b82511561102d5782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e589190611241565b803573ffffffffffffffffffffffffffffffffffffffff8116811461108557600080fd5b919050565b60006020828403121561109c57600080fd5b610c1782611061565b6000602082840312156110b757600080fd5b5035919050565b600080604083850312156110d157600080fd5b6110da83611061565b946020939093013593505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082821015611129576111296110e8565b500390565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611166576111666110e8565b500290565b6000826111a1577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b600082198211156111b9576111b96110e8565b500190565b6000602082840312156111d057600080fd5b5051919050565b6000602082840312156111e957600080fd5b81518015158114610c1757600080fd5b60005b838110156112145781810151838201526020016111fc565b838111156105af5750506000910152565b600082516112378184602087016111f9565b9190910192915050565b60208152600082518060208401526112608160408501602087016111f9565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016040019291505056fea264697066735822122012aa2dbef1c1a55d385e960f535c9cd926414d31df78c440684643013336c85464736f6c634300080f0033a26469706673582212202e630ff46575264224f70701db6b9f58c99218741aaace5793baee20503f16ba64736f6c634300080f0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100a35760003560e01c8063570ca735116100765780638d9622d91161005b5780638d9622d91461019f578063b7f927b1146101b2578063ef9126ad146101d557600080fd5b8063570ca735146101635780635e4e27db1461018a57600080fd5b80630d5843f7146100a857806315914c99146100f15780632f1b3271146101295780633d79d1c81461013c575b600080fd5b6100de6100b6366004610a70565b73ffffffffffffffffffffffffffffffffffffffff1660009081526001602052604090205490565b6040519081526020015b60405180910390f35b6101046100ff366004610a92565b6101e8565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100e8565b610104610137366004610abe565b610336565b6101047f000000000000000000000000000000000000000000000000000000000000000081565b6101047f000000000000000000000000000000000000000000000000000000000000000081565b61019d610198366004610a70565b61050a565b005b6100de6101ad366004610b01565b6105fc565b6101c56101c0366004610b01565b61062d565b60405190151581526020016100e8565b6101c56101e3366004610b01565b6107b6565b60003373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610259576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600083837f0000000000000000000000000000000000000000000000000000000000000000333060405161028c90610a2d565b94855273ffffffffffffffffffffffffffffffffffffffff938416602086015291831660408501528216606084015216608082015260a001604051809103906000f0801580156102e0573d6000803e3d6000fd5b5060405173ffffffffffffffffffffffffffffffffffffffff821681529091507f5bd44d764a58e71a25d2b30b54bed1ee46db8a4e6cae6b612922e01753648cd89060200160405180910390a190505b92915050565b60003373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000161480159061038e57503360009081526020819052604090205460ff16155b156103c5576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008385846040516103d690610a3a565b73ffffffffffffffffffffffffffffffffffffffff938416815291831660208301529091166040820152606001604051809103906000f08015801561041f573d6000803e3d6000fd5b506040805173ffffffffffffffffffffffffffffffffffffffff8781168252838116602083015288168183015290519192507fe87c21edfbea3bd3b4baad66630e4c80d5a21832ae8d463ed86968848c306965919081900360600190a16040517f5e43c47b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8083166004830152829190861690635e43c47b90602401600060405180830381600087803b1580156104e857600080fd5b505af11580156104fc573d6000803e3d6000fd5b509298975050505050505050565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610579576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff81166000818152602081815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905590519182527fcf1795ce10e0d72fcbcf5bbb54ccf220665e482448f7eb2d098c312508f20f1e910160405180910390a150565b6001602052816000526040600020818154811061061857600080fd5b90600052602060002001600091509150505481565b3360009081526020819052604081205460ff16610676576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610683836001610b5a565b73ffffffffffffffffffffffffffffffffffffffff85166000908152600160209081526040808320805482518185028101850190935280835294955092939092918301828280156106f357602002820191906000526020600020905b8154815260200190600101908083116106df575b5050505050905060005b815181101561073a578282828151811061071957610719610b72565b6020026020010151036107325760019350505050610330565b6001016106fd565b5073ffffffffffffffffffffffffffffffffffffffff8516600081815260016020818152604080842080549384018155845292819020909101859055815192835282018690527fccaa4228edc196fe326dc22a0e85f8229bb3ade47ee6aaa15ce84cd8f655103c910160405180910390a1506001949350505050565b3360009081526020819052604081205460ff166107ff576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061080c836001610b5a565b73ffffffffffffffffffffffffffffffffffffffff851660009081526001602090815260408083208054825181850281018501909352808352949550929390929183018282801561087c57602002820191906000526020600020905b815481526020019060010190808311610868575b5050505050905060005b8151811015610a2157828282815181106108a2576108a2610b72565b602002602001015103610a1957600182516108bd9190610ba1565b81146109705773ffffffffffffffffffffffffffffffffffffffff86166000908152600160208190526040909120835190916108f891610ba1565b8154811061090857610908610b72565b9060005260206000200154600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020828154811061096357610963610b72565b6000918252602090912001555b73ffffffffffffffffffffffffffffffffffffffff861660009081526001602052604090208054806109a4576109a4610bb8565b600190038181906000526020600020016000905590557fbc9ef12cf81dc2bfe808c00e39a5cf69b38ff4e9e7f8bd964be6d463254a24668686604051610a0c92919073ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b60405180910390a1610a21565b600101610886565b50600195945050505050565b61223d80610be883390190565b6113d680612e2583390190565b803573ffffffffffffffffffffffffffffffffffffffff81168114610a6b57600080fd5b919050565b600060208284031215610a8257600080fd5b610a8b82610a47565b9392505050565b60008060408385031215610aa557600080fd5b82359150610ab560208401610a47565b90509250929050565b600080600060608486031215610ad357600080fd5b610adc84610a47565b9250610aea60208501610a47565b9150610af860408501610a47565b90509250925092565b60008060408385031215610b1457600080fd5b610b1d83610a47565b946020939093013593505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008219821115610b6d57610b6d610b2b565b500190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082821015610bb357610bb3610b2b565b500390565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfe6101006040523480156200001257600080fd5b506040516200223d3803806200223d83398101604081905262000035916200007b565b6000949094556001600160a01b0392831660a052908216608052811660c0521660e052620000e2565b80516001600160a01b03811681146200007657600080fd5b919050565b600080600080600060a086880312156200009457600080fd5b85519450620000a6602087016200005e565b9350620000b6604087016200005e565b9250620000c6606087016200005e565b9150620000d6608087016200005e565b90509295509295909350565b60805160a05160c05160e0516120db62000162600039600081816102b50152610d0001526000818161038c015281816105bc015281816106f201528181610bf001526112f001526000818161042b01528181610ac901528181611129015261139b01526000818161050101528181610f3601526114f901526120db6000f3fe608060405234801561001057600080fd5b506004361061025b5760003560e01c80637050ccd911610145578063a694fc3a116100bd578063df136d651161008c578063f106845411610071578063f1068454146104e0578063f14faf6f146104e9578063f7c618c1146104fc57600080fd5b8063df136d65146104ce578063ebe2b12b146104d757600080fd5b8063a694fc3a146104a2578063c8f33c91146104b5578063cd3daf9d146104be578063d55a23f4146104c657600080fd5b806380faa57d116101145780638dcb4061116100f95780638dcb40611461047e578063901a7d531461048657806392930b451461048f57600080fd5b806380faa57d146104565780638b8763471461045e57600080fd5b80637050ccd9146103dd57806370a08231146103f057806372f702f3146104265780637b0a47ee1461044d57600080fd5b80632ee40908116101d85780634cfe2f4a116101a7578063590a41f51161018c578063590a41f5146103ae5780635e43c47b146103c157806363d38c3b146103d457600080fd5b80634cfe2f4a1461037e578063570ca7351461038757600080fd5b80632ee409081461033d5780633d18b9121461035057806340c354461461035857806349f039a21461036b57600080fd5b806318160ddd1161022f5780631c1c6fe5116102145780631c1c6fe51461030e57806321ef0fae14610321578063262d3d6d1461033457600080fd5b806318160ddd146102fc5780631be052891461030457600080fd5b80628cc262146102605780630569d388146102865780630700037d146102905780630f4ef8a6146102b0575b600080fd5b61027361026e366004611d7d565b610523565b6040519081526020015b60405180910390f35b61028e6105ba565b005b61027361029e366004611d7d565b600a6020526000908152604090205481565b6102d77f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161027d565b600854610273565b61027362093a8081565b61028e61031c366004611da8565b6106d2565b61028e61032f366004611dc5565b6106f0565b61027360075481565b61028e61034b366004611dde565b610967565b61028e610b8e565b6102d7610366366004611dc5565b610b9b565b61028e610379366004611da8565b610bd2565b61027361033e81565b6102d77f000000000000000000000000000000000000000000000000000000000000000081565b61028e6103bc366004611dc5565b610bee565b61028e6103cf366004611d7d565b610cfe565b61027360055481565b61028e6103eb366004611e0a565b610e68565b6102736103fe366004611d7d565b73ffffffffffffffffffffffffffffffffffffffff166000908152600b602052604090205490565b6102d77f000000000000000000000000000000000000000000000000000000000000000081565b61027360025481565b6102736110e5565b61027361046c366004611d7d565b60096020526000908152604090205481565b61028e6110f8565b61027360065481565b61028e61049d366004611e43565b6111b4565b61028e6104b0366004611dc5565b611465565b61027360035481565b61027361146f565b600c54610273565b61027360045481565b61027360015481565b61027360005481565b61028e6104f7366004611dc5565b6114df565b6102d77f000000000000000000000000000000000000000000000000000000000000000081565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600a60209081526040808320546009909252822054670de0b6b3a76400009061056661146f565b6105709190611eb4565b73ffffffffffffffffffffffffffffffffffffffff85166000908152600b60205260409020546105a09190611ecb565b6105aa9190611f08565b6105b49190611f43565b92915050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610627573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061064b9190611f5b565b3373ffffffffffffffffffffffffffffffffffffffff82161461069a576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6106a6600c6000611d29565b6040517f1a53a10dfbef82dfcf34ce946c284b478164f6e7496a07fc0cbe69d01ff44f0990600090a150565b336000908152600b60205260408120546106ed9183906111b4565b50565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b81526004016020604051808303816000875af115801561075d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107819190611f5b565b3373ffffffffffffffffffffffffffffffffffffffff8216146107d0576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600c83815481106107e5576107e5611f78565b600091825260209091200154600c805473ffffffffffffffffffffffffffffffffffffffff90921692509061081c90600190611eb4565b8154811061082c5761082c611f78565b600091825260209091200154600c805473ffffffffffffffffffffffffffffffffffffffff909216918590811061086557610865611f78565b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600c8054806108be576108be611fa7565b60008281526020908190207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff908301810180547fffffffffffffffffffffffff000000000000000000000000000000000000000016905590910190915560405173ffffffffffffffffffffffffffffffffffffffff831681527f34304d78213ed24f75e323bc823dc4883b456fbe135029e6ae3c1597e6c7d436910160405180910390a1505050565b8161097061146f565b60045561097b6110e5565b60035573ffffffffffffffffffffffffffffffffffffffff8116156109dc576109a381610523565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600a60209081526040808320939093556004546009909152919020555b6001821015610a17576040517f2c5211c600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610a218383611535565b81600854610a2f9190611f43565b60085573ffffffffffffffffffffffffffffffffffffffff83166000908152600b6020526040902054610a63908390611f43565b73ffffffffffffffffffffffffffffffffffffffff8481166000908152600b6020526040908190209290925590517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018490527f0000000000000000000000000000000000000000000000000000000000000000909116906323b872dd906064016020604051808303816000875af1158015610b14573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b389190611fd6565b508273ffffffffffffffffffffffffffffffffffffffff167f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d83604051610b8191815260200190565b60405180910390a2505050565b610b99336001610e68565b565b600c8181548110610bab57600080fd5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b336000908152600b60205260409020546106ed908260016111b4565b7f00000000000000000000000000000000000000000000000000000000000000003373ffffffffffffffffffffffffffffffffffffffff821614610c5e576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600554610c6b9083611f43565b91506001544210610c8857610c7f82611664565b60006005555050565b600062093a80600154610c9b9190611eb4565b610ca59042611eb4565b9050600081600254610cb79190611ecb565b9050600084610cc8836103e8611ecb565b610cd29190611f08565b905061033e811015610cf157610ce785611664565b6000600555610cf7565b60058590555b5050505050565b7f00000000000000000000000000000000000000000000000000000000000000003373ffffffffffffffffffffffffffffffffffffffff821614610d6e576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8216610df0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f217265776172642073657474696e67000000000000000000000000000000000060448201526064015b60405180910390fd5b50600c80546001810182556000919091527fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c70180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b81610e7161146f565b600455610e7c6110e5565b60035573ffffffffffffffffffffffffffffffffffffffff811615610edd57610ea481610523565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600a60209081526040808320939093556004546009909152919020555b73ffffffffffffffffffffffffffffffffffffffff83166000908152600a60205260409020548015610fae5773ffffffffffffffffffffffffffffffffffffffff8085166000908152600a6020526040812055610f5d907f000000000000000000000000000000000000000000000000000000000000000016858361179f565b8373ffffffffffffffffffffffffffffffffffffffff167fe2403640ba68fed3a2f88b7557551d1993f84b99bb10ff833f0cf8db0c5e048682604051610fa591815260200190565b60405180910390a25b82156110df576000600c80548060200260200160405190810160405280929190818152602001828054801561101957602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311610fee575b5050505050905060005b81518110156110dc5781818151811061103e5761103e611f78565b60209081029190910101516040517fc00007b000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff88811660048301529091169063c00007b090602401600060405180830381600087803b1580156110b357600080fd5b505af11580156110c7573d6000803e3d6000fd5b505050506110d58160010190565b9050611023565b50505b50505050565b60006110f342600154611878565b905090565b6040517f70a082310000000000000000000000000000000000000000000000000000000081523360048201526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906370a0823190602401602060405180830381865afa158015611185573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111a99190611ff3565b90506106ed81611465565b336111bd61146f565b6004556111c86110e5565b60035573ffffffffffffffffffffffffffffffffffffffff811615611229576111f081610523565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600a60209081526040808320939093556004546009909152919020555b6001841015611264576040517f2c5211c600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61126e3385611890565b8360085461127c9190611eb4565b600855336000908152600b602052604090205461129a908590611eb4565b336000908152600b60205260409020558115611366576000546040517f14cd70e40000000000000000000000000000000000000000000000000000000081526004810191909152602481018590523360448201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906314cd70e490606401600060405180830381600087803b15801561134957600080fd5b505af115801561135d573d6000803e3d6000fd5b5050505061141f565b6040517fa9059cbb000000000000000000000000000000000000000000000000000000008152336004820152602481018590527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063a9059cbb906044016020604051808303816000875af11580156113f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061141d9190611fd6565b505b60405184815233907f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d59060200160405180910390a282156110df576110df336001610e68565b6106ed3382610967565b60008061147b60085490565b90508060000361148d57505060045490565b8060025460035461149c6110e5565b6114a69190611eb4565b6114b09190611ecb565b6114c290670de0b6b3a7640000611ecb565b6114cc9190611f08565b6004546114d99190611f43565b91505090565b61152173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000163330846119bf565b8060055461152f9190611f43565b60055550565b6000600c80548060200260200160405190810160405280929190818152602001828054801561159a57602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff16815260019091019060200180831161156f575b5050505050905060005b81518110156110df578181815181106115bf576115bf611f78565b60209081029190910101516040517fadc9772e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8681166004830152602482018690529091169063adc9772e90604401600060405180830381600087803b15801561163b57600080fd5b505af115801561164f573d6000803e3d6000fd5b5050505061165d8160010190565b90506115a4565b600061166e61146f565b6004556116796110e5565b60035573ffffffffffffffffffffffffffffffffffffffff8116156116da576116a181610523565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600a60209081526040808320939093556004546009909152919020555b816007546116e89190611f43565b60075560015442106117095761170162093a8083611f08565b60025561174c565b6000426001546117199190611eb4565b905060006002548261172b9190611ecb565b90506117378185611f43565b935061174662093a8085611f08565b60025550505b60068290554260038190556117659062093a8090611f43565b6001556040518281527fde88a922e0d3b88b24e9623efeb464919c6bf9f66857a65e2bfcf2ce87a9433d9060200160405180910390a15050565b60405173ffffffffffffffffffffffffffffffffffffffff83166024820152604481018290526118739084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152611a1d565b505050565b60008183106118875781611889565b825b9392505050565b6000600c8054806020026020016040519081016040528092919081815260200182805480156118f557602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff1681526001909101906020018083116118ca575b5050505050905060005b81518110156110df5781818151811061191a5761191a611f78565b60209081029190910101516040517ff3fef3a300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8681166004830152602482018690529091169063f3fef3a390604401600060405180830381600087803b15801561199657600080fd5b505af11580156119aa573d6000803e3d6000fd5b505050506119b88160010190565b90506118ff565b60405173ffffffffffffffffffffffffffffffffffffffff808516602483015283166044820152606481018290526110df9085907f23b872dd00000000000000000000000000000000000000000000000000000000906084016117f1565b6000611a7f826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16611b299092919063ffffffff16565b8051909150156118735780806020019051810190611a9d9190611fd6565b611873576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610de7565b6060611b388484600085611b40565b949350505050565b606082471015611bd2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610de7565b73ffffffffffffffffffffffffffffffffffffffff85163b611c50576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610de7565b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051611c799190612038565b60006040518083038185875af1925050503d8060008114611cb6576040519150601f19603f3d011682016040523d82523d6000602084013e611cbb565b606091505b5091509150611ccb828286611cd6565b979650505050505050565b60608315611ce5575081611889565b825115611cf55782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610de79190612054565b50805460008255906000526020600020908101906106ed91905b80821115611d575760008155600101611d43565b5090565b73ffffffffffffffffffffffffffffffffffffffff811681146106ed57600080fd5b600060208284031215611d8f57600080fd5b813561188981611d5b565b80151581146106ed57600080fd5b600060208284031215611dba57600080fd5b813561188981611d9a565b600060208284031215611dd757600080fd5b5035919050565b60008060408385031215611df157600080fd5b8235611dfc81611d5b565b946020939093013593505050565b60008060408385031215611e1d57600080fd5b8235611e2881611d5b565b91506020830135611e3881611d9a565b809150509250929050565b600080600060608486031215611e5857600080fd5b833592506020840135611e6a81611d9a565b91506040840135611e7a81611d9a565b809150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082821015611ec657611ec6611e85565b500390565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611f0357611f03611e85565b500290565b600082611f3e577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b60008219821115611f5657611f56611e85565b500190565b600060208284031215611f6d57600080fd5b815161188981611d5b565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b600060208284031215611fe857600080fd5b815161188981611d9a565b60006020828403121561200557600080fd5b5051919050565b60005b8381101561202757818101518382015260200161200f565b838111156110df5750506000910152565b6000825161204a81846020870161200c565b9190910192915050565b602081526000825180602084015261207381604085016020870161200c565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016040019291505056fea26469706673582212201b9f910874aa5d59d1c87c27499fb617a13474e789963a2f1048d1ac6ae1ae6564736f6c634300080f003360e060405234801561001057600080fd5b50604051620013d6380380620013d68339810160408190526100319161006a565b6001600160a01b0392831660805290821660a0521660c0526100ad565b80516001600160a01b038116811461006557600080fd5b919050565b60008060006060848603121561007f57600080fd5b6100888461004e565b92506100966020850161004e565b91506100a46040850161004e565b90509250925092565b60805160a05160c0516112c86200010e6000396000818161026c01526104c001526000818161036b01528181610866015261096301526000818161020d0152818161040b015281816105fd015281816107050152610a2c01526112c86000f3fe608060405234801561001057600080fd5b50600436106101a25760003560e01c80637b0a47ee116100ee578063c8f33c9111610097578063ebe2b12b11610071578063ebe2b12b14610337578063f14faf6f14610340578063f3fef3a314610353578063f7c618c11461036657600080fd5b8063c8f33c911461031d578063cd3daf9d14610326578063df136d651461032e57600080fd5b8063901a7d53116100c8578063901a7d53146102ee578063adc9772e146102f7578063c00007b01461030a57600080fd5b80637b0a47ee146102bd57806380faa57d146102c65780638b876347146102ce57600080fd5b80633d18b91211610150578063590a41f51161012a578063590a41f51461028e57806363d38c3b146102a157806370a08231146102aa57600080fd5b80633d18b912146102545780634cfe2f4a1461025e578063570ca7351461026757600080fd5b80631be05289116101815780631be05289146101f5578063262d3d6d146101ff578063323a5e0b1461020857600080fd5b80628cc262146101a75780630700037d146101cd57806318160ddd146101ed575b600080fd5b6101ba6101b536600461108a565b61038d565b6040519081526020015b60405180910390f35b6101ba6101db36600461108a565b60086020526000908152604090205481565b6101ba610407565b6101ba62093a8081565b6101ba60065481565b61022f7f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101c4565b61025c61049d565b005b6101ba61033e81565b61022f7f000000000000000000000000000000000000000000000000000000000000000081565b61025c61029c3660046110a5565b6104a8565b6101ba60045481565b6101ba6102b836600461108a565b6105b5565b6101ba60015481565b6101ba61066a565b6101ba6102dc36600461108a565b60076020526000908152604090205481565b6101ba60055481565b61025c6103053660046110be565b610678565b61025c61031836600461108a565b6107b1565b6101ba60025481565b6101ba6108da565b6101ba60035481565b6101ba60005481565b61025c61034e3660046110a5565b610949565b61025c6103613660046110be565b61099f565b61022f7f000000000000000000000000000000000000000000000000000000000000000081565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600860209081526040808320546007909252822054670de0b6b3a7640000906103d06108da565b6103da9190611117565b6103e3856105b5565b6103ed919061112e565b6103f7919061116b565b61040191906111a6565b92915050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610474573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061049891906111be565b905090565b6104a6336107b1565b565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610517576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60045461052490826111a6565b905060005442106105405761053881610acb565b506000600455565b600062093a806000546105539190611117565b61055d9042611117565b905060008160015461056f919061112e565b9050600083610580836103e861112e565b61058a919061116b565b905061033e8110156105a95761059f84610acb565b60006004556105af565b60048490555b50505050565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82811660048301526000917f0000000000000000000000000000000000000000000000000000000000000000909116906370a0823190602401602060405180830381865afa158015610646573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061040191906111be565b600061049842600054610c06565b816106816108da565b60035561068c61066a565b60025573ffffffffffffffffffffffffffffffffffffffff8116156106ed576106b48161038d565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600860209081526040808320939093556003546007909152919020555b3373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000161461075c576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff167f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d836040516107a491815260200190565b60405180910390a2505050565b806107ba6108da565b6003556107c561066a565b60025573ffffffffffffffffffffffffffffffffffffffff811615610826576107ed8161038d565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600860209081526040808320939093556003546007909152919020555b60006108318361038d565b905080156108d55773ffffffffffffffffffffffffffffffffffffffff80841660009081526008602052604081205561088d907f0000000000000000000000000000000000000000000000000000000000000000168483610c1e565b8273ffffffffffffffffffffffffffffffffffffffff167fe2403640ba68fed3a2f88b7557551d1993f84b99bb10ff833f0cf8db0c5e0486826040516107a491815260200190565b505050565b6000806108e5610407565b9050806000036108f757505060035490565b8060015460025461090661066a565b6109109190611117565b61091a919061112e565b61092c90670de0b6b3a764000061112e565b610936919061116b565b60035461094391906111a6565b91505090565b61098b73ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016333084610cf2565b8060045461099991906111a6565b60045550565b816109a86108da565b6003556109b361066a565b60025573ffffffffffffffffffffffffffffffffffffffff811615610a14576109db8161038d565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600860209081526040808320939093556003546007909152919020555b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610a83576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff167f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5836040516107a491815260200190565b6000610ad56108da565b600355610ae061066a565b60025573ffffffffffffffffffffffffffffffffffffffff811615610b4157610b088161038d565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600860209081526040808320939093556003546007909152919020555b81600654610b4f91906111a6565b6006556000544210610b7057610b6862093a808361116b565b600155610bb3565b600042600054610b809190611117565b9050600060015482610b92919061112e565b9050610b9e81856111a6565b9350610bad62093a808561116b565b60015550505b6005829055426002819055610bcc9062093a80906111a6565b6000556040518281527fde88a922e0d3b88b24e9623efeb464919c6bf9f66857a65e2bfcf2ce87a9433d9060200160405180910390a15050565b6000818310610c155781610c17565b825b9392505050565b60405173ffffffffffffffffffffffffffffffffffffffff83166024820152604481018290526108d59084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152610d50565b60405173ffffffffffffffffffffffffffffffffffffffff808516602483015283166044820152606481018290526105af9085907f23b872dd0000000000000000000000000000000000000000000000000000000090608401610c70565b6000610db2826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16610e619092919063ffffffff16565b8051909150156108d55780806020019051810190610dd091906111d7565b6108d5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6060610e708484600085610e78565b949350505050565b606082471015610f0a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610e58565b73ffffffffffffffffffffffffffffffffffffffff85163b610f88576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610e58565b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051610fb19190611225565b60006040518083038185875af1925050503d8060008114610fee576040519150601f19603f3d011682016040523d82523d6000602084013e610ff3565b606091505b509150915061100382828661100e565b979650505050505050565b6060831561101d575081610c17565b82511561102d5782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e589190611241565b803573ffffffffffffffffffffffffffffffffffffffff8116811461108557600080fd5b919050565b60006020828403121561109c57600080fd5b610c1782611061565b6000602082840312156110b757600080fd5b5035919050565b600080604083850312156110d157600080fd5b6110da83611061565b946020939093013593505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082821015611129576111296110e8565b500390565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611166576111666110e8565b500290565b6000826111a1577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b600082198211156111b9576111b96110e8565b500190565b6000602082840312156111d057600080fd5b5051919050565b6000602082840312156111e957600080fd5b81518015158114610c1757600080fd5b60005b838110156112145781810151838201526020016111fc565b838111156105af5750506000910152565b600082516112378184602087016111f9565b9190910192915050565b60208152600082518060208401526112608160408501602087016111f9565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016040019291505056fea264697066735822122012aa2dbef1c1a55d385e960f535c9cd926414d31df78c440684643013336c85464736f6c634300080f0033a26469706673582212202e630ff46575264224f70701db6b9f58c99218741aaace5793baee20503f16ba64736f6c634300080f0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "activeRewardCount(address)": {
        "returns": {
          "_0": "uint256 number of active rewards"
        }
      },
      "addActiveReward(address,uint256)": {
        "returns": {
          "_0": "true on success"
        }
      },
      "createBalRewards(uint256,address)": {
        "params": {
          "_depositToken": "address of the token",
          "_pid": "The pid of the pool"
        }
      },
      "createTokenRewards(address,address,address)": {
        "details": "used for extra incentive tokens(ex. snx) as well as vebal fees",
        "params": {
          "_mainRewards": "address of the main reward pool contract",
          "_rewardPoolOwner": "address of the reward pool owner",
          "_token": "address of the token"
        },
        "returns": {
          "_0": "address of the new reward pool"
        }
      },
      "grantRewardStashAccess(address)": {
        "details": "Stash contracts need access to create new Virtual balance pools for extra gauge incentives(ex. snx)"
      },
      "removeActiveReward(address,uint256)": {
        "params": {
          "_pid": "The pid of the pool",
          "_reward": "The address of the reward contract"
        },
        "returns": {
          "_0": "true on success"
        }
      }
    },
    "title": "RewardFactory contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "activeRewardCount(address)": {
        "notice": "Get active rewards count"
      },
      "addActiveReward(address,uint256)": {
        "notice": "Adds a new reward to the active list"
      },
      "createBalRewards(uint256,address)": {
        "notice": "Creates a new Reward pool"
      },
      "createTokenRewards(address,address,address)": {
        "notice": "Create a virtual balance reward pool that mimicks the balance of a pool's main reward contract"
      },
      "grantRewardStashAccess(address)": {
        "notice": "Grants rewardAccess to stash"
      },
      "removeActiveReward(address,uint256)": {
        "notice": "Removes active reward"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7614,
        "contract": "contracts/factories/RewardFactory.sol:RewardFactory",
        "label": "rewardAccess",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 7619,
        "contract": "contracts/factories/RewardFactory.sol:RewardFactory",
        "label": "rewardActiveList",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}