{
  "language": "Solidity",
  "sources": {
    "contracts/BalDepositor.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\nimport \"./utils/Interfaces.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n/// @title BalDepositor contract\n/// @dev Deposit contract for Prime Pools is based on the convex contract crvDepositor.sol\ncontract BalDepositor is IBalDepositor {\n    event FeeManagerChanged(address newFeeManager);\n    event LockIncentiveChanged(uint256 newLockIncentive);\n\n    error Unauthorized();\n    error InvalidAmount();\n\n    uint256 public constant FEE_DENOMINATOR = 10000;\n    uint256 private constant MAXTIME = 365 days;\n    uint256 private constant WEEK = 7 days;\n\n    address public immutable wethBal;\n    address public immutable veBal;\n    address public immutable staker; // VoterProxy smart contract\n    address public immutable d2dBal;\n\n    address public feeManager;\n    uint256 public lockIncentive = 10; // incentive to users who spend gas to lock bal\n    uint256 public incentiveBal;\n    uint256 public unlockTime;\n\n    constructor(\n        address _wethBal,\n        address _veBal,\n        address _staker,\n        address _d2dBal\n    ) {\n        wethBal = _wethBal;\n        veBal = _veBal;\n        staker = _staker;\n        d2dBal = _d2dBal;\n        feeManager = msg.sender;\n    }\n\n    modifier onlyFeeManager() {\n        if (msg.sender != feeManager) revert Unauthorized();\n        _;\n    }\n\n    /// @notice Sets the contracts feeManager variable\n    /// @param _feeManager The address of the fee manager\n    function setFeeManager(address _feeManager) external onlyFeeManager {\n        feeManager = _feeManager;\n        emit FeeManagerChanged(_feeManager);\n    }\n\n    /// @notice Sets the lock incentive variable\n    /// @param _lockIncentive Time to lock tokens\n    function setFees(uint256 _lockIncentive) external onlyFeeManager {\n        if (_lockIncentive >= 0 && _lockIncentive <= 30) {\n            lockIncentive = _lockIncentive;\n            emit LockIncentiveChanged(_lockIncentive);\n        }\n    }\n\n    /// @notice Locks initial Weth/Bal balance in veBal contract via voterProxy contract\n    function initialLock() external onlyFeeManager {\n        uint256 veBalance = IERC20(veBal).balanceOf(staker);\n        if (veBalance == 0) {\n            // solhint-disable-next-line\n            uint256 unlockAt = block.timestamp + MAXTIME;\n\n            // release old lock if exists\n            IVoterProxy(staker).release();\n            // create new lock\n            uint256 wethBalBalanceStaker = IERC20(wethBal).balanceOf(staker);\n            IVoterProxy(staker).createLock(wethBalBalanceStaker, unlockAt);\n            unlockTime = (unlockAt / WEEK) * WEEK;\n        }\n    }\n\n    /// @notice Locks tokens in vBal contract and mints reward tokens to sender\n    /// @dev Needed in order to lockFunds on behalf of someone else\n    function lockBalancer() external {\n        _lockBalancer();\n\n        // mint incentives\n        if (incentiveBal > 0) {\n            ITokenMinter(d2dBal).mint(msg.sender, incentiveBal);\n            incentiveBal = 0;\n        }\n    }\n\n    /// @notice Deposits entire Weth/Bal balance of caller. Stakes same amount in Rewards contract\n    /// @param _stakeAddress The Reward contract address\n    /// @param _lock boolean whether depositor wants to lock funds immediately\n    function depositAll(bool _lock, address _stakeAddress) external {\n        uint256 wethBalBalance = IERC20(wethBal).balanceOf(msg.sender); //This is balancer balance of msg.sender\n        deposit(wethBalBalance, _lock, _stakeAddress);\n    }\n\n    /// @notice Locks initial balance of Weth/Bal in Voter Proxy. Then stakes `_amount` of Weth/Bal tokens to veBal contract\n    /// Mints & stakes d2dBal in Rewards contract on behalf of caller\n    /// @dev VoterProxy `staker` is responsible for sending Weth/Bal tokens to veBal contract via _locktoken()\n    /// All of the minted d2dBal will be automatically staked to the Rewards contract\n    /// @param _amount The amount of tokens user wants to stake\n    /// @param _lock boolean whether depositor wants to lock funds immediately\n    /// @param _stakeAddress The Reward contract address\n    function deposit(\n        uint256 _amount,\n        bool _lock,\n        address _stakeAddress\n    ) public {\n        if (_amount == 0) {\n            revert InvalidAmount();\n        }\n\n        if (_lock) {\n            // lock immediately, transfer directly to staker to skip an erc20 transfer\n            IERC20(wethBal).transferFrom(msg.sender, staker, _amount);\n            _lockBalancer();\n            if (incentiveBal > 0) {\n                // add the incentive tokens here so they can be staked together\n                _amount = _amount + incentiveBal;\n                incentiveBal = 0;\n            }\n        } else {\n            // move tokens here\n            IERC20(wethBal).transferFrom(msg.sender, address(this), _amount);\n            // defer lock cost to another user\n            uint256 callIncentive = ((_amount * lockIncentive) / FEE_DENOMINATOR);\n            _amount = _amount - callIncentive;\n\n            // add to a pool for lock caller\n            incentiveBal = incentiveBal + callIncentive;\n        }\n        // mint here\n        ITokenMinter(d2dBal).mint(address(this), _amount);\n        // stake for msg.sender\n        IERC20(d2dBal).approve(_stakeAddress, _amount);\n        IRewards(_stakeAddress).stakeFor(msg.sender, _amount);\n    }\n\n    /// @notice Burns D2DBal from some address\n    /// @dev Only Controller can call this\n    function burnD2DBal(address _from, uint256 _amount) external {\n        if (msg.sender != IVoterProxy(staker).operator()) {\n            revert Unauthorized();\n        }\n\n        ITokenMinter(d2dBal).burn(_from, _amount);\n    }\n\n    /// @notice Transfers Weth/Bal from VoterProxy `staker` to veBal contract\n    /// @dev VoterProxy `staker` is responsible for transferring Weth/Bal tokens to veBal contract via increaseAmount()\n    function _lockBalancer() internal {\n        // multiple SLOAD -> MLOAD\n        address wethBalMemory = wethBal;\n        address stakerMemory = staker;\n\n        uint256 wethBalBalance = IERC20(wethBalMemory).balanceOf(address(this));\n        if (wethBalBalance > 0) {\n            IERC20(wethBalMemory).transfer(stakerMemory, wethBalBalance);\n        }\n\n        uint256 wethBalBalanceStaker = IERC20(wethBalMemory).balanceOf(stakerMemory);\n        if (wethBalBalanceStaker == 0) {\n            return;\n        }\n\n        // increase amount\n        IVoterProxy(stakerMemory).increaseAmount(wethBalBalanceStaker);\n\n        // solhint-disable-next-line\n        uint256 newUnlockAt = block.timestamp + MAXTIME;\n        uint256 unlockInWeeks = (newUnlockAt / WEEK) * WEEK;\n\n        // We always want to have max voting power on each vote\n        // Bal voting is a weekly event, and we want to increase time every week\n        // solhint-disable-next-line\n        if ((unlockInWeeks - unlockTime) > 2) {\n            IVoterProxy(stakerMemory).increaseTime(newUnlockAt);\n            // solhint-disable-next-line\n            unlockTime = newUnlockAt;\n        }\n    }\n}\n"
    },
    "contracts/utils/Interfaces.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IBalGauge {\n    function deposit(uint256) external;\n\n    function balanceOf(address) external view returns (uint256);\n\n    function withdraw(uint256) external;\n\n    function claim_rewards() external;\n\n    function reward_tokens(uint256) external view returns (address);\n\n    function lp_token() external view returns (address);\n}\n\ninterface IBalVoteEscrow {\n    function create_lock(uint256, uint256) external;\n\n    function increase_amount(uint256) external;\n\n    function increase_unlock_time(uint256) external;\n\n    function withdraw() external;\n\n    function smart_wallet_checker() external view returns (address);\n\n    function balanceOf(address, uint256) external view returns (uint256);\n\n    function balanceOfAt(address, uint256) external view returns (uint256);\n}\n\ninterface IVoting {\n    function vote_for_gauge_weights(address, uint256) external;\n}\n\ninterface IMinter {\n    function mint(address) external;\n}\n\ninterface IBalDepositor {\n    function d2dBal() external view returns (address);\n\n    function wethBal() external view returns (address);\n\n    function burnD2DBal(address _from, uint256 _amount) external;\n}\n\ninterface IVoterProxy {\n    function deposit(address _token, address _gauge) external;\n\n    function withdrawWethBal(address _to) external;\n\n    function wethBal() external view returns (address);\n\n    function depositor() external view returns (address);\n\n    function withdraw(\n        address _token,\n        address _gauge,\n        uint256 _amount\n    ) external;\n\n    function withdrawAll(address _token, address _gauge) external;\n\n    function createLock(uint256 _value, uint256 _unlockTime) external;\n\n    function increaseAmount(uint256 _value) external;\n\n    function increaseTime(uint256 _unlockTimestamp) external;\n\n    function release() external;\n\n    function claimBal(address _gauge) external returns (uint256);\n\n    function claimRewards(address _gauge) external;\n\n    function claimFees(address _distroContract, IERC20[] calldata _tokens) external;\n\n    function delegateVotingPower(address _delegateTo) external;\n\n    function clearDelegate() external;\n\n    function voteMultipleGauges(address[] calldata _gauges, uint256[] calldata _weights) external;\n\n    function balanceOfPool(address _gauge) external view returns (uint256);\n\n    function operator() external view returns (address);\n\n    function execute(\n        address _to,\n        uint256 _value,\n        bytes calldata _data\n    ) external returns (bool, bytes memory);\n}\n\ninterface ISnapshotDelegateRegistry {\n    function setDelegate(bytes32 id, address delegate) external;\n\n    function clearDelegate(bytes32 id) external;\n}\n\ninterface IRewards {\n    function stake(address, uint256) external;\n\n    function stakeFor(address, uint256) external;\n\n    function withdraw(address, uint256) external;\n\n    function exit(address) external;\n\n    function getReward(address) external;\n\n    function queueNewRewards(uint256) external;\n\n    function notifyRewardAmount(uint256) external;\n\n    function addExtraReward(address) external;\n\n    function stakingToken() external view returns (address);\n\n    function rewardToken() external view returns (address);\n\n    function earned(address account) external view returns (uint256);\n}\n\ninterface IStash {\n    function processStash() external;\n\n    function claimRewards() external;\n\n    function initialize(\n        uint256 _pid,\n        address _operator,\n        address _gauge,\n        address _rewardFactory\n    ) external;\n}\n\ninterface IFeeDistro {\n    /**\n     * @notice Claims all pending distributions of the provided token for a user.\n     * @dev It's not necessary to explicitly checkpoint before calling this function, it will ensure the FeeDistributor\n     * is up to date before calculating the amount of tokens to be claimed.\n     * @param user - The user on behalf of which to claim.\n     * @param token - The ERC20 token address to be claimed.\n     * @return The amount of `token` sent to `user` as a result of claiming.\n     */\n    function claimToken(address user, IERC20 token) external returns (uint256);\n\n    /**\n     * @notice Claims a number of tokens on behalf of a user.\n     * @dev A version of `claimToken` which supports claiming multiple `tokens` on behalf of `user`.\n     * See `claimToken` for more details.\n     * @param user - The user on behalf of which to claim.\n     * @param tokens - An array of ERC20 token addresses to be claimed.\n     * @return An array of the amounts of each token in `tokens` sent to `user` as a result of claiming.\n     */\n    function claimTokens(address user, IERC20[] calldata tokens) external returns (uint256[] memory);\n}\n\ninterface ITokenMinter {\n    function mint(address, uint256) external;\n\n    function burn(address, uint256) external;\n}\n\ninterface IBaseRewardsPool {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address _account) external view returns (uint256);\n}\n\ninterface IController {\n    /// @notice returns the number of pools\n    function poolLength() external returns (uint256);\n\n    /// @notice Deposits an amount of LP token into a specific pool,\n    /// mints reward and optionally tokens and  stakes them into the reward contract\n    /// @dev Sender must approve LP tokens to Controller smart contract\n    /// @param _pid The pool id to deposit lp tokens into\n    /// @param _amount The amount of lp tokens to be deposited\n    /// @param _stake bool for wheather the tokens should be staked\n    function deposit(\n        uint256 _pid,\n        uint256 _amount,\n        bool _stake\n    ) external;\n\n    /// @notice Deposits and stakes all LP tokens\n    /// @dev Sender must approve LP tokens to Controller smart contract\n    /// @param _pid The pool id to deposit lp tokens into\n    /// @param _stake bool for wheather the tokens should be staked\n    function depositAll(uint256 _pid, bool _stake) external;\n\n    /// @notice Withdraws lp tokens from the pool\n    /// @param _pid The pool id to withdraw lp tokens from\n    /// @param _amount amount of LP tokens to withdraw\n    function withdraw(uint256 _pid, uint256 _amount) external;\n\n    /// @notice Withdraws all of the lp tokens in the pool\n    /// @param _pid The pool id to withdraw lp tokens from\n    function withdrawAll(uint256 _pid) external;\n\n    /// @notice Withdraws LP tokens and sends them to a specified address\n    /// @param _pid The pool id to deposit lp tokens into\n    /// @param _amount amount of LP tokens to withdraw\n    function withdrawTo(\n        uint256 _pid,\n        uint256 _amount,\n        address _to\n    ) external;\n\n    /// @notice Withdraws `amount` of unlocked WethBal to controller\n    /// @dev WethBal is redeemable by burning equivalent amount of D2D WethBal\n    function withdrawUnlockedWethBal() external;\n\n    /// @notice Burns all D2DWethBal from a user, and transfers the equivalent amount of unlocked WethBal tokes\n    function redeemWethBal() external;\n\n    /// @notice Claims rewards from a pool and disperses them to the rewards contract\n    /// @param _pid the id of the pool where lp tokens are held\n    function earmarkRewards(uint256 _pid) external;\n\n    /// @notice Claims rewards from the Balancer's fee distributor contract and transfers the tokens into the rewards contract\n    function earmarkFees() external;\n\n    function isShutdown() external view returns (bool);\n\n    function poolInfo(uint256)\n        external\n        view\n        returns (\n            address,\n            address,\n            address,\n            address,\n            address,\n            bool\n        );\n\n    function claimRewards(uint256, address) external;\n\n    function owner() external returns (address);\n}\n\ninterface IRewardFactory {\n    function grantRewardStashAccess(address) external;\n\n    function createBalRewards(uint256, address) external returns (address);\n\n    function createTokenRewards(\n        address,\n        address,\n        address\n    ) external returns (address);\n\n    function activeRewardCount(address) external view returns (uint256);\n\n    function addActiveReward(address, uint256) external returns (bool);\n\n    function removeActiveReward(address, uint256) external returns (bool);\n}\n\ninterface IStashFactory {\n    function createStash(uint256 _pid, address _gauge) external returns (address);\n}\n\ninterface ITokenFactory {\n    function createDepositToken(address) external returns (address);\n}\n\ninterface IProxyFactory {\n    function clone(address _target) external returns (address);\n}\n\ninterface IRewardHook {\n    function onRewardClaim() external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "contracts/VoterProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\nimport \"./utils/Interfaces.sol\";\nimport \"./utils/MathUtil.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\n/// @title VoterProxy contract\n/// @dev based on Convex's VoterProxy smart contract\n///      https://etherscan.io/address/0x989AEb4d175e16225E39E87d0D97A3360524AD80#code\ncontract VoterProxy is IVoterProxy {\n    using MathUtil for uint256;\n    using SafeERC20 for IERC20;\n\n    // Same address on all chains\n    address public constant SNAPSHOT_REGISTRY = 0x469788fE6E9E9681C6ebF3bF78e7Fd26Fc015446;\n    bytes32 public constant BALANCER_SNAPSHOT_ID = 0x62616c616e6365722e6574680000000000000000000000000000000000000000;\n\n    event OperatorChanged(address newOperator);\n    event DepositorChanged(address newDepositor);\n    event OwnerChanged(address newOwner);\n    event StashAccessGranted(address stash);\n    event VotingPowerDelegated(address _delegate);\n    event VotingPowerCleared();\n\n    error BadInput();\n    error Unauthorized();\n    error NeedsShutdown(); // Current operator must be shutdown before changing the operator\n\n    address public immutable mintr;\n    address public immutable bal; // Reward token\n    address public immutable wethBal; // Staking token\n    address public immutable veBal; // veBal\n    address public immutable gaugeController;\n\n    address public owner; // MultiSig\n    address public operator; // Controller smart contract\n    address public depositor; // BalDepositor smart contract\n\n    mapping(address => bool) private stashAccess; // stash -> canAccess\n    mapping(address => bool) private protectedTokens; // token -> protected\n\n    constructor(\n        address _mintr,\n        address _bal,\n        address _wethBal,\n        address _veBal,\n        address _gaugeController\n    ) {\n        mintr = _mintr;\n        bal = _bal;\n        wethBal = _wethBal;\n        veBal = _veBal;\n        gaugeController = _gaugeController;\n        owner = msg.sender;\n        IERC20(_wethBal).approve(_veBal, type(uint256).max);\n    }\n\n    modifier onlyOwner() {\n        if (msg.sender != owner) {\n            revert Unauthorized();\n        }\n        _;\n    }\n\n    modifier onlyOperator() {\n        if (msg.sender != operator) {\n            revert Unauthorized();\n        }\n        _;\n    }\n\n    modifier onlyDepositor() {\n        if (msg.sender != depositor) {\n            revert Unauthorized();\n        }\n        _;\n    }\n\n    /// @notice Balance of gauge\n    /// @param _gauge The gauge to check\n    /// @return uint256 balance\n    function balanceOfPool(address _gauge) public view returns (uint256) {\n        return IBalGauge(_gauge).balanceOf(address(this));\n    }\n\n    /// @notice Used to change the owner of the contract\n    /// @param _newOwner The new owner of the contract\n    function setOwner(address _newOwner) external onlyOwner {\n        owner = _newOwner;\n        emit OwnerChanged(_newOwner);\n    }\n\n    /// @notice Changes the operator of the contract\n    /// @dev Only the owner can change the operator\n    ///      Current operator must be shutdown before changing the operator\n    ///      Or we can set operator to address(0)\n    /// @param _operator The new operator of the contract\n    function setOperator(address _operator) external onlyOwner {\n        if (operator != address(0) && !IController(operator).isShutdown()) {\n            revert NeedsShutdown();\n        }\n        operator = _operator;\n        emit OperatorChanged(_operator);\n    }\n\n    /// @notice Changes the depositor of the contract\n    /// @dev Only the owner can change the depositor\n    /// @param _depositor The new depositor of the contract\n    function setDepositor(address _depositor) external onlyOwner {\n        depositor = _depositor;\n        emit DepositorChanged(_depositor);\n    }\n\n    /// @notice Used to deposit tokens\n    /// @param _token The address of the LP token\n    /// @param _gauge The gauge to deposit to\n    function deposit(address _token, address _gauge) external onlyOperator {\n        if (protectedTokens[_token] == false) {\n            protectedTokens[_token] = true;\n        }\n        if (protectedTokens[_gauge] == false) {\n            protectedTokens[_gauge] = true;\n        }\n\n        uint256 balance = IERC20(_token).balanceOf(address(this));\n        if (balance > 0) {\n            IERC20(_token).approve(_gauge, balance);\n            IBalGauge(_gauge).deposit(balance);\n        }\n    }\n\n    /// @notice Used for withdrawing tokens\n    /// @dev If this contract doesn't have enough tokens it will withdraw them from gauge\n    /// @param _token ERC20 token address\n    /// @param _gauge The gauge to withdraw from\n    /// @param _amount The amount of tokens to withdraw\n    function withdraw(\n        address _token,\n        address _gauge,\n        uint256 _amount\n    ) public onlyOperator {\n        uint256 _balance = IERC20(_token).balanceOf(address(this));\n\n        if (_balance < _amount) {\n            IBalGauge(_gauge).withdraw(_amount - _balance);\n        }\n        IERC20(_token).transfer(msg.sender, _amount);\n    }\n\n    /// @notice Delegates voting power to EOA\n    /// so that it can vote on behalf of DAO off chain (Snapshot)\n    /// @param _delegateTo to whom we delegate voting power\n    function delegateVotingPower(address _delegateTo) external onlyOperator {\n        ISnapshotDelegateRegistry(SNAPSHOT_REGISTRY).setDelegate(BALANCER_SNAPSHOT_ID, _delegateTo);\n        emit VotingPowerDelegated(_delegateTo);\n    }\n\n    /// @notice Clears delegation\n    function clearDelegate() external onlyOperator {\n        ISnapshotDelegateRegistry(SNAPSHOT_REGISTRY).clearDelegate(BALANCER_SNAPSHOT_ID);\n        emit VotingPowerCleared();\n    }\n\n    /// @notice Votes for multiple gauge weights\n    /// @dev Input arrays must have same length\n    /// @param _gauges The gauges to vote for\n    /// @param _weights The weights for a gauge in basis points (units of 0.01%). Minimal is 0.01%. Ignored if 0\n    function voteMultipleGauges(address[] calldata _gauges, uint256[] calldata _weights) external onlyOperator {\n        if (_gauges.length != _weights.length) {\n            revert BadInput();\n        }\n        for (uint256 i = 0; i < _gauges.length; i = i.unsafeInc()) {\n            IVoting(gaugeController).vote_for_gauge_weights(_gauges[i], _weights[i]);\n        }\n    }\n\n    /// @notice Claims VeBal tokens\n    /// @param _gauge The gauge to claim from\n    /// @return amount claimed\n    function claimBal(address _gauge) external onlyOperator returns (uint256) {\n        uint256 _balance;\n\n        try IMinter(mintr).mint(_gauge) {\n            _balance = IERC20(bal).balanceOf(address(this));\n            IERC20(bal).transfer(operator, _balance);\n            //solhint-disable-next-line\n        } catch {}\n\n        return _balance;\n    }\n\n    /// @notice Claims rewards\n    /// @notice _gauge The gauge to claim from\n    function claimRewards(address _gauge) external onlyOperator {\n        IBalGauge(_gauge).claim_rewards();\n    }\n\n    /// @notice Claims fees\n    /// @param _distroContract The distro contract to claim from\n    /// @param _tokens The tokens to claim\n    function claimFees(address _distroContract, IERC20[] calldata _tokens) external onlyOperator {\n        IFeeDistro(_distroContract).claimTokens(address(this), _tokens);\n\n        for (uint256 i = 0; i < _tokens.length; i = i.unsafeInc()) {\n            uint256 balance = _tokens[i].balanceOf(address(this));\n            if (balance != 0) {\n                _tokens[i].safeTransfer(operator, balance);\n            }\n        }\n    }\n\n    /// @notice Executes a call to `_to` with calldata `_data`\n    /// @param _to The address to call\n    /// @param _value The ETH value to send\n    /// @param _data calldata\n    /// @return The result of the call (bool, result)\n    function execute(\n        address _to,\n        uint256 _value,\n        bytes calldata _data\n    ) external onlyOperator returns (bool, bytes memory) {\n        // solhint-disable-next-line\n        (bool success, bytes memory result) = _to.call{ value: _value }(_data);\n\n        return (success, result);\n    }\n\n    /// @notice Locks BAL tokens to veBal\n    /// @param _value The amount of BAL tokens to lock\n    /// @param _unlockTime Epoch time when tokens unlock, rounded down to whole weeks\n    function createLock(uint256 _value, uint256 _unlockTime) external onlyDepositor {\n        IBalVoteEscrow(veBal).create_lock(_value, _unlockTime);\n    }\n\n    /// @notice Increases amount of veBal tokens without modifying the unlock time\n    /// @param _value The amount of veBal tokens to increase\n    function increaseAmount(uint256 _value) external onlyDepositor {\n        IBalVoteEscrow(veBal).increase_amount(_value);\n    }\n\n    /// @notice Extend the unlock time\n    /// @param _value New epoch time for unlocking\n    function increaseTime(uint256 _value) external onlyDepositor {\n        IBalVoteEscrow(veBal).increase_unlock_time(_value);\n    }\n\n    /// @notice Redeems veBal tokens\n    /// @dev Only possible if the lock has expired\n    function release() external onlyDepositor {\n        IBalVoteEscrow(veBal).withdraw();\n    }\n\n    /// @notice Used for withdrawing tokens\n    /// @dev If this contract doesn't have enough tokens it will withdraw them from gauge\n    /// @param _token ERC20 token address\n    /// @param _gauge The gauge to withdraw from\n    function withdrawAll(address _token, address _gauge) external {\n        // withdraw has authorization check, so we don't need to check here\n        uint256 amount = balanceOfPool(_gauge) + (IERC20(_token).balanceOf(address(this)));\n        withdraw(_token, _gauge, amount);\n    }\n\n    /// @notice Used for withdrawing wethBal tokens to address\n    /// @param _to send to address\n    function withdrawWethBal(address _to) external onlyOperator {\n        IBalVoteEscrow(veBal).withdraw();\n        uint256 _balance = IERC20(wethBal).balanceOf(address(this));\n        IERC20(wethBal).safeTransfer(_to, _balance);\n    }\n}\n"
    },
    "contracts/utils/MathUtil.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\n// copied from https://github.com/Uniswap/v2-core/blob/master/contracts/libraries/SafeMath.sol\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary MathUtil {\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /// @dev Gas optimization for loops that iterate over extra rewards\n    /// We know that this can't overflow because we can't interate over big arrays\n    function unsafeInc(uint256 x) internal pure returns (uint256) {\n        unchecked {\n            return x + 1;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/draft-IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "contracts/VirtualBalanceRewardPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n/**\n *Submitted for verification at Etherscan.io on 2020-07-17\n */\n\n/*\n   ____            __   __        __   _\n  / __/__ __ ___  / /_ / /  ___  / /_ (_)__ __\n _\\ \\ / // // _ \\/ __// _ \\/ -_)/ __// / \\ \\ /\n/___/ \\_, //_//_/\\__//_//_/\\__/ \\__//_/ /_\\_\\\n     /___/\n* Synthetix: VirtualBalanceRewardPool.sol\n*\n* Docs: https://docs.synthetix.io/\n*\n*\n* MIT License\n* ===========\n*\n* Copyright (c) 2020 Synthetix\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n*/\n\nimport \"./utils/Interfaces.sol\";\nimport \"./utils/MathUtil.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\ncontract VirtualBalanceRewardPool {\n    using SafeERC20 for IERC20;\n\n    event RewardAdded(uint256 reward);\n    event Staked(address indexed user, uint256 amount);\n    event Withdrawn(address indexed user, uint256 amount);\n    event RewardPaid(address indexed user, uint256 reward);\n\n    error Unauthorized();\n\n    uint256 public constant DURATION = 7 days;\n    uint256 public constant NEW_REWARD_RATIO = 830;\n\n    IBaseRewardsPool public immutable deposits;\n    IERC20 public immutable rewardToken;\n    address public immutable operator;\n\n    uint256 public periodFinish;\n    uint256 public rewardRate;\n    uint256 public lastUpdateTime;\n    uint256 public rewardPerTokenStored;\n    uint256 public queuedRewards;\n    uint256 public currentRewards;\n    uint256 public historicalRewards;\n\n    mapping(address => uint256) public userRewardPerTokenPaid;\n    mapping(address => uint256) public rewards;\n\n    constructor(\n        address deposit_,\n        address reward_,\n        address op_\n    ) {\n        deposits = IBaseRewardsPool(deposit_);\n        rewardToken = IERC20(reward_);\n        operator = op_;\n    }\n\n    modifier updateReward(address account) {\n        rewardPerTokenStored = rewardPerToken();\n        lastUpdateTime = lastTimeRewardApplicable();\n        if (account != address(0)) {\n            rewards[account] = earned(account);\n            userRewardPerTokenPaid[account] = rewardPerTokenStored;\n        }\n        _;\n    }\n\n    modifier onlyDeposits() {\n        if (msg.sender != address(deposits)) {\n            revert Unauthorized();\n        }\n        _;\n    }\n\n    function totalSupply() public view returns (uint256) {\n        return deposits.totalSupply();\n    }\n\n    function balanceOf(address account) public view returns (uint256) {\n        return deposits.balanceOf(account);\n    }\n\n    function lastTimeRewardApplicable() public view returns (uint256) {\n        // solhint-disable-next-line\n        return MathUtil.min(block.timestamp, periodFinish);\n    }\n\n    function rewardPerToken() public view returns (uint256) {\n        uint256 totalSupplyMemory = totalSupply();\n        if (totalSupplyMemory == 0) {\n            return rewardPerTokenStored;\n        }\n        return\n            rewardPerTokenStored +\n            (((lastTimeRewardApplicable() - lastUpdateTime) * rewardRate * 1e18) / totalSupplyMemory);\n    }\n\n    function earned(address account) public view returns (uint256) {\n        return (balanceOf(account) * (rewardPerToken() - userRewardPerTokenPaid[account])) / 1e18 + rewards[account];\n    }\n\n    //update reward, emit, call linked reward's stake\n    function stake(address _account, uint256 amount) external updateReward(_account) onlyDeposits {\n        emit Staked(_account, amount);\n    }\n\n    function withdraw(address _account, uint256 amount) public updateReward(_account) onlyDeposits {\n        emit Withdrawn(_account, amount);\n    }\n\n    function getReward(address _account) public updateReward(_account) {\n        uint256 reward = earned(_account);\n        if (reward > 0) {\n            rewards[_account] = 0;\n            rewardToken.safeTransfer(_account, reward);\n            emit RewardPaid(_account, reward);\n        }\n    }\n\n    function getReward() external {\n        getReward(msg.sender);\n    }\n\n    function donate(uint256 _amount) external {\n        IERC20(rewardToken).safeTransferFrom(msg.sender, address(this), _amount);\n        queuedRewards = queuedRewards + _amount;\n    }\n\n    function queueNewRewards(uint256 _rewards) external {\n        if (msg.sender != operator) {\n            revert Unauthorized();\n        }\n        _rewards = _rewards + queuedRewards;\n        // solhint-disable-next-line\n        if (block.timestamp >= periodFinish) {\n            notifyRewardAmount(_rewards);\n            queuedRewards = 0;\n            return;\n        }\n\n        //et = now - (finish-duration)\n        // solhint-disable-next-line\n        uint256 elapsedTime = block.timestamp - (periodFinish - DURATION);\n        //current at now: rewardRate * elapsedTime\n        uint256 currentAtNow = rewardRate * elapsedTime;\n        uint256 queuedRatio = (currentAtNow * 1000) / _rewards;\n        if (queuedRatio < NEW_REWARD_RATIO) {\n            notifyRewardAmount(_rewards);\n            queuedRewards = 0;\n        } else {\n            queuedRewards = _rewards;\n        }\n    }\n\n    function notifyRewardAmount(uint256 reward) internal updateReward(address(0)) {\n        historicalRewards = historicalRewards + reward;\n        // solhint-disable-next-line\n        if (block.timestamp >= periodFinish) {\n            rewardRate = reward / DURATION;\n        } else {\n            // solhint-disable-next-line\n            uint256 remaining = periodFinish - block.timestamp;\n            uint256 leftover = remaining * rewardRate;\n            reward = reward + leftover;\n            rewardRate = reward / DURATION;\n        }\n        currentRewards = reward;\n        // solhint-disable-next-line\n        lastUpdateTime = block.timestamp;\n        // solhint-disable-next-line\n        periodFinish = block.timestamp + DURATION;\n        emit RewardAdded(reward);\n    }\n}\n"
    },
    "contracts/test/VoterProxyMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\nimport \"../utils/Interfaces.sol\";\nimport \"../utils/MathUtil.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\n\ninterface IMint {\n    function mint(address _address, uint256 amount) external;\n}\n\ncontract VoterProxyMock is IVoterProxy {\n    event VotingPowerDelegated(address _delegate);\n    event VotingPowerCleared();\n\n    using Address for address;\n\n    address public immutable mintr;\n    address public immutable bal;\n    address public wethBal;\n\n    address public immutable veBal;\n    address public immutable gaugeController;\n\n    address public owner;\n    address public operator;\n    address public depositor;\n\n    mapping(address => bool) private stashPool;\n    mapping(address => bool) private protectedTokens;\n\n    constructor(\n        address mintr_,\n        address bal_,\n        address veBal_,\n        address wethBal_,\n        address gaugeController_\n    ) {\n        owner = msg.sender;\n\n        mintr = mintr_;\n        bal = bal_;\n        veBal = veBal_;\n        wethBal = wethBal_;\n        gaugeController = gaugeController_;\n    }\n\n    function getName() external pure returns (string memory) {\n        return \"BalVoterProxy\";\n    }\n\n    function setOwner(address _owner) external {\n\n    }\n\n    function release() external {}\n\n    function delegateVotingPower(address _to) external {\n        emit VotingPowerDelegated(_to);\n    }\n\n    function clearDelegate() external {\n        emit VotingPowerCleared();\n    }\n\n    function setOperator(address _operator) external {\n        operator = _operator;\n    }\n\n    function setDepositor(address _depositor) external {\n        depositor = _depositor;\n    }\n\n    function grantStashAccess(address _stash)\n        external\n    {}\n\n    function deposit(address _token, address _gauge) external {}\n\n    //stash only function for pulling extra incentive reward tokens out\n    function withdraw(IERC20 _asset) external returns (uint256 balance) {\n        return 1;\n    }\n\n    // Withdraw partial funds\n    function withdraw(\n        address _token,\n        address _gauge,\n        uint256 _amount\n    ) public {}\n\n    function withdrawAll(address _token, address _gauge)\n        external\n    {}\n\n    function _withdrawSome(address _gauge, uint256 _amount)\n        internal\n        returns (uint256)\n    {\n        return _amount;\n    }\n\n    function createLock(uint256 _value, uint256 _unlockTime)\n        external\n    {}\n\n    function increaseAmount(uint256 _value) external {}\n\n    function increaseTime(uint256 _value) external {}\n\n    function withdrawWethBal(address _to) external {\n        uint256 _balance = IERC20(wethBal).balanceOf(address(this));\n        IERC20(wethBal).transfer(_to, _balance);\n    }\n\n    function voteMultipleGauges(address[] calldata _gauges, uint256[] calldata _weights) external {}\n\n    function claimBal(address _gauge) external returns (uint256) {\n        IMint(bal).mint(msg.sender, 100 ether);\n        return 100 ether;\n    }\n\n    function claimRewards(address _gauge) external {}\n\n    function claimFees(address _distroContract, IERC20[] calldata _tokens) external {}\n\n    function balanceOfPool(address _gauge) public view returns (uint256) {\n        return 1;\n    }\n\n    function execute(\n        address _to,\n        uint256 _value,\n        bytes calldata _data\n    ) external returns (bool, bytes memory) {\n        // so that we can test the revert part\n        if(_to == address(1)) {\n            return (false, new bytes(0));\n        }\n        // solhint-disable-next-line\n        (bool success, bytes memory result) = _to.call{value: _value}(_data);\n\n        return (success, result);\n    }\n}\n"
    },
    "contracts/test/StashFactoryMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// solium-disable linebreak-style\npragma solidity 0.8.15;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\n\nimport \"../utils/Interfaces.sol\";\n\ncontract StashFactoryMock {\n    using Address for address;\n\n    bytes4 private constant rewarded_token = 0x16fa50b1; //rewarded_token()\n    bytes4 private constant reward_tokens = 0x54c49fe9; //reward_tokens(uint256)\n    bytes4 private constant rewards_receiver = 0x01ddabf1; //rewards_receiver(address)\n\n    address public immutable operator;\n    address public immutable rewardFactory;\n    address public immutable proxyFactory;\n\n    address public v1Implementation;\n    address public v2Implementation;\n    address public v3Implementation;\n\n    constructor(\n        address _operator,\n        address _rewardFactory,\n        address _proxyFactory\n    ) {\n        operator = _operator;\n        rewardFactory = _rewardFactory;\n        proxyFactory = _proxyFactory;\n    }\n\n    function setImplementation(\n        address _v1\n    ) external {\n        require(msg.sender == IController(operator).owner(), \"!auth\");\n\n        v1Implementation = _v1;\n    }\n\n    //Create a stash contract for the given gauge.\n    //function calls are different depending on the version of curve gauges so determine which stash type is needed\n    function createStash(\n        uint256 _pid,\n        address _gauge\n    ) external returns (address) {\n        require(msg.sender == operator, \"!authorized\");\n        return address(0);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/test/StashMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\nimport \"../utils/Interfaces.sol\";\n\ncontract StashMock is IStash {\n\n    uint256 public pid;\n    address public operator;\n    address public staker;\n    address public gauge;\n    address public rewardFactory;\n\n    // solhint-disable-next-line\n    function processStash() external {}\n    // solhint-disable-next-line\n    function claimRewards() external {\n        IController(operator).claimRewards(pid, gauge);\n    }\n\n    function initialize(\n        uint256 _pid,\n        address _operator,\n        address _gauge,\n        address _rewardFactory\n    ) external {\n        pid = _pid;\n        operator = _operator;\n        gauge = _gauge;\n        rewardFactory = _rewardFactory;\n    }\n}"
    },
    "contracts/test/MintrMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"../utils/Interfaces.sol\";\nimport \"../utils/MathUtil.sol\";\n\n/// @title Token Minter\n/// @dev Original code https://etherscan.io/address/0xd061d61a4d941c39e5453435b6345dc261c2fce0#code\n///      Based on Curve's Minter smart contract\n///      Every mint function 100 BAL tokens\ncontract MintrMock is IMinter, ReentrancyGuard {\n    using MathUtil for uint256;\n\n    event Minted(address indexed recipient, address gauge, uint256 minted);\n\n    address public immutable token;\n    address public immutable controller;\n\n    constructor(address _token, address _controller) {\n        token = _token;\n        controller = _controller;\n    }\n\n    /// @notice Mint tokens for `_for`\n    /// @dev Only possible when `msg.sender` has been approved via `toggle_approve_mint`\n    /// @param _gauge `LiquidityGauge` address to get mintable amount from\n    /// @param _for Address to mint to\n    function mint_for(address _gauge, address _for) external nonReentrant {\n        _mint_for(_gauge, _for);\n    }\n\n    /// @notice Mint everything which belongs to `msg.sender` across multiple gauges\n    /// @param _gauges List of `LiquidityGauge` addresses\n    function mint_many(address[8] calldata _gauges) external nonReentrant {\n        for (uint256 i = 0; i < 8; i = i.unsafeInc()) {\n            if (_gauges[i] == address(0)) {\n                break;\n            }\n            _mint_for(_gauges[i], msg.sender);\n        }\n    }\n \n    /// @notice Mint everything which belongs to `msg.sender` and send to them\n    /// @param _gauge `LiquidityGauge` address to get mintable amount from\n    function mint(address _gauge) external nonReentrant {\n        _mint_for(_gauge, msg.sender);\n    }\n\n    /// @notice allow `_minting_user` to mint for `msg.sender`\n    /// @param _minting_user Address to toggle permission for\n    function toggle_approve_mint(address _minting_user) external {}\n\n    /// @dev Mints 100 * 1e18 BAL tokens for `_for`\n    /// it does not have any authorization checks\n    function _mint_for(address _gauge, address _for) internal {\n        uint256 toMint = 100 ether;\n        ITokenMinter(token).mint(_for, toMint);\n        emit Minted(_for, _gauge, toMint);\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "contracts/test/VeBalMock.sol": {
      "content": "//mock of vebal contract from mainnet\n//by address 0xC128a9954e6c874eA3d62ce62B468bA073093F25\n\n// solium-disable linebreak-style\npragma solidity 0.8.15;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\n\n// Interface for checking whether address belongs to a whitelisted\n// type of a smart wallet.\n// When new types are added - the whole contract is changed\n// The check() method is modifying to be able to use caching\n// for individual wallet addresses \ninterface SmartWalletChecker {\n    function check(address addr) external returns (bool);//nonpayable\n}   \n\ncontract VeBalMock is ERC20, ReentrancyGuard {\n    \n    struct Point{\n        int128 bias;\n        int128 slope; // - dweight / dt\n        uint256 ts;\n        uint256 blk; // block\n    }\n    // We cannot really do block numbers per se b/c slope is per time, not per block\n    // and per block could be fairly bad b/c Ethereum changes blocktimes.\n    // What we can do is to extrapolate ***At functions\n\n    struct LockedBalance{\n        int128 amount; \n        uint256 end;\n    }  \n\n    address constant ZERO_ADDRESS = address(0x0000000000000000000000000000000000000000);\n\n    enum ActionType {DEPOSIT_FOR_TYPE, CREATE_LOCK_TYPE, INCREASE_LOCK_AMOUNT, INCREASE_UNLOCK_TIME}\n\n    event Deposit(address indexed provider, uint256 value, uint256 indexed locktime, uint actionType, uint256 ts);\n    event Withdraw(address indexed provider, uint256 value, uint256 ts);\n    event Supply(uint256 prevSupply, uint256 supply);\n\n    uint256 constant WEEK = 7 * 86400; //all future times are rounded by week\n    uint256 constant MAXTIME = 365 * 86400;  // 1 year\n    uint256 constant MULTIPLIER = 10 ** 18;\n\n    address immutable TOKEN; \n    address immutable AUTHORIZER_ADAPTOR; //Authorizer Adaptor\n\n    //string is not succorted to be immutable in solidity\n    string public NAME; //immutable NAME;\n    string public SYMBOL; //immutable SYMBOL; \n    uint256 immutable DECIMALS;\n\n    uint256 public supply;\n    uint256 private _totalSupply;\n\n    mapping(address => LockedBalance) public locked;\n\n    uint256 public epoch;\n    Point[100000000000000000000000000000] public point_history; //epoch -> unsigned point\n    mapping(address => Point[1000000000]) private user_point_history; //user -> Point[user_epoch]\n    mapping(address => uint256) public user_point_epoch;\n    mapping(uint256 => int128) public slope_changes; //time -> signed slope change\n\n    // Checker for whitelisted (smart contract) wallets which are allowed to deposit\n    // The goal is to prevent tokenizing the escrow\n    address public future_smart_wallet_checker;\n    address public smart_wallet_checker;\n\n    //__init__\n    constructor(\n        address token_addr,\n        string memory _name,\n        string memory  _symbol,\n        address _authorizer_adaptor\n    ) ERC20(_name, _symbol)\n    {\n        /**\n        @notice Contract constructor\n        @param token_addr 80/20 BAL-WETH BPT token address\n        @param _name Token name\n        @param _symbol Token symbol\n        @param _authorizer_adaptor `AuthorizerAdaptor` contract address\n        */\n        require(_authorizer_adaptor != ZERO_ADDRESS, \"BalMock: _authorizer_adaptor == ZERO_ADDRESS\");\n\n        TOKEN = token_addr;\n        AUTHORIZER_ADAPTOR = _authorizer_adaptor;\n        point_history[0].blk = block.number;\n        point_history[0].ts = block.timestamp;\n\n        uint256 _decimals = ERC20(token_addr).decimals();\n        require(_decimals <= 255, \"BalMock: _decimals > 255\");\n\n        NAME = _name;\n        SYMBOL = _symbol;\n        DECIMALS = _decimals;\n    }\n\n    function token() external view returns (address){\n        return TOKEN;\n    }\n    function name() public view virtual override returns (string memory){\n        return NAME;\n    }\n    function symbol() public view virtual override returns (string memory){\n        return SYMBOL;\n    }\n    function admin() external view returns (address){\n        return AUTHORIZER_ADAPTOR;\n    }\n\n    function commit_smart_wallet_checker(address addr) external {\n        require(msg.sender == AUTHORIZER_ADAPTOR);\n        future_smart_wallet_checker = addr;\n    }\n    function apply_smart_wallet_checker() external {\n        require(msg.sender == AUTHORIZER_ADAPTOR);\n        smart_wallet_checker = future_smart_wallet_checker;\n    }\n    \n    function assert_not_contract(address addr) internal {\n        if (addr != tx.origin) {\n            address checker = smart_wallet_checker;\n            if (checker != ZERO_ADDRESS) {\n                if (SmartWalletChecker(checker).check(addr)) {\n                    return;\n                }\n            }\n        }\n        revert(\"Smart contract depositors not allowed\");\n    }    \n    function get_last_user_slope(address addr) external view returns (int128){\n        uint256 uepoch = user_point_epoch[addr];\n        return user_point_history[addr][uepoch].slope;\n    }\n    function user_point_history__ts(address _addr, uint256 _idx) external view returns (uint256){\n        return user_point_history[_addr][_idx].ts;\n    }\n    function locked__end(address _addr) external view returns (uint256){\n        return locked[_addr].end;\n    }\n\n    uint256 user_epoch; //here because eror thar stack is too deep\n    function _checkpoint(address addr, LockedBalance memory old_locked, LockedBalance memory new_locked) internal {\n        Point memory u_old; //empty(Point);\n        Point memory u_new; //empty(Point);\n\n        int128 old_dslope = 0;\n        int128 new_dslope = 0;\n        uint256 _epoch = epoch;\n\n        if (addr != ZERO_ADDRESS) {\n            // Calculate slopes and biases\n            // Kept at zero when they have to\n            if (old_locked.end > block.timestamp && old_locked.amount > 0) {\n                u_old.slope = old_locked.amount / (int128(uint128(MAXTIME)));\n                u_old.bias = u_old.slope * (int128(uint128(old_locked.end - block.timestamp)));\n            if (new_locked.end > block.timestamp && new_locked.amount > 0) {\n                u_new.slope = new_locked.amount / (int128(uint128(MAXTIME)));\n                u_new.bias = u_new.slope * (int128(uint128(new_locked.end - block.timestamp)));\n            }\n            // Read values of scheduled changes in the slope\n            // old_locked.end can be in the past and in the future\n            // new_locked.end can ONLY by in the FUTURE unless everything expired: than zeros\n            old_dslope = slope_changes[old_locked.end];\n            if (new_locked.end != 0) {\n                if (new_locked.end == old_locked.end) {\n                    new_dslope = old_dslope;\n                } else {\n                    new_dslope = slope_changes[new_locked.end];\n                }\n            }\n        }\n        Point memory last_point = Point({bias: 0, slope: 0, ts: block.timestamp, blk: block.number});\n        if (_epoch > 0) {\n            last_point = point_history[_epoch];\n        }\n        uint256 last_checkpoint = last_point.ts;\n        // initial_last_point is used for extrapolation to calculate block number\n        // (approximately, for *At methods) and save them\n        // as we cannot figure that out exactly from inside the contract\n        Point memory initial_last_point = Point({bias : last_point.bias, slope : last_point.slope, ts : last_point.ts, blk : last_point.blk});\n        uint256 block_slope = 0;  // dblock/dt\n        if (block.timestamp > last_point.ts) {\n            block_slope = MULTIPLIER * (block.number - last_point.blk) / (block.timestamp - last_point.ts);\n        }\n        // If last point is already recorded in this block, slope=0\n        // But that's ok b/c we know the block in such case\n\n        // Go over weeks to fill history and calculate what the current point is\n        uint256 t_i = (last_checkpoint / WEEK) * WEEK;\n        for (uint i; i < 255; i++) {\n            // Hopefully it won't happen that this won't get used in 5 years!\n            // If it does, users will be able to withdraw but vote weight will be broken\n            t_i += WEEK;\n            int128 d_slope = 0;\n            if (t_i > block.timestamp) {\n                t_i = block.timestamp;\n            } else {\n                d_slope = slope_changes[t_i];\n            }\n            last_point.bias -= last_point.slope * (int128(uint128(t_i - last_checkpoint)));\n            last_point.slope += d_slope;\n            if (last_point.bias < 0) {  // This can happen\n                last_point.bias = 0;\n            }\n            if (last_point.slope < 0) {  // This cannot happen - just in case\n                last_point.slope = 0;\n            }\n            last_checkpoint = t_i;\n            last_point.ts = t_i;\n            last_point.blk = initial_last_point.blk + (block_slope * (t_i - initial_last_point.ts) / MULTIPLIER);\n            _epoch += 1;\n            if (t_i == block.timestamp) {\n                last_point.blk = block.number;\n                break;\n            } else {\n                point_history[_epoch] = last_point;\n            }\n        }\n        epoch = _epoch;\n        // Now point_history is filled until t=now\n\n        if (addr != ZERO_ADDRESS) {\n            // If last point was in this block, the slope change has been applied already\n            // But in such case we have 0 slope(s)\n            last_point.slope += (u_new.slope - u_old.slope);\n            last_point.bias += (u_new.bias - u_old.bias);\n            if (last_point.slope < 0) {\n                last_point.slope = 0;\n            }\n            if (last_point.bias < 0) {\n                last_point.bias = 0;\n            }\n        }\n        // Record the changed point into history\n        point_history[_epoch] = last_point;\n\n        if (addr != ZERO_ADDRESS) {\n            // Schedule the slope changes (slope is going down)\n            // We subtract new_user_slope from [new_locked.end]\n            // and add old_user_slope to [old_locked.end]\n            if (old_locked.end > block.timestamp) {\n                // old_dslope was <something> - u_old.slope, so we cancel that\n                old_dslope += u_old.slope;\n\n                if (new_locked.end == old_locked.end) {\n                    old_dslope -= u_new.slope;  // It was a new deposit, not extension\n                }\n                slope_changes[old_locked.end] = old_dslope;\n            }\n            if (new_locked.end > block.timestamp) {\n                if (new_locked.end > old_locked.end) {\n                    new_dslope -= u_new.slope;  // old slope disappeared at this point\n                    slope_changes[new_locked.end] = new_dslope;\n                }\n                // else: we recorded it already in old_dslope\n            }\n            // Now handle user history\n            user_epoch = user_point_epoch[addr] + 1; //initialized before function because stack is too deep\n            user_point_epoch[addr] = user_epoch;\n            u_new.ts = block.timestamp;\n            u_new.blk = block.number;\n            user_point_history[addr][user_epoch] = u_new;\n\n        }\n    }\n    \n    }\n    function _deposit_for(address _addr, uint256 _value, uint256 unlock_time, LockedBalance memory locked_balance, ActionType actionType) internal {\n        LockedBalance memory _locked = locked_balance;\n        uint256 supply_before = supply;\n        supply = supply_before + _value;\n        LockedBalance memory old_locked = LockedBalance({amount : _locked.amount, end : _locked.end});//_locked;\n        // Adding to existing lock, or if a lock is expired - creating a new one\n        _locked.amount += int128(uint128(_value));\n        if (unlock_time != 0) {\n            _locked.end = unlock_time;\n        }\n        locked[_addr] = _locked;\n\n        // Possibilities:\n        // Both old_locked.end could be current or expired (>/< block.timestamp)\n        // value == 0 (extend lock) or value > 0 (add to lock or extend lock)\n        // _locked.end > block.timestamp (always)\n        _checkpoint(_addr, old_locked, _locked);\n        if (_value != 0) {\n            IERC20(TOKEN).transferFrom(_addr, address(this), _value);\n        }\n\n        emit Deposit(_addr, _value, _locked.end, uint(actionType), block.timestamp);\n        emit Supply(supply_before, supply_before + _value);\n    }\n\n    function checkpoint() external {\n        LockedBalance memory empty = LockedBalance({amount: 0, end: 0}); //empty(LockedBalance);\n        _checkpoint(ZERO_ADDRESS, empty, empty);//empty(LockedBalance), empty(LockedBalance));\n    }\n\n    function deposit_for(address _addr, uint256 _value) external nonReentrant {\n        LockedBalance memory _locked = locked[_addr];\n        require(_value > 0);  // dev: need non-zero value\n        require(_locked.amount > 0, \"No existing lock found\");\n        require(_locked.end > block.timestamp, \"Cannot add to expired lock. Withdraw\");\n\n        _deposit_for(_addr, _value, 0, _locked, ActionType.DEPOSIT_FOR_TYPE);\n    }\n\n    function create_lock(uint256 _value, uint256 _unlock_time) external nonReentrant {\n        assert_not_contract(msg.sender);\n        uint256 unlock_time = (_unlock_time / WEEK) * WEEK; // Locktime is rounded down to weeks\n        LockedBalance memory _locked = locked[msg.sender]; \n        require(_value > 0); // dev: need non-zero value\n        require(_locked.amount == 0, \"Withdraw old tokens first\");\n        require(unlock_time > block.timestamp, \"Can only lock until time in the future\");\n        require(unlock_time <= block.timestamp + MAXTIME, \"Voting lock can be 1 year max\");\n\n        _deposit_for(msg.sender, _value, unlock_time, _locked, ActionType.CREATE_LOCK_TYPE);\n    }\n\n    function increase_amount(uint256 _value) external nonReentrant {\n        assert_not_contract(msg.sender);\n        LockedBalance memory _locked = locked[msg.sender];\n        require(_value > 0); // dev: need non-zero value\n        require(_locked.amount > 0, \"No existing lock found\");\n        require(_locked.end > block.timestamp, \"Cannot add to expired lock. Withdraw\");\n        _deposit_for(msg.sender, _value, 0, _locked, ActionType.INCREASE_LOCK_AMOUNT);\n    }\n    function increase_unlock_time(uint256 _unlock_time) external nonReentrant {\n        assert_not_contract(msg.sender);\n        LockedBalance memory _locked = locked[msg.sender];\n        uint256 unlock_time = (_unlock_time / WEEK) * WEEK; // Locktime is rounded down to weeks\n        _deposit_for(msg.sender, 0, unlock_time, _locked, ActionType.INCREASE_UNLOCK_TIME);\n    }\n\n    function withdraw() external nonReentrant {\n        LockedBalance memory _locked = locked[msg.sender];\n\n        require(block.timestamp >= _locked.end, \"The lock didn't expire\");\n        uint256 value = uint256(uint128(_locked.amount));\n\n        LockedBalance memory old_locked = _locked;\n        _locked.end = 0;\n        _locked.amount = 0;\n        locked[msg.sender] = _locked;\n        uint256 supply_before = supply;\n        supply = supply_before - value;\n\n        // old_locked can have either expired <= timestamp or zero end\n        // _locked has only 0 end\n        // Both can have >= 0 amount\n        _checkpoint(msg.sender, old_locked, _locked);\n\n        require(IERC20(TOKEN).transfer(msg.sender, value));\n\n        emit Withdraw(msg.sender, value, block.timestamp);\n        emit Supply(supply_before, supply_before - value);\n    }\n\n    // The following ERC20/minime-compatible methods are not real balanceOf and supply!\n    // They measure the weights for the purpose of voting, so they don't represent\n    // real coins.\n\n\n    /**\n    @notice Binary search to find epoch containing block number\n    @param _block Block to find\n    @param max_epoch Don't go beyond this epoch\n    @return Epoch which contains _block\n    */\n    function find_block_epoch(uint256 _block, uint256 max_epoch) internal view returns (uint256){\n        // Binary search\n        uint256 _min = 0;\n        uint256 _max = max_epoch;\n        for (uint i; i < 128; i++) { // Will be always enough for 128-bit numbers\n            if (_min >= _max) {\n                break;\n            }\n            uint256 _mid = (_min + _max + 1) / 2;\n            if (point_history[_mid].blk <= _block) {\n                _min = _mid;\n            } else {\n                _max = _mid - 1;\n            }\n        }\n        return _min;        \n    }\n\n    /**\n    @notice Binary search to find epoch for timestamp\n    @param _timestamp timestamp to find\n    @param max_epoch Don't go beyond this epoch\n    @return Epoch which contains _timestamp\n    */\n    function find_timestamp_epoch(uint256 _timestamp, uint256 max_epoch) internal view returns (uint256){\n        // Binary search\n        uint256 _min = 0;\n        uint256 _max = max_epoch;\n        for (uint i; i < 128; i++) { // Will be always enough for 128-bit numbers\n            if (_min >= _max) {\n                break;\n            }\n            uint256 _mid = (_min + _max + 1) / 2;\n            if (point_history[_mid].ts <= _timestamp) {\n                _min = _mid;\n            } else {\n                _max = _mid - 1;\n            }\n        }\n        return _min;\n    }\n\n    /**\n    @notice Binary search to find epoch for block number\n    @param _addr User for which to find user epoch for\n    @param _block Block to find\n    @param max_epoch Don't go beyond this epoch\n    @return Epoch which contains _block\n    */\n    function find_block_user_epoch(address _addr, uint256 _block, uint256 max_epoch) internal view returns (uint256){\n        // Binary search\n        uint256 _min = 0;\n        uint256 _max = max_epoch;\n        for (uint i; i < 128; i++) { // Will be always enough for 128-bit numbers\n            if (_min >= _max) {\n                break;\n            }\n            uint256 _mid = (_min + _max + 1) / 2;\n            if (user_point_history[_addr][_mid].blk <= _block) {\n                _min = _mid;\n            } else {\n                _max = _mid - 1;\n            }\n        }\n        return _min;\n    }\n\n    /**\n    @notice Binary search to find user epoch for timestamp\n    @param _addr User for which to find user epoch for\n    @param _timestamp timestamp to find\n    @param max_epoch Don't go beyond this epoch\n    @return Epoch which contains _timestamp\n    */\n    function find_timestamp_user_epoch(address _addr, uint256 _timestamp, uint256 max_epoch) internal view returns (uint256){\n        // Binary search\n        uint256 _min = 0;\n        uint256 _max = max_epoch;\n        for (uint i; i < 128; i++) {  // Will be always enough for 128-bit numbers\n            if (_min >= _max) {\n                break;\n            }\n            uint256 _mid = (_min + _max + 1) / 2;\n            if (user_point_history[_addr][_mid].ts <= _timestamp) {\n                _min = _mid;\n            } else {\n                _max = _mid - 1;\n            }\n        }\n        return _min;\n    }\n\n    /**\n    @notice Get the current voting power for `msg.sender`\n    @dev Adheres to the ERC20 `balanceOf` interface for Aragon compatibility\n    @param addr User wallet address\n    @param _t Epoch time to return voting power at\n    @return User voting power\n    */\n    function balanceOf(address addr, uint256 _t) external view returns (uint256){\n        if (_t == 0){\n            _t = block.timestamp;\n        }\n        uint256 _epoch = 0;\n        if (_t == block.timestamp) {\n            // No need to do binary search, will always live in current epoch\n            _epoch = user_point_epoch[addr];\n        } else {\n            _epoch = find_timestamp_user_epoch(addr, _t, user_point_epoch[addr]);\n        }\n\n        if (_epoch == 0) {\n            return 0;\n        } else {\n            Point memory last_point = user_point_history[addr][_epoch];\n            last_point.bias -= last_point.slope * (int128(uint128(_t - last_point.ts)));\n            if (last_point.bias < 0) {\n                last_point.bias = 0;\n            }\n\n            return uint256(uint128(last_point.bias));\n        }\n    }\n\n    function balanceOfAt(address addr, uint256 _block) external view returns (uint256) {\n        require(_block <= block.number);\n\n        uint256 _user_epoch = find_block_user_epoch(addr, _block, user_point_epoch[addr]);\n        Point memory upoint = user_point_history[addr][_user_epoch];\n\n        uint256 max_epoch = epoch;\n        uint256 _epoch= find_block_epoch(_block, max_epoch);\n        Point memory point_0 = point_history[_epoch];\n        uint256 d_block = 0;\n        uint256 d_t = 0;\n        if (_epoch < max_epoch) {\n            Point memory point_1 = point_history[_epoch + 1];\n            d_block = point_1.blk - point_0.blk;\n            d_t = point_1.ts - point_0.ts;\n        } else {\n            d_block = block.number - point_0.blk;\n            d_t = block.timestamp - point_0.ts;\n        }\n        uint256 block_time = point_0.ts;\n        if (d_block != 0) {\n            block_time += d_t * (_block - point_0.blk) / d_block;\n        }\n        upoint.bias -= upoint.slope * (int128(uint128(block_time - upoint.ts)));\n        if (upoint.bias >= 0) {\n            return uint256(uint128(upoint.bias));\n        } else {\n            return 0;\n        }\n    }\n\n    /**\n    @notice Calculate total voting power at some point in the past\n    @param point The point (bias/slope) to start search from\n    @param t Time to calculate the total voting power at\n    @return Total voting power at that time\n    */\n    function supply_at(Point memory point, uint256 t) internal view returns (uint256){\n        Point memory last_point = point;\n        uint256 t_i = (last_point.ts / WEEK) * WEEK;\n        for (uint i; i < 255; i++) {\n            t_i += WEEK;\n            int128 d_slope = 0;\n            if (t_i > t) {\n                t_i = t;\n            } else {\n                d_slope = slope_changes[t_i];\n            }\n            last_point.bias -= last_point.slope * (int128(uint128(t_i - last_point.ts)));\n            if (t_i == t) {\n                break;\n            }\n            last_point.slope += d_slope;\n            last_point.ts = t_i;\n        }\n        if (last_point.bias < 0) {\n            last_point.bias = 0;\n        }\n        return uint256(uint128(last_point.bias));\n    }\n\n    /**\n    @notice Calculate total voting power\n    @dev Adheres to the ERC20 `totalSupply` interface for Aragon compatibility\n    @return Total voting power\n    */\n    function totalSupply(uint256 t) external view returns (uint256){\n        uint256 _epoch = 0;\n        if (t == block.timestamp) {\n            // No need to do binary search, will always live in current epoch\n            _epoch = epoch;\n        } else {\n            _epoch = find_timestamp_epoch(t, epoch);\n        }\n        if (_epoch == 0) {\n            return 0;\n        } else {\n            Point memory last_point = point_history[_epoch];\n            return supply_at(last_point, t);\n        }\n    }\n\n    /**\n    @notice Calculate total voting power at some point in the past\n    @param _block Block to calculate the total voting power at\n    @return Total voting power at `_block`\n    */\n    function totalSupplyAt(uint256 _block) external view returns (uint256){\n        require(_block <= block.number, \"_block > block.number\");\n        uint256 _epoch = epoch;\n        uint256 target_epoch = find_block_epoch(_block, _epoch);\n\n        Point memory point = point_history[target_epoch];\n        uint256 dt = 0;\n        if (target_epoch < _epoch){\n            Point memory point_next = point_history[target_epoch + 1];\n            if (point.blk != point_next.blk){\n                dt = (_block - point.blk) * (point_next.ts - point.ts) / (point_next.blk - point.blk);\n            }\n        }else{\n            if (point.blk != block.number){\n                dt = (_block - point.blk) * (block.timestamp - point.ts) / (block.number - point.blk);\n            }\n        }\n        // Now dt contains info on how far are we beyond point\n\n        return supply_at(point, point.ts + dt);\n    }\n\n}"
    },
    "contracts/test/ERC20Mock.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// solium-disable linebreak-style\npragma solidity 0.8.15;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract ERC20Mock is ERC20, Ownable {\n    uint256 public constant INITIAL_SUPPLY = 100_000 ether;\n\n    constructor(string memory _name, string memory _symbol)\n        ERC20(_name, _symbol)\n    {\n        _mint(msg.sender, INITIAL_SUPPLY);\n    }\n\n    function mint(address _address, uint256 amount) public {\n        _mint(_address, amount);\n    }\n\n    function burn(address _address, uint256 amount) public {\n        _burn(_address, amount);\n    }\n\n    function burnAll(address _address) public {\n        uint256 amount = balanceOf(_address);\n        _burn(_address, amount);\n    }\n}\n"
    },
    "contracts/tokens/D2DBal.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\nimport \"@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\n/// @title D2DBal token\n/// @dev Ownership is transfered to BalDepositor smart contract after it is deployed\ncontract D2DBal is ERC20Permit, Ownable {\n    // solhint-disable-next-line\n    constructor() ERC20Permit(\"D2DBal\") ERC20(\"D2DBal\", \"D2DBAL\") {}\n\n    function mint(address _to, uint256 _amount) external onlyOwner {\n        _mint(_to, _amount);\n    }\n\n    function burn(address _from, uint256 _amount) external onlyOwner {\n        _burn(_from, _amount);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/extensions/draft-ERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./draft-IERC20Permit.sol\";\nimport \"../ERC20.sol\";\nimport \"../../../utils/cryptography/draft-EIP712.sol\";\nimport \"../../../utils/cryptography/ECDSA.sol\";\nimport \"../../../utils/Counters.sol\";\n\n/**\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * _Available since v3.4._\n */\nabstract contract ERC20Permit is ERC20, IERC20Permit, EIP712 {\n    using Counters for Counters.Counter;\n\n    mapping(address => Counters.Counter) private _nonces;\n\n    // solhint-disable-next-line var-name-mixedcase\n    bytes32 private constant _PERMIT_TYPEHASH =\n        keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\n    /**\n     * @dev In previous versions `_PERMIT_TYPEHASH` was declared as `immutable`.\n     * However, to ensure consistency with the upgradeable transpiler, we will continue\n     * to reserve a slot.\n     * @custom:oz-renamed-from _PERMIT_TYPEHASH\n     */\n    // solhint-disable-next-line var-name-mixedcase\n    bytes32 private _PERMIT_TYPEHASH_DEPRECATED_SLOT;\n\n    /**\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\"1\"`.\n     *\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\n     */\n    constructor(string memory name) EIP712(name, \"1\") {}\n\n    /**\n     * @dev See {IERC20Permit-permit}.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual override {\n        require(block.timestamp <= deadline, \"ERC20Permit: expired deadline\");\n\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\n\n        bytes32 hash = _hashTypedDataV4(structHash);\n\n        address signer = ECDSA.recover(hash, v, r, s);\n        require(signer == owner, \"ERC20Permit: invalid signature\");\n\n        _approve(owner, spender, value);\n    }\n\n    /**\n     * @dev See {IERC20Permit-nonces}.\n     */\n    function nonces(address owner) public view virtual override returns (uint256) {\n        return _nonces[owner].current();\n    }\n\n    /**\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\n        return _domainSeparatorV4();\n    }\n\n    /**\n     * @dev \"Consume a nonce\": return the current value and increment.\n     *\n     * _Available since v4.1._\n     */\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\n        Counters.Counter storage nonce = _nonces[owner];\n        current = nonce.current();\n        nonce.increment();\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/draft-EIP712.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ECDSA.sol\";\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n *\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\n *\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n * ({_hashTypedDataV4}).\n *\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n * the chain id to protect against replay attacks on an eventual fork of the chain.\n *\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n *\n * _Available since v3.4._\n */\nabstract contract EIP712 {\n    /* solhint-disable var-name-mixedcase */\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\n    // invalidate the cached domain separator if the chain id changes.\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\n    uint256 private immutable _CACHED_CHAIN_ID;\n    address private immutable _CACHED_THIS;\n\n    bytes32 private immutable _HASHED_NAME;\n    bytes32 private immutable _HASHED_VERSION;\n    bytes32 private immutable _TYPE_HASH;\n\n    /* solhint-enable var-name-mixedcase */\n\n    /**\n     * @dev Initializes the domain separator and parameter caches.\n     *\n     * The meaning of `name` and `version` is specified in\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n     *\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n     * - `version`: the current major version of the signing domain.\n     *\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n     * contract upgrade].\n     */\n    constructor(string memory name, string memory version) {\n        bytes32 hashedName = keccak256(bytes(name));\n        bytes32 hashedVersion = keccak256(bytes(version));\n        bytes32 typeHash = keccak256(\n            \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"\n        );\n        _HASHED_NAME = hashedName;\n        _HASHED_VERSION = hashedVersion;\n        _CACHED_CHAIN_ID = block.chainid;\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\n        _CACHED_THIS = address(this);\n        _TYPE_HASH = typeHash;\n    }\n\n    /**\n     * @dev Returns the domain separator for the current chain.\n     */\n    function _domainSeparatorV4() internal view returns (bytes32) {\n        if (address(this) == _CACHED_THIS && block.chainid == _CACHED_CHAIN_ID) {\n            return _CACHED_DOMAIN_SEPARATOR;\n        } else {\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\n        }\n    }\n\n    function _buildDomainSeparator(\n        bytes32 typeHash,\n        bytes32 nameHash,\n        bytes32 versionHash\n    ) private view returns (bytes32) {\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\n    }\n\n    /**\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n     * function returns the hash of the fully encoded EIP712 message for this domain.\n     *\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n     *\n     * ```solidity\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     *     keccak256(\"Mail(address to,string contents)\"),\n     *     mailTo,\n     *     keccak256(bytes(mailContents))\n     * )));\n     * address signer = ECDSA.recover(digest, signature);\n     * ```\n     */\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return tryRecover(hash, r, vs);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Counters.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "contracts/test/WETHBALMock.sol": {
      "content": "// from 0x5c6Ee304399DBdB9C8Ef030aB642B10820DB8F56\n// File 10 of 42 : BalancerPoolToken.sol\n\n// SPDX-License-Identifier: GPL-3.0-or-later\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity 0.8.15;\n\n// import \"../lib/math/Math.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\";\n\n/**\n * @title Highly opinionated token implementation\n * @author Balancer Labs\n * @dev\n * - Includes functions to increase and decrease allowance as a workaround\n *   for the well-known issue with `approve`:\n *   https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n * - Allows for 'infinite allowance', where an allowance of 0xff..ff is not\n *   decreased by calls to transferFrom\n * - Lets a token holder use `transferFrom` to send their own tokens,\n *   without first setting allowance\n * - Emits 'Approval' events whenever allowance is changed by `transferFrom`\n */\ncontract WETHBALMock is IERC20, IERC20Permit, EIP712 {\n    using SafeMath for uint256;\n\n    // State variables\n\n    uint8 private constant _DECIMALS = 18;\n\n    mapping(address => uint256) private _balance;\n    mapping(address => mapping(address => uint256)) private _allowance;\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    mapping(address => uint256) private _nonces;\n\n    // solhint-disable-next-line var-name-mixedcase\n    bytes32 private immutable _PERMIT_TYPE_HASH = keccak256(\n        \"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\"\n    );\n\n    // Function declarations\n\n    constructor(string memory tokenName, string memory tokenSymbol) EIP712(tokenName, \"1\") {\n        _name = tokenName;\n        _symbol = tokenSymbol;\n    }\n\n    // External functions\n\n    function allowance(address owner, address spender) external view override returns (uint256) {\n        return _allowance[owner][spender];\n    }\n\n    function balanceOf(address account) external view override returns (uint256) {\n        return _balance[account];\n    }\n\n    function approve(address spender, uint256 amount) external override returns (bool) {\n        _setAllowance(msg.sender, spender, amount);\n\n        return true;\n    }\n\n    function increaseApproval(address spender, uint256 amount) external returns (bool) {\n        _setAllowance(msg.sender, spender, _allowance[msg.sender][spender].add(amount));\n\n        return true;\n    }\n\n    function decreaseApproval(address spender, uint256 amount) external returns (bool) {\n        uint256 currentAllowance = _allowance[msg.sender][spender];\n\n        if (amount >= currentAllowance) {\n            _setAllowance(msg.sender, spender, 0);\n        } else {\n            _setAllowance(msg.sender, spender, currentAllowance.sub(amount));\n        }\n\n        return true;\n    }\n\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\n        _move(msg.sender, recipient, amount);\n\n        return true;\n    }\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external override returns (bool) {\n        uint256 currentAllowance = _allowance[sender][msg.sender];\n        require(msg.sender == sender || currentAllowance >= amount, \"INSUFFICIENT_ALLOWANCE\");\n\n        _move(sender, recipient, amount);\n\n        if (msg.sender != sender && currentAllowance > 0) {\n            // Because of the previous require, we know that if msg.sender != sender then currentAllowance >= amount\n            _setAllowance(sender, msg.sender, currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual override {\n        // solhint-disable-next-line not-rely-on-time\n        require(block.timestamp <= deadline, \"EXPIRED_PERMIT\");\n\n        uint256 nonce = _nonces[owner];\n\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPE_HASH, owner, spender, value, nonce, deadline));\n\n        bytes32 hash = _hashTypedDataV4(structHash);\n\n        address signer = ecrecover(hash, v, r, s);\n        require((signer != address(0)) && (signer == owner), \"INVALID_SIGNATURE\");\n\n        _nonces[owner] = nonce + 1;\n        _setAllowance(owner, spender, value);\n    }\n\n    // Public functions\n\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    function decimals() public pure returns (uint8) {\n        return _DECIMALS;\n    }\n\n    function totalSupply() public view override returns (uint256) {\n        return _totalSupply;\n    }\n\n    function nonces(address owner) external view override returns (uint256) {\n        return _nonces[owner];\n    }\n\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\n        return _domainSeparatorV4();\n    }\n\n    // Internal functions\n\n    function _mintPoolTokens(address recipient, uint256 amount) internal {\n        _balance[recipient] = _balance[recipient].add(amount);\n        _totalSupply = _totalSupply.add(amount);\n        emit Transfer(address(0), recipient, amount);\n    }\n\n    function _burnPoolTokens(address sender, uint256 amount) internal {\n        uint256 currentBalance = _balance[sender];\n        require(currentBalance >= amount, \"INSUFFICIENT_BALANCE\");\n\n        _balance[sender] = currentBalance - amount;\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(sender, address(0), amount);\n    }\n\n    function _move(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal {\n        uint256 currentBalance = _balance[sender];\n        require(currentBalance >= amount, \"INSUFFICIENT_BALANCE\");\n        // Prohibit transfers to the zero address to avoid confusion with the\n        // Transfer event emitted by `_burnPoolTokens`\n        require(recipient != address(0), \"ERC20_TRANSFER_TO_ZERO_ADDRESS\");\n\n        _balance[sender] = currentBalance - amount;\n        _balance[recipient] = _balance[recipient].add(amount);\n\n        emit Transfer(sender, recipient, amount);\n    }\n\n    // Private functions\n\n    function _setAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) private {\n        _allowance[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n}"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "contracts/tokens/DepositToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\nimport \"@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol\";\n\ncontract DepositToken is ERC20Permit {\n    error Unauthorized();\n\n    address public immutable operator;\n\n    constructor(address _operator, address _lptoken)\n        ERC20Permit(string(abi.encodePacked(\"D2D \", ERC20(_lptoken).name())))\n        ERC20(\n            string(abi.encodePacked(\"D2D \", ERC20(_lptoken).name())),\n            string(abi.encodePacked(\"d2d \", ERC20(_lptoken).symbol()))\n        )\n    {\n        operator = _operator;\n    }\n\n    function mint(address _to, uint256 _amount) external {\n        if (msg.sender != operator) {\n            revert Unauthorized();\n        }\n        _mint(_to, _amount);\n    }\n\n    function burn(address _from, uint256 _amount) external {\n        if (msg.sender != operator) {\n            revert Unauthorized();\n        }\n        _burn(_from, _amount);\n    }\n}\n"
    },
    "contracts/factories/TokenFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// solium-disable linebreak-style\npragma solidity 0.8.15;\n\nimport \"../tokens/DepositToken.sol\";\nimport \"../utils/Interfaces.sol\";\n\ncontract TokenFactory is ITokenFactory {\n    error Unauthorized();\n\n    address public immutable operator;\n\n    constructor(address _operator) {\n        operator = _operator;\n    }\n\n    function createDepositToken(address _lptoken) external returns (address) {\n        if (msg.sender != operator) {\n            revert Unauthorized();\n        }\n        DepositToken dtoken = new DepositToken(msg.sender, _lptoken);\n        return address(dtoken);\n    }\n}\n"
    },
    "contracts/test/Distro.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"../utils/Interfaces.sol\";\n\ncontract Distro is ERC20 {\n\n    address immutable TOKEN; \n\n    constructor(\n        address token_addr\n    ) ERC20(\"Distro\", \"Distro\")\n    public {\n        /**\n        @notice Distro constructor\n        @param token_addr BAL token address\n        */\n        uint256 _decimals = ERC20(token_addr).decimals();\n        require(_decimals <= 255, \"BalMock: _decimals > 255\");\n        TOKEN = token_addr;\n    }\n\n    // solhint-disable-next-line no-empty-blocks\n    function claim() external {}\n    \n    function token() external view returns (address) {\n        return TOKEN;\n    }\n}\n"
    },
    "contracts/test/CustomERC20Mock.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// solium-disable linebreak-style\npragma solidity 0.8.15;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract CustomERC20Mock is ERC20 {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    constructor(string memory _name, string memory _symbol)\n        ERC20(_name, _symbol)\n    {\n        _balances[msg.sender] += 20000000000000000000000;\n    }\n\n    function transfer(address recipient, uint256 amount)\n        public\n        virtual\n        override\n        returns (bool)\n    {\n        bool success = _customTransfer(_msgSender(), recipient, amount);\n        return success;\n    }\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        if (currentAllowance < amount) {\n            return false;\n        }\n\n        bool success = _customTransfer(sender, recipient, amount);\n        if (success) {\n            /* solium-disable */\n            unchecked {\n                _approve(sender, _msgSender(), currentAllowance - amount);\n            }\n            /* solium-enable */\n        }\n        return true;\n    }\n\n    function approve(address spender, uint256 amount)\n        public\n        virtual\n        override\n        returns (bool)\n    {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    function balanceOf(address account)\n        public\n        view\n        virtual\n        override\n        returns (uint256)\n    {\n        return _balances[account];\n    }\n\n    function burn(address account) public {\n        _balances[account] = 0;\n    }\n\n    function _customTransfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual returns (bool) {\n        uint256 senderBalance = _balances[sender];\n        if (\n            sender == address(0) ||\n            recipient == address(0) ||\n            senderBalance < amount\n        ) {\n            return false;\n        }\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n        emit Transfer(sender, recipient, amount);\n    }\n\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual override {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n}"
    },
    "contracts/test/CustomDecimalERC20Mock.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// solium-disable linebreak-style\npragma solidity 0.8.15;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract CustomDecimalERC20Mock is ERC20 {\n    uint8 private immutable _decimals;\n\n    constructor(\n        string memory _name,\n        string memory _symbol,\n        uint8 decimals_\n    ) ERC20(_name, _symbol) {\n        _mint(msg.sender, 200000000000000000000000000);\n        _decimals = decimals_;\n    }\n\n    function decimals() public view virtual override returns (uint8) {\n        return _decimals;\n    }\n}\n"
    },
    "contracts/test/GaugeMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\nimport \"../utils/Interfaces.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ncontract GaugeMock is IBalGauge {\n\n    IERC20 public lpToken;\n\n    constructor(address _lpToken) {\n        lpToken = IERC20(_lpToken);\n    }\n\n    function deposit(uint256 _amount) external {\n        lpToken.transferFrom(msg.sender, address(this), _amount);\n    }\n\n    function balanceOf(address) external view returns (uint256) {\n        return 100 ether;\n    }\n\n    function withdraw(uint256 _amount) external {\n        lpToken.transfer(msg.sender, _amount);\n    }\n\n    function claim_rewards() external {\n\n    }\n\n    function reward_tokens(uint256 idx) external view returns (address) {\n        if (idx == 2) {\n            return address(0);\n        }\n        return address(lpToken);\n    } //v2\n\n    function rewarded_token() external view returns (address) {\n        return address(0);\n    } //v1\n\n    function lp_token() external view returns (address) {\n        return address(0);\n    }\n\n    function set_rewards_receiver(address) external view returns(bool, bytes memory) {\n        return (true, new bytes(0));\n    }\n}"
    },
    "contracts/test/ExtraRewardMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\nimport \"../utils/Interfaces.sol\";\n\ncontract ExtraRewardMock is IRewards {\n    constructor() {}\n\n\n    function stake(address, uint256) external {\n\n    }\n\n    function stakeFor(address, uint256) external {\n\n    }\n\n    function withdraw(address, uint256) external {\n\n    }\n\n    function exit(address) external {\n\n    }\n\n    function getReward(address) external {\n\n    }\n\n    function queueNewRewards(uint256) external {\n\n    }\n\n    function notifyRewardAmount(uint256) external {\n\n    }\n\n    function addExtraReward(address) external {\n\n    }\n\n    function stakingToken() external view returns (address) {\n\n    }\n\n    function rewardToken() external view returns (address) {\n\n    }\n\n    function earned(address account) external view returns (uint256) {\n\n    }\n}"
    },
    "contracts/test/DistroMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\nimport \"../utils/Interfaces.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ncontract DistroMock is IFeeDistro {\n    // solhint-disable-next-line\n    function claimToken(address user, IERC20 token) external pure returns (uint256) {\n        return 0;\n    }\n    // solhint-disable-next-line\n    function claimTokens(address user, IERC20[] calldata tokens) external pure returns (uint256[] memory) {\n        uint256[] memory res;\n        return res;\n    }\n}"
    },
    "contracts/test/ControllerMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\nimport \"../utils/Interfaces.sol\";\n\ncontract ControllerMock is IController {\n\n    event StashCreated();\n\n    address public lockRewards;\n\n    bool public isShutdown;\n\n    address public owner;\n\n    address public baseRewardPool;\n\n    constructor() {\n        owner = msg.sender;\n    }\n    // solhint-disable-next-line\n\n\n    function balanceOf(address _account) external view returns (uint256) {\n        return 0;\n    }\n\n    function totalSupply() external view returns (uint256) {\n        return 0;\n    }\n\n    function redeemWethBal() external {\n\n    }\n\n    function poolInfo(uint256)\n        external\n        view\n        returns (\n            address,\n            address,\n            address,\n            address,\n            address,\n            bool\n        ) {\n            return (address(0), address(0), address(0), baseRewardPool, address(0), false);\n        }\n\n    function withdrawTo(\n        uint256,\n        uint256,\n        address\n    ) external {}\n\n    function claimRewards(uint256, address) external {}\n\n    function queueNewRewards(uint256 _rewards) external {\n        IRewards(lockRewards).queueNewRewards(_rewards);\n    }\n\n    function createStash(address _stash) external {\n        address createdStash = IStashFactory(_stash).createStash(\n            1,\n            address(0)\n        );\n\n        emit StashCreated();\n    }\n\n    function poolLength() external returns(uint256) { return 0; }\n\n    function deposit(\n        uint256 _pid,\n        uint256 _amount,\n        bool _stake\n    ) external {}\n\n    function depositAll(uint256 _pid, bool _stake) external {}\n\n    function withdraw(uint256 _pid, uint256 _amount) external {}\n\n    function withdrawAll(uint256 _pid) external {}\n\n    function withdrawUnlockedWethBal() external {}\n\n    function earmarkFees() external {}\n\n    function earmarkRewards(uint256 _pid) external {}\n\n    function setRewardContracts(address _rewards) external {\n        lockRewards = _rewards;\n    }\n\n    function queueNewRewardsOnVirtualBalanceRewardContract(address addr, uint256 amt) external {\n        IRewards(addr).queueNewRewards(amt);\n    }\n    \n    function callExtraRewardStashClaimRewards(address _stash, address _rewardFactory) external {\n        IRewardFactory(_rewardFactory).grantRewardStashAccess(_stash);\n        IStash(_stash).claimRewards();\n    }\n    \n    function callGrantRewardStashAccess(address _stash, address _rewardFactory) external {\n        IRewardFactory(_rewardFactory).grantRewardStashAccess(_stash);\n    }\n\n    function setBaseRewardPool(address pool) external {\n        baseRewardPool = pool;\n    }\n\n    function callExtraRewardStashClaimRewards(address _stash) external {\n        IStash(_stash).claimRewards();\n    }\n\n    function callProcessStash(address _stash) external {\n        IStash(_stash).processStash();\n    }\n}"
    },
    "contracts/test/BaseRewardPoolMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\nimport \"../utils/Interfaces.sol\";\n\ncontract BaseRewardPoolMock {\n    function callWithdrawToOnController(address controller, uint256 pid, uint256 amount) external {\n        IController(controller).withdrawTo(pid, amount, msg.sender);\n    }\n}"
    },
    "contracts/factories/StashFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\nimport \"../utils/Interfaces.sol\";\n\n/// @title Stash Factory\ncontract StashFactory is IStashFactory {\n    event ImpelemntationChanged(address _newImplementation);\n\n    error Unauthorized();\n\n    address public immutable operator;\n    address public immutable rewardFactory;\n    address public immutable proxyFactory;\n\n    address public implementation;\n\n    constructor(\n        address _operator,\n        address _rewardFactory,\n        address _proxyFactory\n    ) {\n        operator = _operator;\n        rewardFactory = _rewardFactory;\n        proxyFactory = _proxyFactory;\n    }\n\n    /// @notice Used to set address for new implementation contract\n    /// @param _newImplementation Address of new implementation contract\n    function setImplementation(address _newImplementation) external {\n        if (msg.sender != IController(operator).owner()) {\n            revert Unauthorized();\n        }\n        implementation = _newImplementation;\n        emit ImpelemntationChanged(_newImplementation);\n    }\n\n    /// @notice Create a stash contract for the given gauge\n    /// @param _pid The PID of the pool\n    /// @param _gauge Gauge address\n    function createStash(uint256 _pid, address _gauge) external returns (address) {\n        if (msg.sender != operator) {\n            revert Unauthorized();\n        }\n        address stash = IProxyFactory(proxyFactory).clone(implementation);\n        IStash(stash).initialize(_pid, msg.sender, _gauge, rewardFactory);\n        return stash;\n    }\n}\n"
    },
    "contracts/factories/RewardFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\nimport \"../utils/Interfaces.sol\";\nimport \"../BaseRewardPool.sol\";\nimport \"../VirtualBalanceRewardPool.sol\";\nimport \"../utils/MathUtil.sol\";\n\n/// @title RewardFactory contract\ncontract RewardFactory is IRewardFactory {\n    using MathUtil for uint256;\n\n    event ExtraRewardAdded(address reward, uint256 pid);\n    event ExtraRewardRemoved(address reward, uint256 pid);\n    event StashAccessGranted(address stash);\n    event BaseRewardPoolCreated(address poolAddress);\n    event VirtualBalanceRewardPoolCreated(address baseRewardPool, address poolAddress, address token);\n\n    error Unauthorized();\n\n    address public immutable bal;\n    address public immutable operator;\n\n    mapping(address => bool) private rewardAccess;\n    mapping(address => uint256[]) public rewardActiveList;\n\n    constructor(address _operator, address _bal) {\n        operator = _operator;\n        bal = _bal;\n    }\n\n    /// @notice Get active rewards count\n    /// @return uint256 number of active rewards\n    function activeRewardCount(address _reward) external view returns (uint256) {\n        return rewardActiveList[_reward].length;\n    }\n\n    /// @notice Adds a new reward to the active list\n    /// @return true on success\n    function addActiveReward(address _reward, uint256 _pid) external returns (bool) {\n        if (!rewardAccess[msg.sender]) {\n            revert Unauthorized();\n        }\n        uint256 pid = _pid + 1; // offset by 1 so that we can use 0 as empty\n\n        uint256[] memory activeListMemory = rewardActiveList[_reward];\n        for (uint256 i = 0; i < activeListMemory.length; i = i.unsafeInc()) {\n            if (activeListMemory[i] == pid) return true;\n        }\n        rewardActiveList[_reward].push(pid);\n        emit ExtraRewardAdded(_reward, _pid);\n        return true;\n    }\n\n    /// @notice Removes active reward\n    /// @param _reward The address of the reward contract\n    /// @param _pid The pid of the pool\n    /// @return true on success\n    function removeActiveReward(address _reward, uint256 _pid) external returns (bool) {\n        if (!rewardAccess[msg.sender]) {\n            revert Unauthorized();\n        }\n        uint256 pid = _pid + 1; //offset by 1 so that we can use 0 as empty\n\n        uint256[] memory activeListMemory = rewardActiveList[_reward];\n        for (uint256 i = 0; i < activeListMemory.length; i = i.unsafeInc()) {\n            if (activeListMemory[i] == pid) {\n                if (i != activeListMemory.length - 1) {\n                    rewardActiveList[_reward][i] = rewardActiveList[_reward][activeListMemory.length - 1];\n                }\n                rewardActiveList[_reward].pop();\n                emit ExtraRewardRemoved(_reward, _pid);\n                break;\n            }\n        }\n        return true;\n    }\n\n    /// @notice Grants rewardAccess to stash\n    /// @dev Stash contracts need access to create new Virtual balance pools for extra gauge incentives(ex. snx)\n    function grantRewardStashAccess(address _stash) external {\n        if (msg.sender != operator) {\n            revert Unauthorized();\n        }\n        rewardAccess[_stash] = true;\n        emit StashAccessGranted(_stash);\n    }\n\n    //Create a Managed Reward Pool to handle distribution of all bal mined in a pool\n    /// @notice Creates a new Reward pool\n    /// @param _pid The pid of the pool\n    /// @param _depositToken address of the token\n    function createBalRewards(uint256 _pid, address _depositToken) external returns (address) {\n        if (msg.sender != operator) {\n            revert Unauthorized();\n        }\n\n        BaseRewardPool rewardPool = new BaseRewardPool(_pid, _depositToken, bal, msg.sender, address(this));\n        emit BaseRewardPoolCreated(address(rewardPool));\n\n        return address(rewardPool);\n    }\n\n    /// @notice Create a virtual balance reward pool that mimicks the balance of a pool's main reward contract\n    /// @dev used for extra incentive tokens(ex. snx) as well as vebal fees\n    /// @param _token address of the token\n    /// @param _mainRewards address of the main reward pool contract\n    /// @param _rewardPoolOwner address of the reward pool owner\n    /// @return address of the new reward pool\n    function createTokenRewards(\n        address _token,\n        address _mainRewards,\n        address _rewardPoolOwner\n    ) external returns (address) {\n        if (msg.sender != operator && !rewardAccess[msg.sender]) {\n            revert Unauthorized();\n        }\n\n        // create new pool, use main pool for balance lookup\n        VirtualBalanceRewardPool rewardPool = new VirtualBalanceRewardPool(_mainRewards, _token, _rewardPoolOwner);\n        emit VirtualBalanceRewardPoolCreated(_mainRewards, address(rewardPool), _token);\n\n        address rAddress = address(rewardPool);\n        // add the new pool to main pool's list of extra rewards, assuming this factory has \"reward manager\" role\n        IRewards(_mainRewards).addExtraReward(rAddress);\n        return rAddress;\n    }\n}\n"
    },
    "contracts/BaseRewardPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n/**\n *Submitted for verification at Etherscan.io on 2020-07-17\n */\n\n/*\n   ____            __   __        __   _\n  / __/__ __ ___  / /_ / /  ___  / /_ (_)__ __\n _\\ \\ / // // _ \\/ __// _ \\/ -_)/ __// / \\ \\ /\n/___/ \\_, //_//_/\\__//_//_/\\__/ \\__//_/ /_\\_\\\n     /___/\n* Synthetix: BaseRewardPool.sol\n*\n* Docs: https://docs.synthetix.io/\n*\n*\n* MIT License\n*\n*\n* Copyright (c) 2020 Synthetix\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n*/\n\n/**\n *Submitted for verification at Etherscan.io on 2020-07-17\n */\n\n/*\n   ____            __   __        __   _\n  / __/__ __ ___  / /_ / /  ___  / /_ (_)__ __\n _\\ \\ / // // _ \\/ __// _ \\/ -_)/ __// / \\ \\ /\n/___/ \\_, //_//_/\\__//_//_/\\__/ \\__//_/ /_\\_\\\n     /___/\n* Synthetix: BaseRewardPool.sol\n*\n* Docs: https://docs.synthetix.io/\n*\n*\n* MIT License\n*\n*\n* Copyright (c) 2020 Synthetix\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n*/\n\nimport \"./utils/Interfaces.sol\";\nimport \"./utils/MathUtil.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\n/// @title Base Reward Pool contract\n/// @dev Rewards contract for Prime Pools is based on the convex contract\ncontract BaseRewardPool is IBaseRewardsPool {\n    using SafeERC20 for IERC20;\n    using MathUtil for uint256;\n\n    event RewardAdded(uint256 reward);\n    event Staked(address indexed user, uint256 amount);\n    event Withdrawn(address indexed user, uint256 amount);\n    event RewardPaid(address indexed user, uint256 reward);\n    event ExtraRewardsCleared();\n    event ExtraRewardCleared(address extraReward);\n\n    error Unauthorized();\n    error InvalidAmount();\n\n    uint256 public constant DURATION = 7 days;\n    uint256 public constant NEW_REWARD_RATIO = 830;\n\n    // Rewards token is Bal\n    IERC20 public immutable rewardToken;\n    IERC20 public immutable stakingToken;\n\n    // Operator is Controller smart contract\n    address public immutable operator;\n    address public immutable rewardManager;\n\n    uint256 public pid;\n    uint256 public periodFinish;\n    uint256 public rewardRate;\n    uint256 public lastUpdateTime;\n    uint256 public rewardPerTokenStored;\n    uint256 public queuedRewards;\n    uint256 public currentRewards;\n    uint256 public historicalRewards;\n    uint256 private _totalSupply;\n\n    mapping(address => uint256) public userRewardPerTokenPaid;\n    mapping(address => uint256) public rewards;\n    mapping(address => uint256) private _balances;\n\n    address[] public extraRewards;\n\n    constructor(\n        uint256 pid_,\n        address stakingToken_,\n        address rewardToken_,\n        address operator_,\n        address rewardManager_\n    ) {\n        pid = pid_;\n        stakingToken = IERC20(stakingToken_);\n        rewardToken = IERC20(rewardToken_);\n        operator = operator_;\n        rewardManager = rewardManager_;\n    }\n\n    modifier updateReward(address account) {\n        rewardPerTokenStored = rewardPerToken();\n        lastUpdateTime = lastTimeRewardApplicable();\n        if (account != address(0)) {\n            rewards[account] = earned(account);\n            userRewardPerTokenPaid[account] = rewardPerTokenStored;\n        }\n        _;\n    }\n\n    modifier onlyAddress(address authorizedAddress) {\n        if (msg.sender != authorizedAddress) {\n            revert Unauthorized();\n        }\n        _;\n    }\n\n    /// @notice Returns total supply\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    /// @notice Get the specified address' balance\n    /// @param account The address of the token holder\n    /// @return The `account`'s balance\n    function balanceOf(address account) public view returns (uint256) {\n        return _balances[account];\n    }\n\n    /// @notice Returns number of extra rewards\n    function extraRewardsLength() external view returns (uint256) {\n        return extraRewards.length;\n    }\n\n    /// @notice Adds an extra reward\n    /// @dev only `rewardManager` can add extra rewards\n    /// @param _reward token address of the reward\n    function addExtraReward(address _reward) external onlyAddress(rewardManager) {\n        require(_reward != address(0), \"!reward setting\");\n        extraRewards.push(_reward);\n    }\n\n    /// @notice Clears extra rewards\n    /// @dev Only Prime multising has the ability to do this\n    /// if you want to remove only one token, use `clearExtraReward`\n    function clearExtraRewards() external onlyAddress(IController(operator).owner()) {\n        delete extraRewards;\n        emit ExtraRewardsCleared();\n    }\n\n    /// @notice Clears extra reward by index\n    /// @param index index of the extra reward to clear\n    function clearExtraReward(uint256 index) external onlyAddress(IController(operator).owner()) {\n        address extraReward = extraRewards[index];\n        // Move the last element into the place to delete\n        extraRewards[index] = extraRewards[extraRewards.length - 1];\n        // Remove the last element\n        extraRewards.pop();\n        emit ExtraRewardCleared(extraReward);\n    }\n\n    /// @notice Returns last time reward applicable\n    /// @return The lower value of current block.timestamp or last time reward applicable\n    function lastTimeRewardApplicable() public view returns (uint256) {\n        // solhint-disable-next-line\n        return MathUtil.min(block.timestamp, periodFinish);\n    }\n\n    /// @notice Returns rewards per token staked\n    /// @return The rewards per token staked\n    function rewardPerToken() public view returns (uint256) {\n        uint256 totalSupplyMemory = totalSupply();\n        if (totalSupplyMemory == 0) {\n            return rewardPerTokenStored;\n        }\n        return\n            rewardPerTokenStored +\n            (((lastTimeRewardApplicable() - lastUpdateTime) * rewardRate * 1e18) / totalSupplyMemory);\n    }\n\n    /// @notice Returns the `account`'s earned rewards\n    /// @param account The address of the token holder\n    /// @return The `account`'s earned rewards\n    function earned(address account) public view returns (uint256) {\n        return (balanceOf(account) * (rewardPerToken() - userRewardPerTokenPaid[account])) / 1e18 + rewards[account];\n    }\n\n    /// @notice Stakes `amount` tokens\n    /// @param _amount The amount of tokens user wants to stake\n    function stake(uint256 _amount) public {\n        stakeFor(msg.sender, _amount);\n    }\n\n    /// @notice Stakes all BAL tokens\n    function stakeAll() external {\n        uint256 balance = stakingToken.balanceOf(msg.sender);\n        stake(balance);\n    }\n\n    /// @notice Stakes `amount` tokens for `_for`\n    /// @param _for Who are we staking for\n    /// @param _amount The amount of tokens user wants to stake\n    function stakeFor(address _for, uint256 _amount) public updateReward(_for) {\n        if (_amount < 1) {\n            revert InvalidAmount();\n        }\n\n        stakeToExtraRewards(_for, _amount);\n\n        _totalSupply = _totalSupply + (_amount);\n        // update _for balances\n        _balances[_for] = _balances[_for] + (_amount);\n        // take away from sender\n        stakingToken.transferFrom(msg.sender, address(this), _amount);\n        emit Staked(_for, _amount);\n    }\n\n    /// @notice Withdraw `amount` tokens and possibly unwrap\n    /// @param _amount The amount of tokens that the user wants to withdraw\n    /// @param _claim Whether or not the user wants to claim their rewards\n    /// @param _unwrap Whether or not the user wants to unwrap to BLP tokens\n    function withdraw(\n        uint256 _amount,\n        bool _claim,\n        bool _unwrap\n    ) public updateReward(msg.sender) {\n        if (_amount < 1) {\n            revert InvalidAmount();\n        }\n\n        // withdraw from linked rewards\n        withdrawExtraRewards(msg.sender, _amount);\n\n        _totalSupply = _totalSupply - (_amount);\n        _balances[msg.sender] = _balances[msg.sender] - (_amount);\n\n        if (_unwrap) {\n            IController(operator).withdrawTo(pid, _amount, msg.sender);\n        } else {\n            // return staked tokens to sender\n            stakingToken.transfer(msg.sender, _amount);\n        }\n        emit Withdrawn(msg.sender, _amount);\n\n        // claim staking rewards\n        if (_claim) {\n            getReward(msg.sender, true);\n        }\n    }\n\n    /// @notice Withdraw all tokens\n    /// @param _claim Whether or not the user wants to claim their rewards\n    function withdrawAll(bool _claim) external {\n        withdraw(_balances[msg.sender], _claim, false);\n    }\n\n    /// @notice Withdraw all tokens and unwrap\n    /// @param _claim Whether or not the user wants to claim their rewards\n    function withdrawAllAndUnwrap(bool _claim) external {\n        withdraw(_balances[msg.sender], _claim, true);\n    }\n\n    /// @notice Claims Rewards for `_account`\n    /// @param _account The account to claim rewards for\n    /// @param _claimExtras Whether or not the user wants to claim extra rewards\n    function getReward(address _account, bool _claimExtras) public updateReward(_account) {\n        uint256 reward = rewards[_account];\n        if (reward > 0) {\n            rewards[_account] = 0;\n            rewardToken.safeTransfer(_account, reward);\n            emit RewardPaid(_account, reward);\n        }\n\n        // also get rewards from linked rewards\n        if (_claimExtras) {\n            address[] memory extraRewardsMemory = extraRewards;\n            for (uint256 i = 0; i < extraRewardsMemory.length; i = i.unsafeInc()) {\n                IRewards(extraRewardsMemory[i]).getReward(_account);\n            }\n        }\n    }\n\n    /// @notice Claims Reward for signer\n    function getReward() external {\n        getReward(msg.sender, true);\n    }\n\n    /// @notice Donates reward token to this contract\n    /// @param _amount The amount of tokens to donate\n    function donate(uint256 _amount) external {\n        IERC20(rewardToken).safeTransferFrom(msg.sender, address(this), _amount);\n        queuedRewards = queuedRewards + _amount;\n    }\n\n    /// @notice Queue new rewards\n    /// @dev Only the operator can queue new rewards\n    /// @param _rewards The amount of tokens to queue\n    function queueNewRewards(uint256 _rewards) external onlyAddress(operator) {\n        _rewards = _rewards + queuedRewards;\n\n        // solhint-disable-next-line\n        if (block.timestamp >= periodFinish) {\n            notifyRewardAmount(_rewards);\n            queuedRewards = 0;\n            return;\n        }\n\n        // solhint-disable-next-line\n        uint256 elapsedTime = block.timestamp - (periodFinish - DURATION);\n        uint256 currentAtNow = rewardRate * elapsedTime;\n        uint256 queuedRatio = (currentAtNow * 1000) / _rewards;\n\n        if (queuedRatio < NEW_REWARD_RATIO) {\n            notifyRewardAmount(_rewards);\n            queuedRewards = 0;\n        } else {\n            queuedRewards = _rewards;\n        }\n    }\n\n    /// @dev Stakes `amount` tokens for address `for` to extra rewards tokens\n    /// RewardManager `rewardManager` is responsible for adding reward tokens\n    /// @param _for Who are we staking for\n    /// @param _amount The amount of tokens user wants to stake\n    function stakeToExtraRewards(address _for, uint256 _amount) internal {\n        address[] memory extraRewardsMemory = extraRewards;\n        for (uint256 i = 0; i < extraRewardsMemory.length; i = i.unsafeInc()) {\n            IRewards(extraRewardsMemory[i]).stake(_for, _amount);\n        }\n    }\n\n    /// @dev Stakes `amount` tokens for address `for` to extra rewards tokens\n    /// RewardManager `rewardManager` is responsible for adding reward tokens\n    /// @param _for Who are we staking for\n    /// @param _amount The amount of tokens user wants to stake\n    function withdrawExtraRewards(address _for, uint256 _amount) internal {\n        address[] memory extraRewardsMemory = extraRewards;\n        for (uint256 i = 0; i < extraRewardsMemory.length; i = i.unsafeInc()) {\n            IRewards(extraRewardsMemory[i]).withdraw(_for, _amount);\n        }\n    }\n\n    function notifyRewardAmount(uint256 reward) internal updateReward(address(0)) {\n        historicalRewards = historicalRewards + reward;\n        // solhint-disable-next-line\n        if (block.timestamp >= periodFinish) {\n            rewardRate = reward / DURATION;\n        } else {\n            // solhint-disable-next-line\n            uint256 remaining = periodFinish - block.timestamp;\n            uint256 leftover = remaining * rewardRate;\n            reward = reward + leftover;\n            rewardRate = reward / DURATION;\n        }\n        currentRewards = reward;\n        // solhint-disable-next-line\n        lastUpdateTime = block.timestamp;\n        // solhint-disable-next-line\n        periodFinish = block.timestamp + DURATION;\n        emit RewardAdded(reward);\n    }\n}\n"
    },
    "contracts/factories/ProxyFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\nimport \"../utils/Interfaces.sol\";\n\n/// @title ProxyFactory contract\ncontract ProxyFactory is IProxyFactory {\n    /// @notice Creates a new contract based on the target contract address provided\n    /// @param target contract address to be cloned\n    /// @return result address of the new contract\n    function clone(address target) external returns (address result) {\n        bytes20 targetBytes = bytes20(target);\n        // solhint-disable-next-line\n        assembly {\n            let clone := mload(0x40)\n            mstore(clone, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n            mstore(add(clone, 0x14), targetBytes)\n            mstore(add(clone, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\n            result := create(0, clone, 0x37)\n        }\n    }\n}\n"
    },
    "contracts/ExtraRewardStash.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"./utils/Interfaces.sol\";\nimport \"./utils/MathUtil.sol\";\n\n/// @title ExtraRewardStash\ncontract ExtraRewardStash is IStash {\n    using SafeERC20 for IERC20;\n    using MathUtil for uint256;\n\n    error Unauthorized();\n    error AlreadyInitialized();\n\n    event RewardHookSet(address newRewardHook);\n    event ExtraRewardsCleared();\n    event ExtraRewardCleared(address extraReward);\n\n    uint256 private constant MAX_REWARDS = 8;\n    address public immutable bal;\n\n    uint256 public pid;\n    address public operator;\n    address public gauge;\n    address public rewardFactory;\n    address public rewardHook; // address to call for reward pulls\n    bool public hasBalRewards;\n\n    mapping(address => uint256) public historicalRewards;\n\n    struct TokenInfo {\n        address token;\n        address rewardAddress;\n    }\n\n    // use mapping + array so that we dont have to loop check each time setToken is called\n    mapping(address => TokenInfo) public tokenInfo;\n    address[] public tokenList;\n\n    constructor(address _bal) {\n        bal = _bal;\n    }\n\n    function initialize(\n        uint256 _pid,\n        address _operator,\n        address _gauge,\n        address _rFactory\n    ) external {\n        if (gauge != address(0)) {\n            revert AlreadyInitialized();\n        }\n        pid = _pid;\n        operator = _operator;\n        gauge = _gauge;\n        rewardFactory = _rFactory;\n    }\n\n    modifier onlyAddress(address authorizedAddress) {\n        if (msg.sender != authorizedAddress) {\n            revert Unauthorized();\n        }\n        _;\n    }\n\n    /// @notice Returns the length of the tokenList\n    function tokenCount() external view returns (uint256) {\n        return tokenList.length;\n    }\n\n    /// @notice Claims registered reward tokens\n    function claimRewards() external onlyAddress(operator) {\n        // this is updateable from v2 gauges now so must check each time.\n        checkForNewRewardTokens();\n\n        if (hasBalRewards) {\n            // claim rewards on gauge for staker\n            // using reward_receiver so all rewards will be moved to this stash\n            IController(operator).claimRewards(pid, gauge);\n        }\n\n        // hook for reward pulls\n        if (rewardHook != address(0)) {\n            // solhint-disable-next-line\n            try IRewardHook(rewardHook).onRewardClaim() {} catch {}\n        }\n    }\n\n    /// @notice Clears extra rewards\n    /// @dev Only Prime multising has the ability to do this\n    /// if you want to remove only one token, use `clearExtraReward`\n    function clearExtraRewards() external onlyAddress(IController(operator).owner()) {\n        address[] memory tokenListMemory = tokenList;\n\n        for (uint256 i = 0; i < tokenListMemory.length; i = i.unsafeInc()) {\n            delete tokenInfo[tokenListMemory[i]];\n        }\n\n        delete tokenList;\n        emit ExtraRewardsCleared();\n    }\n\n    /// @notice Clears extra reward by index\n    /// @param index index of the extra reward to clear\n    function clearExtraReward(uint256 index) external onlyAddress(IController(operator).owner()) {\n        address extraReward = tokenList[index];\n        // Move the last element into the place to delete\n        tokenList[index] = tokenList[tokenList.length - 1];\n        // Remove the last element\n        tokenList.pop();\n        delete tokenInfo[extraReward];\n        emit ExtraRewardCleared(extraReward);\n    }\n\n    /// @notice Checks if the gauge rewards have changed\n    function checkForNewRewardTokens() internal {\n        for (uint256 i = 0; i < MAX_REWARDS; i = i.unsafeInc()) {\n            address token = IBalGauge(gauge).reward_tokens(i);\n            if (token == address(0)) {\n                break;\n            }\n            if (!hasBalRewards) {\n                hasBalRewards = true;\n            }\n            setToken(token);\n        }\n    }\n\n    /// @notice Registers an extra reward token to be handled\n    /// @param _token The reward token address\n    /// @dev Used for any new incentive that is not directly on balancer gauges\n    function setExtraReward(address _token) external onlyAddress(IController(operator).owner()) {\n        setToken(_token);\n    }\n\n    /// @notice Sets the reward hook address\n    /// @param _hook The address of the reward hook\n    function setRewardHook(address _hook) external onlyAddress(IController(operator).owner()) {\n        rewardHook = _hook;\n        emit RewardHookSet(_hook);\n    }\n\n    /// @notice Replaces a token on the token list\n    /// @param _token The address of the token\n    function setToken(address _token) internal {\n        TokenInfo storage t = tokenInfo[_token];\n\n        if (t.token == address(0)) {\n            //set token address\n            t.token = _token;\n\n            //check if BAL\n            if (_token != bal) {\n                //create new reward contract (for NON-BAL tokens only)\n                (, , , address mainRewardContract, , ) = IController(operator).poolInfo(pid);\n                address rewardContract = IRewardFactory(rewardFactory).createTokenRewards(\n                    _token,\n                    mainRewardContract,\n                    address(this)\n                );\n\n                t.rewardAddress = rewardContract;\n            }\n            //add token to list of known rewards\n            tokenList.push(_token);\n        }\n    }\n\n    /// @notice Sends all of the extra rewards to the reward contracts\n    function processStash() external onlyAddress(operator) {\n        uint256 tCount = tokenList.length;\n        for (uint256 i = 0; i < tCount; i++) {\n            TokenInfo storage t = tokenInfo[tokenList[i]];\n            address token = t.token;\n            if (token == address(0)) continue;\n\n            uint256 amount = IERC20(token).balanceOf(address(this));\n            if (amount > 0) {\n                historicalRewards[token] = historicalRewards[token] + amount;\n                if (token == bal) {\n                    //if BAL, send back to booster to distribute\n                    IERC20(token).safeTransfer(operator, amount);\n                    continue;\n                }\n                //add to reward contract\n                address rewards = t.rewardAddress;\n                IERC20(token).safeTransfer(rewards, amount);\n                IRewards(rewards).queueNewRewards(amount);\n            }\n        }\n    }\n}\n"
    },
    "contracts/Controller.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\nimport \"./utils/Interfaces.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"./utils/MathUtil.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\n/// @title Controller contract\n/// @dev Controller contract for Prime Pools is based on the convex Booster.sol contract\ncontract Controller is IController {\n    using SafeERC20 for IERC20;\n    using MathUtil for uint256;\n\n    event OwnerChanged(address _newOwner);\n    event FeeManagerChanged(address _newFeeManager);\n    event PoolManagerChanged(address _newPoolManager);\n    event TreasuryChanged(address _newTreasury);\n    event VoteDelegateChanged(address _newVoteDelegate);\n    event FeesChanged(uint256 _newPlatformFee, uint256 _newProfitFee);\n    event PoolShutDown(uint256 _pid);\n    event FeeTokensCleared();\n    event AddedPool(\n        uint256 _pid,\n        address _lpToken,\n        address _token,\n        address _gauge,\n        address _baseRewardsPool,\n        address _stash\n    );\n    event Deposited(address _user, uint256 _pid, uint256 _amount, bool _stake);\n    event Withdrawn(address _user, uint256 _pid, uint256 _amount);\n    event SystemShutdown();\n\n    error Unauthorized();\n    error Shutdown();\n    error PoolIsClosed();\n    error InvalidParameters();\n    error InvalidStash();\n    error RedirectFailed();\n\n    uint256 public constant MAX_FEES = 3000;\n    uint256 public constant FEE_DENOMINATOR = 10000;\n    uint256 public constant MAX_LOCK_TIME = 365 days; // 1 year is the time for the new deposided tokens to be locked until they can be withdrawn\n\n    address public immutable bal;\n    address public immutable staker;\n    address public immutable feeDistro; // Balancer FeeDistributor\n\n    uint256 public profitFees = 250; //2.5% // FEE_DENOMINATOR/100*2.5\n    uint256 public platformFees = 1000; //10% //possible fee to build treasury\n\n    address public owner;\n    address public feeManager;\n    address public poolManager;\n    address public rewardFactory;\n    address public stashFactory;\n    address public tokenFactory;\n    address public voteDelegate;\n    address public treasury;\n    address public lockRewards;\n\n    // Balancer supports rewards in multiple fee tokens\n    IERC20[] public feeTokens;\n    // Fee token to VirtualBalanceReward pool mapping\n    mapping(address => address) public feeTokenToPool;\n\n    bool public isShutdown;\n    bool public canClaim;\n\n    struct PoolInfo {\n        address lptoken;\n        address token;\n        address gauge;\n        address balRewards;\n        address stash;\n        bool shutdown;\n    }\n\n    //index(pid) -> pool\n    PoolInfo[] public poolInfo;\n    mapping(address => bool) public gaugeMap;\n\n    constructor(\n        address _staker,\n        address _bal,\n        address _feeDistro\n    ) {\n        bal = _bal;\n        feeDistro = _feeDistro;\n        staker = _staker;\n        owner = msg.sender;\n        voteDelegate = msg.sender;\n        feeManager = msg.sender;\n        poolManager = msg.sender;\n    }\n\n    modifier onlyAddress(address authorizedAddress) {\n        if (msg.sender != authorizedAddress) {\n            revert Unauthorized();\n        }\n        _;\n    }\n\n    modifier isNotShutDown() {\n        if (isShutdown) {\n            revert Shutdown();\n        }\n        _;\n    }\n\n    /// SETTER SECTION ///\n\n    /// @notice sets the owner variable\n    /// @param _owner The address of the owner of the contract\n    function setOwner(address _owner) external onlyAddress(owner) {\n        owner = _owner;\n        emit OwnerChanged(_owner);\n    }\n\n    /// @notice sets the feeManager variable\n    /// @param _feeM The address of the fee manager\n    function setFeeManager(address _feeM) external onlyAddress(feeManager) {\n        feeManager = _feeM;\n        emit FeeManagerChanged(_feeM);\n    }\n\n    /// @notice sets the poolManager variable\n    /// @param _poolM The address of the pool manager\n    function setPoolManager(address _poolM) external onlyAddress(poolManager) {\n        poolManager = _poolM;\n        emit PoolManagerChanged(_poolM);\n    }\n\n    /// @notice sets the reward, token, and stash factory addresses\n    /// @param _rfactory The address of the reward factory\n    /// @param _sfactory The address of the stash factory\n    /// @param _tfactory The address of the token factory\n    function setFactories(\n        address _rfactory,\n        address _sfactory,\n        address _tfactory\n    ) external onlyAddress(owner) {\n        //reward factory only allow this to be called once even if owner\n        //removes ability to inject malicious staking contracts\n        //token factory can also be immutable\n        if (rewardFactory == address(0)) {\n            rewardFactory = _rfactory;\n            tokenFactory = _tfactory;\n        }\n\n        //stash factory should be considered more safe to change\n        //updating may be required to handle new types of gauges\n        stashFactory = _sfactory;\n    }\n\n    /// @notice sets the voteDelegate variable\n    /// @param _voteDelegate The address of whom votes will be delegated to\n    function setVoteDelegate(address _voteDelegate) external onlyAddress(voteDelegate) {\n        voteDelegate = _voteDelegate;\n        emit VoteDelegateChanged(_voteDelegate);\n    }\n\n    /// @notice sets the lockRewards variable\n    /// @param _rewards The address of the rewards contract\n    function setRewardContracts(address _rewards) external onlyAddress(owner) {\n        if (lockRewards == address(0)) {\n            lockRewards = _rewards;\n        }\n    }\n\n    /// @notice sets the address of the feeToken\n    /// @param _feeToken feeToken\n    function addFeeToken(IERC20 _feeToken) external onlyAddress(feeManager) {\n        feeTokens.push(_feeToken);\n        // If fee token is BAL forward rewards to BaseRewardPool\n        if (address(_feeToken) == bal) {\n            feeTokenToPool[address(_feeToken)] = lockRewards;\n            return;\n        }\n        // Create VirtualBalanceRewardPool and forward rewards there for other tokens\n        address virtualBalanceRewardPool = IRewardFactory(rewardFactory).createTokenRewards(\n            address(_feeToken),\n            lockRewards,\n            address(this)\n        );\n        feeTokenToPool[address(_feeToken)] = virtualBalanceRewardPool;\n    }\n\n    /// @notice Clears fee tokens\n    function clearFeeTokens() external onlyAddress(feeManager) {\n        delete feeTokens;\n        emit FeeTokensCleared();\n    }\n\n    /// @notice sets the lock, staker, caller, platform fees and profit fees\n    /// @param _profitFee The amount to set for the profit fees\n    /// @param _platformFee The amount to set for the platform fees\n    function setFees(uint256 _platformFee, uint256 _profitFee) external onlyAddress(feeManager) {\n        uint256 total = _profitFee + _platformFee;\n        if (total > MAX_FEES) {\n            revert InvalidParameters();\n        }\n\n        //values must be within certain ranges\n        if (\n            _platformFee >= 500 && //5%\n            _platformFee <= 2000 && //20%\n            _profitFee >= 100 && //1%\n            _profitFee <= 1000 //10%\n        ) {\n            platformFees = _platformFee;\n            profitFees = _profitFee;\n            emit FeesChanged(_platformFee, _profitFee);\n        }\n    }\n\n    /// @notice sets the contracts treasury variables\n    /// @param _treasury The address of the treasury contract\n    function setTreasury(address _treasury) external onlyAddress(feeManager) {\n        treasury = _treasury;\n        emit TreasuryChanged(_treasury);\n    }\n\n    /// END SETTER SECTION ///\n\n    /// @inheritdoc IController\n    function poolLength() external view returns (uint256) {\n        return poolInfo.length;\n    }\n\n    function feeTokensLength() external view returns (uint256) {\n        return feeTokens.length;\n    }\n\n    /// @notice creates a new pool\n    /// @param _lptoken The address of the lp token\n    /// @param _gauge The address of the gauge controller\n    function addPool(address _lptoken, address _gauge) external onlyAddress(poolManager) isNotShutDown {\n        if (_gauge == address(0) || _lptoken == address(0) || gaugeMap[_gauge]) {\n            revert InvalidParameters();\n        }\n        //the next pool's pid\n        uint256 pid = poolInfo.length;\n        //create a tokenized deposit\n        address token = ITokenFactory(tokenFactory).createDepositToken(_lptoken);\n        //create a reward contract for bal rewards\n        address newRewardPool = IRewardFactory(rewardFactory).createBalRewards(pid, token);\n        //create a stash to handle extra incentives\n        address stash = IStashFactory(stashFactory).createStash(pid, _gauge);\n\n        if (stash == address(0)) {\n            revert InvalidStash();\n        }\n\n        //add the new pool\n        poolInfo.push(\n            PoolInfo({\n                lptoken: _lptoken,\n                token: token,\n                gauge: _gauge,\n                balRewards: newRewardPool,\n                stash: stash,\n                shutdown: false\n            })\n        );\n        gaugeMap[_gauge] = true;\n        // give stashes access to RewardFactory and VoterProxy\n        // VoterProxy so that it can grab the incentive tokens off the contract after claiming rewards\n        // RewardFactory so that stashes can make new extra reward contracts if a new incentive is added to the gauge\n        poolInfo[pid].stash = stash;\n        IRewardFactory(rewardFactory).grantRewardStashAccess(stash);\n        redirectGaugeRewards(stash, _gauge);\n        emit AddedPool(pid, _lptoken, token, _gauge, newRewardPool, stash);\n    }\n\n    /// @notice Shuts down multiple pools\n    /// @dev Claims rewards for that pool before shutting it down\n    /// @param _startPoolIdx Start pool index\n    /// @param _endPoolIdx End pool index (excluded)\n    function bulkPoolShutdown(uint256 _startPoolIdx, uint256 _endPoolIdx) external onlyAddress(poolManager) {\n        for (uint256 i = _startPoolIdx; i < _endPoolIdx; i = i.unsafeInc()) {\n            PoolInfo storage pool = poolInfo[i];\n\n            if (pool.shutdown) {\n                continue;\n            }\n\n            _earmarkRewards(i);\n\n            //withdraw from gauge\n            // solhint-disable-next-line\n            try IVoterProxy(staker).withdrawAll(pool.lptoken, pool.gauge) {\n                // solhint-disable-next-line\n            } catch {}\n\n            pool.shutdown = true;\n            gaugeMap[pool.gauge] = false;\n            emit PoolShutDown(i);\n        }\n    }\n\n    /// @notice shuts down all pools\n    /// @dev This shuts down the contract\n    function shutdownSystem() external onlyAddress(owner) {\n        isShutdown = true;\n        emit SystemShutdown();\n    }\n\n    /// @inheritdoc IController\n    function deposit(\n        uint256 _pid,\n        uint256 _amount,\n        bool _stake\n    ) public isNotShutDown {\n        PoolInfo storage pool = poolInfo[_pid];\n        if (pool.shutdown) {\n            revert PoolIsClosed();\n        }\n        //send to proxy to stake\n        address lptoken = pool.lptoken;\n        IERC20(lptoken).transferFrom(msg.sender, staker, _amount);\n\n        //stake\n        address gauge = pool.gauge;\n        IVoterProxy(staker).deposit(lptoken, gauge); // VoterProxy\n\n        address token = pool.token; //D2DPool token\n        if (_stake) {\n            //mint here and send to rewards on user behalf\n            ITokenMinter(token).mint(address(this), _amount);\n            address rewardContract = pool.balRewards;\n            IERC20(token).approve(rewardContract, _amount);\n            IRewards(rewardContract).stakeFor(msg.sender, _amount);\n        } else {\n            //add user balance directly\n            ITokenMinter(token).mint(msg.sender, _amount);\n        }\n\n        emit Deposited(msg.sender, _pid, _amount, _stake);\n    }\n\n    /// @inheritdoc IController\n    function depositAll(uint256 _pid, bool _stake) external {\n        address lptoken = poolInfo[_pid].lptoken;\n        uint256 balance = IERC20(lptoken).balanceOf(msg.sender);\n        deposit(_pid, balance, _stake);\n    }\n\n    /// @notice internal function that withdraws lp tokens from the pool\n    /// @param _pid The pool id to withdraw the tokens from\n    /// @param _amount amount of LP tokens to withdraw\n    /// @param _from address of where the lp tokens will be withdrawn from\n    /// @param _to address of where the lp tokens will be sent to\n    function _withdraw(\n        uint256 _pid,\n        uint256 _amount,\n        address _from,\n        address _to\n    ) internal {\n        PoolInfo storage pool = poolInfo[_pid];\n        address lptoken = pool.lptoken;\n        address gauge = pool.gauge;\n\n        //remove lp balance\n        address token = pool.token;\n        ITokenMinter(token).burn(_from, _amount);\n\n        //pull from gauge if not shutdown\n        // if shutdown tokens will be in this contract\n        if (!pool.shutdown) {\n            IVoterProxy(staker).withdraw(lptoken, gauge, _amount);\n        }\n        //return lp tokens\n        IERC20(lptoken).transfer(_to, _amount);\n\n        emit Withdrawn(_to, _pid, _amount);\n    }\n\n    /// @inheritdoc IController\n    function withdraw(uint256 _pid, uint256 _amount) public {\n        _withdraw(_pid, _amount, msg.sender, msg.sender);\n    }\n\n    /// @inheritdoc IController\n    function withdrawAll(uint256 _pid) public {\n        address token = poolInfo[_pid].token;\n        uint256 userBal = IERC20(token).balanceOf(msg.sender);\n        withdraw(_pid, userBal);\n    }\n\n    /// @inheritdoc IController\n    function withdrawTo(\n        uint256 _pid,\n        uint256 _amount,\n        address _to\n    ) external {\n        address rewardContract = poolInfo[_pid].balRewards;\n        if (msg.sender != rewardContract) {\n            revert Unauthorized();\n        }\n        _withdraw(_pid, _amount, msg.sender, _to);\n    }\n\n    /// @inheritdoc IController\n    function withdrawUnlockedWethBal() external onlyAddress(owner) {\n        canClaim = true;\n        IVoterProxy(staker).withdrawWethBal(address(this));\n    }\n\n    /// @inheritdoc IController\n    function redeemWethBal() external {\n        require(canClaim);\n        IBalDepositor balDepositor = IBalDepositor(IVoterProxy(staker).depositor());\n        uint256 balance = IERC20(balDepositor.d2dBal()).balanceOf(msg.sender);\n        balDepositor.burnD2DBal(msg.sender, balance);\n        IERC20(balDepositor.wethBal()).safeTransfer(msg.sender, balance);\n    }\n\n    /// @notice Delegates voting power from VoterProxy\n    /// @param _delegateTo to whom we delegate voting power\n    function delegateVotingPower(address _delegateTo) external onlyAddress(owner) {\n        IVoterProxy(staker).delegateVotingPower(_delegateTo);\n    }\n\n    /// @notice Clears delegation of voting power from EOA for VoterProxy\n    function clearDelegation() external onlyAddress(owner) {\n        IVoterProxy(staker).clearDelegate();\n    }\n\n    /// @notice Votes for multiple gauges\n    /// @param _gauges array of gauge addresses\n    /// @param _weights array of vote weights\n    function voteGaugeWeight(address[] calldata _gauges, uint256[] calldata _weights)\n        external\n        onlyAddress(voteDelegate)\n    {\n        IVoterProxy(staker).voteMultipleGauges(_gauges, _weights);\n    }\n\n    /// @notice claims rewards from a specific pool\n    /// @param _pid the id of the pool\n    /// @param _gauge address of the gauge\n    function claimRewards(uint256 _pid, address _gauge) external {\n        address stash = poolInfo[_pid].stash;\n        if (msg.sender != stash) {\n            revert Unauthorized();\n        }\n        IVoterProxy(staker).claimRewards(_gauge);\n    }\n\n    /// @notice internal function that claims rewards from a pool and disperses them to the rewards contract\n    /// @param _pid the id of the pool where lp tokens are held\n    function _earmarkRewards(uint256 _pid) internal {\n        PoolInfo storage pool = poolInfo[_pid];\n        if (pool.shutdown) {\n            revert PoolIsClosed();\n        }\n        address gauge = pool.gauge;\n\n        //claim bal\n        IVoterProxy(staker).claimBal(gauge);\n\n        //check if there are extra rewards\n        address stash = pool.stash;\n        if (stash != address(0)) {\n            //claim extra rewards\n            IStash(stash).claimRewards();\n            //process extra rewards\n            IStash(stash).processStash();\n        }\n\n        //bal balance\n        uint256 balBal = IERC20(bal).balanceOf(address(this));\n\n        if (balBal > 0) {\n            //Profit fees are taken on the rewards together with platform fees.\n            uint256 _profit = (balBal * profitFees) / FEE_DENOMINATOR;\n            //profit fees are distributed to the gnosisSafe, which owned by Prime; which is here feeManager\n            IERC20(bal).transfer(feeManager, _profit);\n\n            //send treasury\n            if (treasury != address(0) && treasury != address(this) && platformFees > 0) {\n                //only subtract after address condition check\n                uint256 _platform = (balBal * platformFees) / FEE_DENOMINATOR;\n                balBal = balBal - _platform;\n                IERC20(bal).transfer(treasury, _platform);\n            }\n            balBal = balBal - _profit;\n\n            //send bal to lp provider reward contract\n            address rewardContract = pool.balRewards;\n            IERC20(bal).transfer(rewardContract, balBal);\n            IRewards(rewardContract).queueNewRewards(balBal);\n        }\n    }\n\n    /// @inheritdoc IController\n    function earmarkRewards(uint256 _pid) external {\n        _earmarkRewards(_pid);\n    }\n\n    /// @inheritdoc IController\n    function earmarkFees() external {\n        IERC20[] memory feeTokensMemory = feeTokens;\n        // Claim fee rewards from fee distro\n        IVoterProxy(staker).claimFees(feeDistro, feeTokensMemory);\n\n        // VoterProxy transfers rewards to this contract, and we need to distribute them to\n        // VirtualBalanceRewards contracts\n        for (uint256 i = 0; i < feeTokensMemory.length; i = i.unsafeInc()) {\n            IERC20 feeToken = feeTokensMemory[i];\n            uint256 balance = feeToken.balanceOf(address(this));\n            if (balance != 0) {\n                feeToken.safeTransfer(feeTokenToPool[address(feeToken)], balance);\n                IRewards(feeTokenToPool[address(feeToken)]).queueNewRewards(balance);\n            }\n        }\n    }\n\n    /// @notice redirects rewards from gauge to rewards contract\n    /// @param _stash stash address\n    /// @param _gauge gauge address\n    function redirectGaugeRewards(address _stash, address _gauge) private {\n        bytes memory data = abi.encodeWithSelector(bytes4(keccak256(\"set_rewards_receiver(address)\")), _stash);\n        (bool success, ) = IVoterProxy(staker).execute(_gauge, uint256(0), data);\n        if (!success) {\n            revert RedirectFailed();\n        }\n    }\n}\n"
    },
    "contracts/test/IVault.sol": {
      "content": "//from 0x5c6Ee304399DBdB9C8Ef030aB642B10820DB8F56\n\n// SPDX-License-Identifier: GPL-3.0-or-later\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma experimental ABIEncoderV2;\n\n// import \"../../lib/openzeppelin/IERC20.sol\";\n\n// import \"./IWETH.sol\";\n// import \"./IAsset.sol\";\n// import \"./IAuthorizer.sol\";\n// import \"./IFlashLoanRecipient.sol\";\n// import \"../ProtocolFeesCollector.sol\";\n\n// import \"../../lib/helpers/ISignaturesValidator.sol\";\n// import \"../../lib/helpers/ITemporarilyPausable.sol\";\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"./BalancerErrors.sol\";\n\n\npragma solidity 0.8.15;\n\n/**\n * @dev Interface for the SignatureValidator helper, used to support meta-transactions.\n */\ninterface ISignaturesValidator {\n    /**\n     * @dev Returns the EIP712 domain separator.\n     */\n    function getDomainSeparator() external view returns (bytes32);\n\n    /**\n     * @dev Returns the next nonce used by an address to sign messages.\n     */\n    function getNextNonce(address user) external view returns (uint256);\n}\n\ninterface IAuthorizer {\n    /**\n     * @dev Returns true if `account` can perform the action described by `actionId` in the contract `where`.\n     */\n    function canPerform(\n        bytes32 actionId,\n        address account,\n        address where\n    ) external view returns (bool);\n}\n\ninterface IAsset {\n    // solhint-disable-previous-line no-empty-blocks\n}\n\ninterface IFlashLoanRecipient {\n    /**\n     * @dev When `flashLoan` is called on the Vault, it invokes the `receiveFlashLoan` hook on the recipient.\n     *\n     * At the time of the call, the Vault will have transferred `amounts` for `tokens` to the recipient. Before this\n     * call returns, the recipient must have transferred `amounts` plus `feeAmounts` for each token back to the\n     * Vault, or else the entire flash loan will revert.\n     *\n     * `userData` is the same value passed in the `IVault.flashLoan` call.\n     */\n    function receiveFlashLoan(\n        IERC20[] memory tokens,\n        uint256[] memory amounts,\n        uint256[] memory feeAmounts,\n        bytes memory userData\n    ) external;\n}\n\ninterface IWETH is IERC20 {\n    function deposit() external payable;\n\n    function withdraw(uint256 amount) external;\n}\n\n\ninterface ITemporarilyPausable {\n    /**\n     * @dev Emitted every time the pause state changes by `_setPaused`.\n     */\n    event PausedStateChanged(bool paused);\n\n    /**\n     * @dev Returns the current paused state.\n     */\n    function getPausedState()\n        external\n        view\n        returns (\n            bool paused,\n            uint256 pauseWindowEndTime,\n            uint256 bufferPeriodEndTime\n        );\n}\n\n/**\n * @dev Full external interface for the Vault core contract - no external or public methods exist in the contract that\n * don't override one of these declarations.\n */\ninterface IVault is ISignaturesValidator, ITemporarilyPausable {\n    // Generalities about the Vault:\n    //\n    // - Whenever documentation refers to 'tokens', it strictly refers to ERC20-compliant token contracts. Tokens are\n    // transferred out of the Vault by calling the `IERC20.transfer` function, and transferred in by calling\n    // `IERC20.transferFrom`. In these cases, the sender must have previously allowed the Vault to use their tokens by\n    // calling `IERC20.approve`. The only deviation from the ERC20 standard that is supported is functions not returning\n    // a boolean value: in these scenarios, a non-reverting call is assumed to be successful.\n    //\n    // - All non-view functions in the Vault are non-reentrant: calling them while another one is mid-execution (e.g.\n    // while execution control is transferred to a token contract during a swap) will result in a revert. View\n    // functions can be called in a re-reentrant way, but doing so might cause them to return inconsistent results.\n    // Contracts calling view functions in the Vault must make sure the Vault has not already been entered.\n    //\n    // - View functions revert if referring to either unregistered Pools, or unregistered tokens for registered Pools.\n\n    // Authorizer\n    //\n    // Some system actions are permissioned, like setting and collecting protocol fees. This permissioning system exists\n    // outside of the Vault in the Authorizer contract: the Vault simply calls the Authorizer to check if the caller\n    // can perform a given action.\n\n    /**\n     * @dev Returns the Vault's Authorizer.\n     */\n    function getAuthorizer() external view returns (IAuthorizer);\n\n    /**\n     * @dev Sets a new Authorizer for the Vault. The caller must be allowed by the current Authorizer to do this.\n     *\n     * Emits an `AuthorizerChanged` event.\n     */\n    function setAuthorizer(IAuthorizer newAuthorizer) external;\n\n    /**\n     * @dev Emitted when a new authorizer is set by `setAuthorizer`.\n     */\n    event AuthorizerChanged(IAuthorizer indexed newAuthorizer);\n\n    // Relayers\n    //\n    // Additionally, it is possible for an account to perform certain actions on behalf of another one, using their\n    // Vault ERC20 allowance and Internal Balance. These accounts are said to be 'relayers' for these Vault functions,\n    // and are expected to be smart contracts with sound authentication mechanisms. For an account to be able to wield\n    // this power, two things must occur:\n    //  - The Authorizer must grant the account the permission to be a relayer for the relevant Vault function. This\n    //    means that Balancer governance must approve each individual contract to act as a relayer for the intended\n    //    functions.\n    //  - Each user must approve the relayer to act on their behalf.\n    // This double protection means users cannot be tricked into approving malicious relayers (because they will not\n    // have been allowed by the Authorizer via governance), nor can malicious relayers approved by a compromised\n    // Authorizer or governance drain user funds, since they would also need to be approved by each individual user.\n\n    /**\n     * @dev Returns true if `user` has approved `relayer` to act as a relayer for them.\n     */\n    function hasApprovedRelayer(address user, address relayer) external view returns (bool);\n\n    /**\n     * @dev Allows `relayer` to act as a relayer for `sender` if `approved` is true, and disallows it otherwise.\n     *\n     * Emits a `RelayerApprovalChanged` event.\n     */\n    function setRelayerApproval(\n        address sender,\n        address relayer,\n        bool approved\n    ) external;\n\n    /**\n     * @dev Emitted every time a relayer is approved or disapproved by `setRelayerApproval`.\n     */\n    event RelayerApprovalChanged(address indexed relayer, address indexed sender, bool approved);\n\n    // Internal Balance\n    //\n    // Users can deposit tokens into the Vault, where they are allocated to their Internal Balance, and later\n    // transferred or withdrawn. It can also be used as a source of tokens when joining Pools, as a destination\n    // when exiting them, and as either when performing swaps. This usage of Internal Balance results in greatly reduced\n    // gas costs when compared to relying on plain ERC20 transfers, leading to large savings for frequent users.\n    //\n    // Internal Balance management features batching, which means a single contract call can be used to perform multiple\n    // operations of different kinds, with different senders and recipients, at once.\n\n    /**\n     * @dev Returns `user`'s Internal Balance for a set of tokens.\n     */\n    function getInternalBalance(address user, IERC20[] memory tokens) external view returns (uint256[] memory);\n\n    /**\n     * @dev Performs a set of user balance operations, which involve Internal Balance (deposit, withdraw or transfer)\n     * and plain ERC20 transfers using the Vault's allowance. This last feature is particularly useful for relayers, as\n     * it lets integrators reuse a user's Vault allowance.\n     *\n     * For each operation, if the caller is not `sender`, it must be an authorized relayer for them.\n     */\n    function manageUserBalance(UserBalanceOp[] memory ops) external payable;\n\n    /**\n     * @dev Data for `manageUserBalance` operations, which include the possibility for ETH to be sent and received\n     without manual WETH wrapping or unwrapping.\n     */\n    struct UserBalanceOp {\n        UserBalanceOpKind kind;\n        IAsset asset;\n        uint256 amount;\n        address sender;\n        address payable recipient;\n    }\n\n    // There are four possible operations in `manageUserBalance`:\n    //\n    // - DEPOSIT_INTERNAL\n    // Increases the Internal Balance of the `recipient` account by transferring tokens from the corresponding\n    // `sender`. The sender must have allowed the Vault to use their tokens via `IERC20.approve()`.\n    //\n    // ETH can be used by passing the ETH sentinel value as the asset and forwarding ETH in the call: it will be wrapped\n    // and deposited as WETH. Any ETH amount remaining will be sent back to the caller (not the sender, which is\n    // relevant for relayers).\n    //\n    // Emits an `InternalBalanceChanged` event.\n    //\n    //\n    // - WITHDRAW_INTERNAL\n    // Decreases the Internal Balance of the `sender` account by transferring tokens to the `recipient`.\n    //\n    // ETH can be used by passing the ETH sentinel value as the asset. This will deduct WETH instead, unwrap it and send\n    // it to the recipient as ETH.\n    //\n    // Emits an `InternalBalanceChanged` event.\n    //\n    //\n    // - TRANSFER_INTERNAL\n    // Transfers tokens from the Internal Balance of the `sender` account to the Internal Balance of `recipient`.\n    //\n    // Reverts if the ETH sentinel value is passed.\n    //\n    // Emits an `InternalBalanceChanged` event.\n    //\n    //\n    // - TRANSFER_EXTERNAL\n    // Transfers tokens from `sender` to `recipient`, using the Vault's ERC20 allowance. This is typically used by\n    // relayers, as it lets them reuse a user's Vault allowance.\n    //\n    // Reverts if the ETH sentinel value is passed.\n    //\n    // Emits an `ExternalBalanceTransfer` event.\n\n    enum UserBalanceOpKind { DEPOSIT_INTERNAL, WITHDRAW_INTERNAL, TRANSFER_INTERNAL, TRANSFER_EXTERNAL }\n\n    /**\n     * @dev Emitted when a user's Internal Balance changes, either from calls to `manageUserBalance`, or through\n     * interacting with Pools using Internal Balance.\n     *\n     * Because Internal Balance works exclusively with ERC20 tokens, ETH deposits and withdrawals will use the WETH\n     * address.\n     */\n    event InternalBalanceChanged(address indexed user, IERC20 indexed token, int256 delta);\n\n    /**\n     * @dev Emitted when a user's Vault ERC20 allowance is used by the Vault to transfer tokens to an external account.\n     */\n    event ExternalBalanceTransfer(IERC20 indexed token, address indexed sender, address recipient, uint256 amount);\n\n    // Pools\n    //\n    // There are three specialization settings for Pools, which allow for cheaper swaps at the cost of reduced\n    // functionality:\n    //\n    //  - General: no specialization, suited for all Pools. IGeneralPool is used for swap request callbacks, passing the\n    // balance of all tokens in the Pool. These Pools have the largest swap costs (because of the extra storage reads),\n    // which increase with the number of registered tokens.\n    //\n    //  - Minimal Swap Info: IMinimalSwapInfoPool is used instead of IGeneralPool, which saves gas by only passing the\n    // balance of the two tokens involved in the swap. This is suitable for some pricing algorithms, like the weighted\n    // constant product one popularized by Balancer V1. Swap costs are smaller compared to general Pools, and are\n    // independent of the number of registered tokens.\n    //\n    //  - Two Token: only allows two tokens to be registered. This achieves the lowest possible swap gas cost. Like\n    // minimal swap info Pools, these are called via IMinimalSwapInfoPool.\n\n    enum PoolSpecialization { GENERAL, MINIMAL_SWAP_INFO, TWO_TOKEN }\n\n    /**\n     * @dev Registers the caller account as a Pool with a given specialization setting. Returns the Pool's ID, which\n     * is used in all Pool-related functions. Pools cannot be deregistered, nor can the Pool's specialization be\n     * changed.\n     *\n     * The caller is expected to be a smart contract that implements either `IGeneralPool` or `IMinimalSwapInfoPool`,\n     * depending on the chosen specialization setting. This contract is known as the Pool's contract.\n     *\n     * Note that the same contract may register itself as multiple Pools with unique Pool IDs, or in other words,\n     * multiple Pools may share the same contract.\n     *\n     * Emits a `PoolRegistered` event.\n     */\n    function registerPool(PoolSpecialization specialization) external returns (bytes32);\n\n    /**\n     * @dev Emitted when a Pool is registered by calling `registerPool`.\n     */\n    event PoolRegistered(bytes32 indexed poolId, address indexed poolAddress, PoolSpecialization specialization);\n\n    /**\n     * @dev Returns a Pool's contract address and specialization setting.\n     */\n    function getPool(bytes32 poolId) external view returns (address, PoolSpecialization);\n\n    /**\n     * @dev Registers `tokens` for the `poolId` Pool. Must be called by the Pool's contract.\n     *\n     * Pools can only interact with tokens they have registered. Users join a Pool by transferring registered tokens,\n     * exit by receiving registered tokens, and can only swap registered tokens.\n     *\n     * Each token can only be registered once. For Pools with the Two Token specialization, `tokens` must have a length\n     * of two, that is, both tokens must be registered in the same `registerTokens` call, and they must be sorted in\n     * ascending order.\n     *\n     * The `tokens` and `assetManagers` arrays must have the same length, and each entry in these indicates the Asset\n     * Manager for the corresponding token. Asset Managers can manage a Pool's tokens via `managePoolBalance`,\n     * depositing and withdrawing them directly, and can even set their balance to arbitrary amounts. They are therefore\n     * expected to be highly secured smart contracts with sound design principles, and the decision to register an\n     * Asset Manager should not be made lightly.\n     *\n     * Pools can choose not to assign an Asset Manager to a given token by passing in the zero address. Once an Asset\n     * Manager is set, it cannot be changed except by deregistering the associated token and registering again with a\n     * different Asset Manager.\n     *\n     * Emits a `TokensRegistered` event.\n     */\n    function registerTokens(\n        bytes32 poolId,\n        IERC20[] memory tokens,\n        address[] memory assetManagers\n    ) external;\n\n    /**\n     * @dev Emitted when a Pool registers tokens by calling `registerTokens`.\n     */\n    event TokensRegistered(bytes32 indexed poolId, IERC20[] tokens, address[] assetManagers);\n\n    /**\n     * @dev Deregisters `tokens` for the `poolId` Pool. Must be called by the Pool's contract.\n     *\n     * Only registered tokens (via `registerTokens`) can be deregistered. Additionally, they must have zero total\n     * balance. For Pools with the Two Token specialization, `tokens` must have a length of two, that is, both tokens\n     * must be deregistered in the same `deregisterTokens` call.\n     *\n     * A deregistered token can be re-registered later on, possibly with a different Asset Manager.\n     *\n     * Emits a `TokensDeregistered` event.\n     */\n    function deregisterTokens(bytes32 poolId, IERC20[] memory tokens) external;\n\n    /**\n     * @dev Emitted when a Pool deregisters tokens by calling `deregisterTokens`.\n     */\n    event TokensDeregistered(bytes32 indexed poolId, IERC20[] tokens);\n\n    /**\n     * @dev Returns detailed information for a Pool's registered token.\n     *\n     * `cash` is the number of tokens the Vault currently holds for the Pool. `managed` is the number of tokens\n     * withdrawn and held outside the Vault by the Pool's token Asset Manager. The Pool's total balance for `token`\n     * equals the sum of `cash` and `managed`.\n     *\n     * Internally, `cash` and `managed` are stored using 112 bits. No action can ever cause a Pool's token `cash`,\n     * `managed` or `total` balance to be greater than 2^112 - 1.\n     *\n     * `lastChangeBlock` is the number of the block in which `token`'s total balance was last modified (via either a\n     * join, exit, swap, or Asset Manager update). This value is useful to avoid so-called 'sandwich attacks', for\n     * example when developing price oracles. A change of zero (e.g. caused by a swap with amount zero) is considered a\n     * change for this purpose, and will update `lastChangeBlock`.\n     *\n     * `assetManager` is the Pool's token Asset Manager.\n     */\n    function getPoolTokenInfo(bytes32 poolId, IERC20 token)\n        external\n        view\n        returns (\n            uint256 cash,\n            uint256 managed,\n            uint256 lastChangeBlock,\n            address assetManager\n        );\n\n    /**\n     * @dev Returns a Pool's registered tokens, the total balance for each, and the latest block when *any* of\n     * the tokens' `balances` changed.\n     *\n     * The order of the `tokens` array is the same order that will be used in `joinPool`, `exitPool`, as well as in all\n     * Pool hooks (where applicable). Calls to `registerTokens` and `deregisterTokens` may change this order.\n     *\n     * If a Pool only registers tokens once, and these are sorted in ascending order, they will be stored in the same\n     * order as passed to `registerTokens`.\n     *\n     * Total balances include both tokens held by the Vault and those withdrawn by the Pool's Asset Managers. These are\n     * the amounts used by joins, exits and swaps. For a detailed breakdown of token balances, use `getPoolTokenInfo`\n     * instead.\n     */\n    function getPoolTokens(bytes32 poolId)\n        external\n        view\n        returns (\n            IERC20[] memory tokens,\n            uint256[] memory balances,\n            uint256 lastChangeBlock\n        );\n\n    /**\n     * @dev Called by users to join a Pool, which transfers tokens from `sender` into the Pool's balance. This will\n     * trigger custom Pool behavior, which will typically grant something in return to `recipient` - often tokenized\n     * Pool shares.\n     *\n     * If the caller is not `sender`, it must be an authorized relayer for them.\n     *\n     * The `assets` and `maxAmountsIn` arrays must have the same length, and each entry indicates the maximum amount\n     * to send for each asset. The amounts to send are decided by the Pool and not the Vault: it just enforces\n     * these maximums.\n     *\n     * If joining a Pool that holds WETH, it is possible to send ETH directly: the Vault will do the wrapping. To enable\n     * this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead of the\n     * WETH address. Note that it is not possible to combine ETH and WETH in the same join. Any excess ETH will be sent\n     * back to the caller (not the sender, which is important for relayers).\n     *\n     * `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when\n     * interacting with Pools that register and deregister tokens frequently. If sending ETH however, the array must be\n     * sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the final\n     * `assets` array might not be sorted. Pools with no registered tokens cannot be joined.\n     *\n     * If `fromInternalBalance` is true, the caller's Internal Balance will be preferred: ERC20 transfers will only\n     * be made for the difference between the requested amount and Internal Balance (if any). Note that ETH cannot be\n     * withdrawn from Internal Balance: attempting to do so will trigger a revert.\n     *\n     * This causes the Vault to call the `IBasePool.onJoinPool` hook on the Pool's contract, where Pools implement\n     * their own custom logic. This typically requires additional information from the user (such as the expected number\n     * of Pool shares). This can be encoded in the `userData` argument, which is ignored by the Vault and passed\n     * directly to the Pool's contract, as is `recipient`.\n     *\n     * Emits a `PoolBalanceChanged` event.\n     */\n    function joinPool(\n        bytes32 poolId,\n        address sender,\n        address recipient,\n        JoinPoolRequest memory request\n    ) external payable;\n\n    struct JoinPoolRequest {\n        IAsset[] assets;\n        uint256[] maxAmountsIn;\n        bytes userData;\n        bool fromInternalBalance;\n    }\n\n    /**\n     * @dev Called by users to exit a Pool, which transfers tokens from the Pool's balance to `recipient`. This will\n     * trigger custom Pool behavior, which will typically ask for something in return from `sender` - often tokenized\n     * Pool shares. The amount of tokens that can be withdrawn is limited by the Pool's `cash` balance (see\n     * `getPoolTokenInfo`).\n     *\n     * If the caller is not `sender`, it must be an authorized relayer for them.\n     *\n     * The `tokens` and `minAmountsOut` arrays must have the same length, and each entry in these indicates the minimum\n     * token amount to receive for each token contract. The amounts to send are decided by the Pool and not the Vault:\n     * it just enforces these minimums.\n     *\n     * If exiting a Pool that holds WETH, it is possible to receive ETH directly: the Vault will do the unwrapping. To\n     * enable this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead\n     * of the WETH address. Note that it is not possible to combine ETH and WETH in the same exit.\n     *\n     * `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when\n     * interacting with Pools that register and deregister tokens frequently. If receiving ETH however, the array must\n     * be sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the\n     * final `assets` array might not be sorted. Pools with no registered tokens cannot be exited.\n     *\n     * If `toInternalBalance` is true, the tokens will be deposited to `recipient`'s Internal Balance. Otherwise,\n     * an ERC20 transfer will be performed. Note that ETH cannot be deposited to Internal Balance: attempting to\n     * do so will trigger a revert.\n     *\n     * `minAmountsOut` is the minimum amount of tokens the user expects to get out of the Pool, for each token in the\n     * `tokens` array. This array must match the Pool's registered tokens.\n     *\n     * This causes the Vault to call the `IBasePool.onExitPool` hook on the Pool's contract, where Pools implement\n     * their own custom logic. This typically requires additional information from the user (such as the expected number\n     * of Pool shares to return). This can be encoded in the `userData` argument, which is ignored by the Vault and\n     * passed directly to the Pool's contract.\n     *\n     * Emits a `PoolBalanceChanged` event.\n     */\n    function exitPool(\n        bytes32 poolId,\n        address sender,\n        address payable recipient,\n        ExitPoolRequest memory request\n    ) external;\n\n    struct ExitPoolRequest {\n        IAsset[] assets;\n        uint256[] minAmountsOut;\n        bytes userData;\n        bool toInternalBalance;\n    }\n\n    /**\n     * @dev Emitted when a user joins or exits a Pool by calling `joinPool` or `exitPool`, respectively.\n     */\n    event PoolBalanceChanged(\n        bytes32 indexed poolId,\n        address indexed liquidityProvider,\n        IERC20[] tokens,\n        int256[] deltas,\n        uint256[] protocolFeeAmounts\n    );\n\n    enum PoolBalanceChangeKind { JOIN, EXIT }\n\n    // Swaps\n    //\n    // Users can swap tokens with Pools by calling the `swap` and `batchSwap` functions. To do this,\n    // they need not trust Pool contracts in any way: all security checks are made by the Vault. They must however be\n    // aware of the Pools' pricing algorithms in order to estimate the prices Pools will quote.\n    //\n    // The `swap` function executes a single swap, while `batchSwap` can perform multiple swaps in sequence.\n    // In each individual swap, tokens of one kind are sent from the sender to the Pool (this is the 'token in'),\n    // and tokens of another kind are sent from the Pool to the recipient in exchange (this is the 'token out').\n    // More complex swaps, such as one token in to multiple tokens out can be achieved by batching together\n    // individual swaps.\n    //\n    // There are two swap kinds:\n    //  - 'given in' swaps, where the amount of tokens in (sent to the Pool) is known, and the Pool determines (via the\n    // `onSwap` hook) the amount of tokens out (to send to the recipient).\n    //  - 'given out' swaps, where the amount of tokens out (received from the Pool) is known, and the Pool determines\n    // (via the `onSwap` hook) the amount of tokens in (to receive from the sender).\n    //\n    // Additionally, it is possible to chain swaps using a placeholder input amount, which the Vault replaces with\n    // the calculated output of the previous swap. If the previous swap was 'given in', this will be the calculated\n    // tokenOut amount. If the previous swap was 'given out', it will use the calculated tokenIn amount. These extended\n    // swaps are known as 'multihop' swaps, since they 'hop' through a number of intermediate tokens before arriving at\n    // the final intended token.\n    //\n    // In all cases, tokens are only transferred in and out of the Vault (or withdrawn from and deposited into Internal\n    // Balance) after all individual swaps have been completed, and the net token balance change computed. This makes\n    // certain swap patterns, such as multihops, or swaps that interact with the same token pair in multiple Pools, cost\n    // much less gas than they would otherwise.\n    //\n    // It also means that under certain conditions it is possible to perform arbitrage by swapping with multiple\n    // Pools in a way that results in net token movement out of the Vault (profit), with no tokens being sent in (only\n    // updating the Pool's internal accounting).\n    //\n    // To protect users from front-running or the market changing rapidly, they supply a list of 'limits' for each token\n    // involved in the swap, where either the maximum number of tokens to send (by passing a positive value) or the\n    // minimum amount of tokens to receive (by passing a negative value) is specified.\n    //\n    // Additionally, a 'deadline' timestamp can also be provided, forcing the swap to fail if it occurs after\n    // this point in time (e.g. if the transaction failed to be included in a block promptly).\n    //\n    // If interacting with Pools that hold WETH, it is possible to both send and receive ETH directly: the Vault will do\n    // the wrapping and unwrapping. To enable this mechanism, the IAsset sentinel value (the zero address) must be\n    // passed in the `assets` array instead of the WETH address. Note that it is possible to combine ETH and WETH in the\n    // same swap. Any excess ETH will be sent back to the caller (not the sender, which is relevant for relayers).\n    //\n    // Finally, Internal Balance can be used when either sending or receiving tokens.\n\n    enum SwapKind { GIVEN_IN, GIVEN_OUT }\n\n    /**\n     * @dev Performs a swap with a single Pool.\n     *\n     * If the swap is 'given in' (the number of tokens to send to the Pool is known), it returns the amount of tokens\n     * taken from the Pool, which must be greater than or equal to `limit`.\n     *\n     * If the swap is 'given out' (the number of tokens to take from the Pool is known), it returns the amount of tokens\n     * sent to the Pool, which must be less than or equal to `limit`.\n     *\n     * Internal Balance usage and the recipient are determined by the `funds` struct.\n     *\n     * Emits a `Swap` event.\n     */\n    function swap(\n        SingleSwap memory singleSwap,\n        FundManagement memory funds,\n        uint256 limit,\n        uint256 deadline\n    ) external payable returns (uint256);\n\n    /**\n     * @dev Data for a single swap executed by `swap`. `amount` is either `amountIn` or `amountOut` depending on\n     * the `kind` value.\n     *\n     * `assetIn` and `assetOut` are either token addresses, or the IAsset sentinel value for ETH (the zero address).\n     * Note that Pools never interact with ETH directly: it will be wrapped to or unwrapped from WETH by the Vault.\n     *\n     * The `userData` field is ignored by the Vault, but forwarded to the Pool in the `onSwap` hook, and may be\n     * used to extend swap behavior.\n     */\n    struct SingleSwap {\n        bytes32 poolId;\n        SwapKind kind;\n        IAsset assetIn;\n        IAsset assetOut;\n        uint256 amount;\n        bytes userData;\n    }\n\n    /**\n     * @dev Performs a series of swaps with one or multiple Pools. In each individual swap, the caller determines either\n     * the amount of tokens sent to or received from the Pool, depending on the `kind` value.\n     *\n     * Returns an array with the net Vault asset balance deltas. Positive amounts represent tokens (or ETH) sent to the\n     * Vault, and negative amounts represent tokens (or ETH) sent by the Vault. Each delta corresponds to the asset at\n     * the same index in the `assets` array.\n     *\n     * Swaps are executed sequentially, in the order specified by the `swaps` array. Each array element describes a\n     * Pool, the token to be sent to this Pool, the token to receive from it, and an amount that is either `amountIn` or\n     * `amountOut` depending on the swap kind.\n     *\n     * Multihop swaps can be executed by passing an `amount` value of zero for a swap. This will cause the amount in/out\n     * of the previous swap to be used as the amount in for the current one. In a 'given in' swap, 'tokenIn' must equal\n     * the previous swap's `tokenOut`. For a 'given out' swap, `tokenOut` must equal the previous swap's `tokenIn`.\n     *\n     * The `assets` array contains the addresses of all assets involved in the swaps. These are either token addresses,\n     * or the IAsset sentinel value for ETH (the zero address). Each entry in the `swaps` array specifies tokens in and\n     * out by referencing an index in `assets`. Note that Pools never interact with ETH directly: it will be wrapped to\n     * or unwrapped from WETH by the Vault.\n     *\n     * Internal Balance usage, sender, and recipient are determined by the `funds` struct. The `limits` array specifies\n     * the minimum or maximum amount of each token the vault is allowed to transfer.\n     *\n     * `batchSwap` can be used to make a single swap, like `swap` does, but doing so requires more gas than the\n     * equivalent `swap` call.\n     *\n     * Emits `Swap` events.\n     */\n    function batchSwap(\n        SwapKind kind,\n        BatchSwapStep[] memory swaps,\n        IAsset[] memory assets,\n        FundManagement memory funds,\n        int256[] memory limits,\n        uint256 deadline\n    ) external payable returns (int256[] memory);\n\n    /**\n     * @dev Data for each individual swap executed by `batchSwap`. The asset in and out fields are indexes into the\n     * `assets` array passed to that function, and ETH assets are converted to WETH.\n     *\n     * If `amount` is zero, the multihop mechanism is used to determine the actual amount based on the amount in/out\n     * from the previous swap, depending on the swap kind.\n     *\n     * The `userData` field is ignored by the Vault, but forwarded to the Pool in the `onSwap` hook, and may be\n     * used to extend swap behavior.\n     */\n    struct BatchSwapStep {\n        bytes32 poolId;\n        uint256 assetInIndex;\n        uint256 assetOutIndex;\n        uint256 amount;\n        bytes userData;\n    }\n\n    /**\n     * @dev Emitted for each individual swap performed by `swap` or `batchSwap`.\n     */\n    event Swap(\n        bytes32 indexed poolId,\n        IERC20 indexed tokenIn,\n        IERC20 indexed tokenOut,\n        uint256 amountIn,\n        uint256 amountOut\n    );\n\n    /**\n     * @dev All tokens in a swap are either sent from the `sender` account to the Vault, or from the Vault to the\n     * `recipient` account.\n     *\n     * If the caller is not `sender`, it must be an authorized relayer for them.\n     *\n     * If `fromInternalBalance` is true, the `sender`'s Internal Balance will be preferred, performing an ERC20\n     * transfer for the difference between the requested amount and the User's Internal Balance (if any). The `sender`\n     * must have allowed the Vault to use their tokens via `IERC20.approve()`. This matches the behavior of\n     * `joinPool`.\n     *\n     * If `toInternalBalance` is true, tokens will be deposited to `recipient`'s internal balance instead of\n     * transferred. This matches the behavior of `exitPool`.\n     *\n     * Note that ETH cannot be deposited to or withdrawn from Internal Balance: attempting to do so will trigger a\n     * revert.\n     */\n    struct FundManagement {\n        address sender;\n        bool fromInternalBalance;\n        address payable recipient;\n        bool toInternalBalance;\n    }\n\n    /**\n     * @dev Simulates a call to `batchSwap`, returning an array of Vault asset deltas. Calls to `swap` cannot be\n     * simulated directly, but an equivalent `batchSwap` call can and will yield the exact same result.\n     *\n     * Each element in the array corresponds to the asset at the same index, and indicates the number of tokens (or ETH)\n     * the Vault would take from the sender (if positive) or send to the recipient (if negative). The arguments it\n     * receives are the same that an equivalent `batchSwap` call would receive.\n     *\n     * Unlike `batchSwap`, this function performs no checks on the sender or recipient field in the `funds` struct.\n     * This makes it suitable to be called by off-chain applications via eth_call without needing to hold tokens,\n     * approve them for the Vault, or even know a user's address.\n     *\n     * Note that this function is not 'view' (due to implementation details): the client code must explicitly execute\n     * eth_call instead of eth_sendTransaction.\n     */\n    function queryBatchSwap(\n        SwapKind kind,\n        BatchSwapStep[] memory swaps,\n        IAsset[] memory assets,\n        FundManagement memory funds\n    ) external returns (int256[] memory assetDeltas);\n\n    // Flash Loans\n\n    /**\n     * @dev Performs a 'flash loan', sending tokens to `recipient`, executing the `receiveFlashLoan` hook on it,\n     * and then reverting unless the tokens plus a proportional protocol fee have been returned.\n     *\n     * The `tokens` and `amounts` arrays must have the same length, and each entry in these indicates the loan amount\n     * for each token contract. `tokens` must be sorted in ascending order.\n     *\n     * The 'userData' field is ignored by the Vault, and forwarded as-is to `recipient` as part of the\n     * `receiveFlashLoan` call.\n     *\n     * Emits `FlashLoan` events.\n     */\n    function flashLoan(\n        IFlashLoanRecipient recipient,\n        IERC20[] memory tokens,\n        uint256[] memory amounts,\n        bytes memory userData\n    ) external;\n\n    /**\n     * @dev Emitted for each individual flash loan performed by `flashLoan`.\n     */\n    event FlashLoan(IFlashLoanRecipient indexed recipient, IERC20 indexed token, uint256 amount, uint256 feeAmount);\n\n    // Asset Management\n    //\n    // Each token registered for a Pool can be assigned an Asset Manager, which is able to freely withdraw the Pool's\n    // tokens from the Vault, deposit them, or assign arbitrary values to its `managed` balance (see\n    // `getPoolTokenInfo`). This makes them extremely powerful and dangerous. Even if an Asset Manager only directly\n    // controls one of the tokens in a Pool, a malicious manager could set that token's balance to manipulate the\n    // prices of the other tokens, and then drain the Pool with swaps. The risk of using Asset Managers is therefore\n    // not constrained to the tokens they are managing, but extends to the entire Pool's holdings.\n    //\n    // However, a properly designed Asset Manager smart contract can be safely used for the Pool's benefit,\n    // for example by lending unused tokens out for interest, or using them to participate in voting protocols.\n    //\n    // This concept is unrelated to the IAsset interface.\n\n    /**\n     * @dev Performs a set of Pool balance operations, which may be either withdrawals, deposits or updates.\n     *\n     * Pool Balance management features batching, which means a single contract call can be used to perform multiple\n     * operations of different kinds, with different Pools and tokens, at once.\n     *\n     * For each operation, the caller must be registered as the Asset Manager for `token` in `poolId`.\n     */\n    function managePoolBalance(PoolBalanceOp[] memory ops) external;\n\n    struct PoolBalanceOp {\n        PoolBalanceOpKind kind;\n        bytes32 poolId;\n        IERC20 token;\n        uint256 amount;\n    }\n\n    /**\n     * Withdrawals decrease the Pool's cash, but increase its managed balance, leaving the total balance unchanged.\n     *\n     * Deposits increase the Pool's cash, but decrease its managed balance, leaving the total balance unchanged.\n     *\n     * Updates don't affect the Pool's cash balance, but because the managed balance changes, it does alter the total.\n     * The external amount can be either increased or decreased by this call (i.e., reporting a gain or a loss).\n     */\n    enum PoolBalanceOpKind { WITHDRAW, DEPOSIT, UPDATE }\n\n    /**\n     * @dev Emitted when a Pool's token Asset Manager alters its balance via `managePoolBalance`.\n     */\n    event PoolBalanceManaged(\n        bytes32 indexed poolId,\n        address indexed assetManager,\n        IERC20 indexed token,\n        int256 cashDelta,\n        int256 managedDelta\n    );\n\n    // Protocol Fees\n    //\n    // Some operations cause the Vault to collect tokens in the form of protocol fees, which can then be withdrawn by\n    // permissioned accounts.\n    //\n    // There are two kinds of protocol fees:\n    //\n    //  - flash loan fees: charged on all flash loans, as a percentage of the amounts lent.\n    //\n    //  - swap fees: a percentage of the fees charged by Pools when performing swaps. For a number of reasons, including\n    // swap gas costs and interface simplicity, protocol swap fees are not charged on each individual swap. Rather,\n    // Pools are expected to keep track of how much they have charged in swap fees, and pay any outstanding debts to the\n    // Vault when they are joined or exited. This prevents users from joining a Pool with unpaid debt, as well as\n    // exiting a Pool in debt without first paying their share.\n\n    /**\n     * @dev Returns the current protocol fee module.\n     */\n    function getProtocolFeesCollector() external view returns (IERC20); //ProtocolFeesCollector);\n\n    /**\n     * @dev Safety mechanism to pause most Vault operations in the event of an emergency - typically detection of an\n     * error in some part of the system.\n     *\n     * The Vault can only be paused during an initial time period, after which pausing is forever disabled.\n     *\n     * While the contract is paused, the following features are disabled:\n     * - depositing and transferring internal balance\n     * - transferring external balance (using the Vault's allowance)\n     * - swaps\n     * - joining Pools\n     * - Asset Manager interactions\n     *\n     * Internal Balance can still be withdrawn, and Pools exited.\n     */\n    function setPaused(bool paused) external;\n\n    /**\n     * @dev Returns the Vault's WETH instance.\n     */\n    function WETH() external view returns (IWETH);\n    // solhint-disable-previous-line func-name-mixedcase\n}\n\n\n//////////////\n\n//File 14 of 42 : IMinimalSwapInfoPool.sol\ninterface IMinimalSwapInfoPool{\n\n    // Swap Hooks\n    struct SwapRequest {\n        IVault.SwapKind kind;\n        IERC20 tokenIn;\n        IERC20 tokenOut;\n        uint256 amount;\n        // Misc data\n        bytes32 poolId;\n        uint256 lastChangeBlock;\n        address from;\n        address to;\n        bytes userData;\n    }\n    function onSwap(\n        SwapRequest memory swapRequest,\n        uint256 currentBalanceTokenIn,\n        uint256 currentBalanceTokenOut\n    ) external returns (uint256 amount);\n\n\n    //--IBasePool\n    function onJoinPool(\n        bytes32 poolId,\n        address sender,\n        address recipient,\n        uint256[] memory balances,\n        uint256 lastChangeBlock,\n        uint256 protocolSwapFeePercentage,\n        bytes memory userData\n    ) external returns (uint256[] memory amountsIn, uint256[] memory dueProtocolFeeAmounts);\n\n    function onExitPool(\n        bytes32 poolId,\n        address sender,\n        address recipient,\n        uint256[] memory balances,\n        uint256 lastChangeBlock,\n        uint256 protocolSwapFeePercentage,\n        bytes memory userData\n    ) external returns (uint256[] memory amountsOut, uint256[] memory dueProtocolFeeAmounts);\n}\n\n\n/////////////\n\ninterface IPriceOracle {\n    // The three values that can be queried:\n    //\n    // - PAIR_PRICE: the price of the tokens in the Pool, expressed as the price of the second token in units of the\n    //   first token. For example, if token A is worth $2, and token B is worth $4, the pair price will be 2.0.\n    //   Note that the price is computed *including* the tokens decimals. This means that the pair price of a Pool with\n    //   DAI and USDC will be close to 1.0, despite DAI having 18 decimals and USDC 6.\n    //\n    // - BPT_PRICE: the price of the Pool share token (BPT), in units of the first token.\n    //   Note that the price is computed *including* the tokens decimals. This means that the BPT price of a Pool with\n    //   USDC in which BPT is worth $5 will be 5.0, despite the BPT having 18 decimals and USDC 6.\n    //\n    // - INVARIANT: the value of the Pool's invariant, which serves as a measure of its liquidity.\n    enum Variable { PAIR_PRICE, BPT_PRICE, INVARIANT }\n\n    /**\n     * @dev Returns the time average weighted price corresponding to each of `queries`. Prices are represented as 18\n     * decimal fixed point values.\n     */\n    function getTimeWeightedAverage(OracleAverageQuery[] memory queries)\n        external\n        view\n        returns (uint256[] memory results);\n\n    /**\n     * @dev Returns latest sample of `variable`. Prices are represented as 18 decimal fixed point values.\n     */\n    function getLatest(Variable variable) external view returns (uint256);\n\n    /**\n     * @dev Information for a Time Weighted Average query.\n     *\n     * Each query computes the average over a window of duration `secs` seconds that ended `ago` seconds ago. For\n     * example, the average over the past 30 minutes is computed by settings secs to 1800 and ago to 0. If secs is 1800\n     * and ago is 1800 as well, the average between 60 and 30 minutes ago is computed instead.\n     */\n    struct OracleAverageQuery {\n        Variable variable;\n        uint256 secs;\n        uint256 ago;\n    }\n\n    /**\n     * @dev Returns largest time window that can be safely queried, where 'safely' means the Oracle is guaranteed to be\n     * able to produce a result and not revert.\n     *\n     * If a query has a non-zero `ago` value, then `secs + ago` (the oldest point in time) must be smaller than this\n     * value for 'safe' queries.\n     */\n    function getLargestSafeQueryWindow() external view returns (uint256);\n\n    /**\n     * @dev Returns the accumulators corresponding to each of `queries`.\n     */\n    function getPastAccumulators(OracleAccumulatorQuery[] memory queries)\n        external\n        view\n        returns (int256[] memory results);\n\n    /**\n     * @dev Information for an Accumulator query.\n     *\n     * Each query estimates the accumulator at a time `ago` seconds ago.\n     */\n    struct OracleAccumulatorQuery {\n        Variable variable;\n        uint256 ago;\n    }\n}\n\n\n//\n\ninterface IAuthentication {\n    /**\n     * @dev Returns the action identifier associated with the external function described by `selector`.\n     */\n    function getActionId(bytes4 selector) external view returns (bytes32);\n}\n\nabstract contract Authentication is IAuthentication {\n    bytes32 private immutable _actionIdDisambiguator;\n\n    /**\n     * @dev The main purpose of the `actionIdDisambiguator` is to prevent accidental function selector collisions in\n     * multi contract systems.\n     *\n     * There are two main uses for it:\n     *  - if the contract is a singleton, any unique identifier can be used to make the associated action identifiers\n     *    unique. The contract's own address is a good option.\n     *  - if the contract belongs to a family that shares action identifiers for the same functions, an identifier\n     *    shared by the entire family (and no other contract) should be used instead.\n     */\n    constructor(bytes32 actionIdDisambiguator) {\n        _actionIdDisambiguator = actionIdDisambiguator;\n    }\n\n    /**\n     * @dev Reverts unless the caller is allowed to call this function. Should only be applied to external functions.\n     */\n    modifier authenticate() {\n        _authenticateCaller();\n        _;\n    }\n\n    /**\n     * @dev Reverts unless the caller is allowed to call the entry point function.\n     */\n    function _authenticateCaller() internal view {\n        bytes32 actionId = getActionId(msg.sig);\n        _require(_canPerform(actionId, msg.sender), Errors.SENDER_NOT_ALLOWED);\n    }\n\n    function getActionId(bytes4 selector) public view override returns (bytes32) {\n        // Each external function is dynamically assigned an action identifier as the hash of the disambiguator and the\n        // function selector. Disambiguation is necessary to avoid potential collisions in the function selectors of\n        // multiple contracts.\n        return keccak256(abi.encodePacked(_actionIdDisambiguator, selector));\n    }\n\n    function _canPerform(bytes32 actionId, address user) internal view virtual returns (bool);\n}\n\n\n\nabstract contract BasePoolAuthorization is Authentication {\n    address private immutable _owner;\n\n    address private constant _DELEGATE_OWNER = 0xBA1BA1ba1BA1bA1bA1Ba1BA1ba1BA1bA1ba1ba1B;\n\n    constructor(address owner) {\n        _owner = owner;\n    }\n\n    function getOwner() public view returns (address) {\n        return _owner;\n    }\n\n    function getAuthorizer() external view returns (IAuthorizer) {\n        return _getAuthorizer();\n    }\n\n    function _canPerform(bytes32 actionId, address account) internal view override returns (bool) {\n        if ((getOwner() != _DELEGATE_OWNER) && _isOwnerOnlyAction(actionId)) {\n            // Only the owner can perform \"owner only\" actions, unless the owner is delegated.\n            return msg.sender == getOwner();\n        } else {\n            // Non-owner actions are always processed via the Authorizer, as \"owner only\" ones are when delegated.\n            return _getAuthorizer().canPerform(actionId, account, address(this));\n        }\n    }\n\n    function _isOwnerOnlyAction(bytes32 actionId) private view returns (bool) {\n        // This implementation hardcodes the setSwapFeePercentage action identifier.\n        return true;//actionId == getActionId(BasePool.setSwapFeePercentage.selector);\n    }\n\n    function _getAuthorizer() internal view virtual returns (IAuthorizer);\n}\n\n\nabstract contract TemporarilyPausable is ITemporarilyPausable {\n    // The Pause Window and Buffer Period are timestamp-based: they should not be relied upon for sub-minute accuracy.\n    // solhint-disable not-rely-on-time\n\n    uint256 private constant _MAX_PAUSE_WINDOW_DURATION = 90 days;\n    uint256 private constant _MAX_BUFFER_PERIOD_DURATION = 30 days;\n\n    uint256 private immutable _pauseWindowEndTime;\n    uint256 private immutable _bufferPeriodEndTime;\n\n    bool private _paused;\n\n    constructor(uint256 pauseWindowDuration, uint256 bufferPeriodDuration) {\n        _require(pauseWindowDuration <= _MAX_PAUSE_WINDOW_DURATION, Errors.MAX_PAUSE_WINDOW_DURATION);\n        _require(bufferPeriodDuration <= _MAX_BUFFER_PERIOD_DURATION, Errors.MAX_BUFFER_PERIOD_DURATION);\n\n        uint256 pauseWindowEndTime = block.timestamp + pauseWindowDuration;\n\n        _pauseWindowEndTime = pauseWindowEndTime;\n        _bufferPeriodEndTime = pauseWindowEndTime + bufferPeriodDuration;\n    }\n\n    /**\n     * @dev Reverts if the contract is paused.\n     */\n    modifier whenNotPaused() {\n        _ensureNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Returns the current contract pause status, as well as the end times of the Pause Window and Buffer\n     * Period.\n     */\n    function getPausedState()\n        external\n        view\n        override\n        returns (\n            bool paused,\n            uint256 pauseWindowEndTime,\n            uint256 bufferPeriodEndTime\n        )\n    {\n        paused = !_isNotPaused();\n        pauseWindowEndTime = _getPauseWindowEndTime();\n        bufferPeriodEndTime = _getBufferPeriodEndTime();\n    }\n\n    /**\n     * @dev Sets the pause state to `paused`. The contract can only be paused until the end of the Pause Window, and\n     * unpaused until the end of the Buffer Period.\n     *\n     * Once the Buffer Period expires, this function reverts unconditionally.\n     */\n    function _setPaused(bool paused) internal {\n        if (paused) {\n            _require(block.timestamp < _getPauseWindowEndTime(), Errors.PAUSE_WINDOW_EXPIRED);\n        } else {\n            _require(block.timestamp < _getBufferPeriodEndTime(), Errors.BUFFER_PERIOD_EXPIRED);\n        }\n\n        _paused = paused;\n        emit PausedStateChanged(paused);\n    }\n\n    /**\n     * @dev Reverts if the contract is paused.\n     */\n    function _ensureNotPaused() internal view {\n        _require(_isNotPaused(), Errors.PAUSED);\n    }\n\n    /**\n     * @dev Returns true if the contract is unpaused.\n     *\n     * Once the Buffer Period expires, the gas cost of calling this function is reduced dramatically, as storage is no\n     * longer accessed.\n     */\n    function _isNotPaused() internal view returns (bool) {\n        // After the Buffer Period, the (inexpensive) timestamp check short-circuits the storage access.\n        return block.timestamp > _getBufferPeriodEndTime() || !_paused;\n    }\n\n    // These getters lead to reduced bytecode size by inlining the immutable variables in a single place.\n\n    function _getPauseWindowEndTime() private view returns (uint256) {\n        return _pauseWindowEndTime;\n    }\n\n    function _getBufferPeriodEndTime() private view returns (uint256) {\n        return _bufferPeriodEndTime;\n    }\n}\n\n\n\n\n\n\n\ninterface IWeightedPoolPriceOracle {\n    /**\n     * @dev Returns the raw data of the sample at `index`.\n     */\n    function getSample(uint256 index)\n        external\n        view\n        returns (\n            int256 logPairPrice,\n            int256 accLogPairPrice,\n            int256 logBptPrice,\n            int256 accLogBptPrice,\n            int256 logInvariant,\n            int256 accLogInvariant,\n            uint256 timestamp\n        );\n\n    /**\n     * @dev Returns the total number of samples.\n     */\n    function getTotalSamples() external view returns (uint256);\n}\n\n\ncontract PoolPriceOracle is IWeightedPoolPriceOracle {\n\n    // Each sample in the buffer accumulates information for up to 2 minutes. This is simply to reduce the size of the\n    // buffer: small time deviations will not have any significant effect.\n    // solhint-disable not-rely-on-time\n    uint256 private constant _MAX_SAMPLE_DURATION = 2 minutes;\n\n    // We use a mapping to simulate an array: the buffer won't grow or shrink, and since we will always use valid\n    // indexes using a mapping saves gas by skipping the bounds checks.\n    mapping(uint256 => bytes32) internal _samples;\n\n    function getSample(uint256 index)\n        external\n        view\n        override\n        returns (\n            int256 logPairPrice,\n            int256 accLogPairPrice,\n            int256 logBptPrice,\n            int256 accLogBptPrice,\n            int256 logInvariant,\n            int256 accLogInvariant,\n            uint256 timestamp\n        )\n    {\n\n        bytes32 sample = _getSample(index);\n        return unpack(sample);\n    }\n\n    function unpack(bytes32 sample)\n        internal\n        pure\n        returns (\n            int256 logPairPrice,\n            int256 accLogPairPrice,\n            int256 logBptPrice,\n            int256 accLogBptPrice,\n            int256 logInvariant,\n            int256 accLogInvariant,\n            uint256 _timestamp\n        )\n    {\n        logPairPrice = 1;//_instLogPairPrice(sample);\n        accLogPairPrice = 1;//_accLogPairPrice(sample);\n        logBptPrice = 1;//_instLogBptPrice(sample);\n        accLogBptPrice = 1;//_accLogBptPrice(sample);\n        logInvariant = 1;//_instLogInvariant(sample);\n        accLogInvariant = 1;//_accLogInvariant(sample);\n        _timestamp = 1;//timestamp(sample);\n    }\n\n    function getTotalSamples() external pure override returns (uint256) {\n        return 1;//Buffer.SIZE;\n    }\n\n    /**\n     * @dev Processes new price and invariant data, updating the latest sample or creating a new one.\n     *\n     * Receives the new logarithms of values to store: `logPairPrice`, `logBptPrice` and `logInvariant`, as well the\n     * index of the latest sample and the timestamp of its creation.\n     *\n     * Returns the index of the latest sample. If different from `latestIndex`, the caller should also store the\n     * timestamp, and pass it on future calls to this function.\n     */\n    function _processPriceData(\n        uint256 latestSampleCreationTimestamp,\n        uint256 latestIndex,\n        int256 logPairPrice,\n        int256 logBptPrice,\n        int256 logInvariant\n    ) internal returns (uint256) {\n        return 1;\n    }\n\n    /**\n     * @dev Returns the instant value for `variable` in the sample pointed to by `index`.\n     */\n    function _getInstantValue(IPriceOracle.Variable variable, uint256 index) internal view returns (int256) {\n        return 1;\n    }\n\n    /**\n     * @dev Returns the value of the accumulator for `variable` `ago` seconds ago. `latestIndex` must be the index of\n     * the latest sample in the buffer.\n     *\n     * Reverts under the following conditions:\n     *  - if the buffer is empty.\n     *  - if querying past information and the buffer has not been fully initialized.\n     *  - if querying older information than available in the buffer. Note that a full buffer guarantees queries for the\n     *    past 34 hours will not revert.\n     *\n     * If requesting information for a timestamp later than the latest one, it is extrapolated using the latest\n     * available data.\n     *\n     * When no exact information is available for the requested past timestamp (as usually happens, since at most one\n     * timestamp is stored every two minutes), it is estimated by performing linear interpolation using the closest\n     * values. This process is guaranteed to complete performing at most 10 storage reads.\n     */\n    function _getPastAccumulator(\n        IPriceOracle.Variable variable,\n        uint256 latestIndex,\n        uint256 ago\n    ) internal view returns (int256) {\n        return 1;    \n    }\n\n    /**\n     * @dev Finds the two samples with timestamps before and after `lookUpDate`. If one of the samples matches exactly,\n     * both `prev` and `next` will be it. `offset` is the index of the oldest sample in the buffer.\n     *\n     * Assumes `lookUpDate` is greater or equal than the timestamp of the oldest sample, and less or equal than the\n     * timestamp of the latest sample.\n     */\n    function _findNearestSample(uint256 lookUpDate, uint256 offset) internal view returns (bytes32 prev, bytes32 next) {\n        bytes32 sample;\n        return (sample, sample);\n    }\n\n    /**\n     * @dev Returns the sample that corresponds to a given `index`.\n     *\n     * Using this function instead of accessing storage directly results in denser bytecode (since the storage slot is\n     * only computed here).\n     */\n    function _getSample(uint256 index) internal view returns (bytes32) {\n        return _samples[index];\n    }\n}"
    },
    "contracts/test/BalancerErrors.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity 0.8.15;\n\n// solhint-disable\n\n/**\n * @dev Reverts if `condition` is false, with a revert reason containing `errorCode`. Only codes up to 999 are\n * supported.\n */\nfunction _require(bool condition, uint256 errorCode) pure {\n    if (!condition) _revert(errorCode);\n}\n\n/**\n * @dev Reverts with a revert reason containing `errorCode`. Only codes up to 999 are supported.\n */\nfunction _revert(uint256 errorCode) pure {\n    // We're going to dynamically create a revert string based on the error code, with the following format:\n    // 'BAL#{errorCode}'\n    // where the code is left-padded with zeroes to three digits (so they range from 000 to 999).\n    //\n    // We don't have revert strings embedded in the contract to save bytecode size: it takes much less space to store a\n    // number (8 to 16 bits) than the individual string characters.\n    //\n    // The dynamic string creation algorithm that follows could be implemented in Solidity, but assembly allows for a\n    // much denser implementation, again saving bytecode size. Given this function unconditionally reverts, this is a\n    // safe place to rely on it without worrying about how its usage might affect e.g. memory contents.\n    assembly {\n        // First, we need to compute the ASCII representation of the error code. We assume that it is in the 0-999\n        // range, so we only need to convert three digits. To convert the digits to ASCII, we add 0x30, the value for\n        // the '0' character.\n\n        let units := add(mod(errorCode, 10), 0x30)\n\n        errorCode := div(errorCode, 10)\n        let tenths := add(mod(errorCode, 10), 0x30)\n\n        errorCode := div(errorCode, 10)\n        let hundreds := add(mod(errorCode, 10), 0x30)\n\n        // With the individual characters, we can now construct the full string. The \"BAL#\" part is a known constant\n        // (0x42414c23): we simply shift this by 24 (to provide space for the 3 bytes of the error code), and add the\n        // characters to it, each shifted by a multiple of 8.\n        // The revert reason is then shifted left by 200 bits (256 minus the length of the string, 7 characters * 8 bits\n        // per character = 56) to locate it in the most significant part of the 256 slot (the beginning of a byte\n        // array).\n\n        let revertReason := shl(200, add(0x42414c23000000, add(add(units, shl(8, tenths)), shl(16, hundreds))))\n\n        // We can now encode the reason in memory, which can be safely overwritten as we're about to revert. The encoded\n        // message will have the following layout:\n        // [ revert reason identifier ] [ string location offset ] [ string length ] [ string contents ]\n\n        // The Solidity revert reason identifier is 0x08c739a0, the function selector of the Error(string) function. We\n        // also write zeroes to the next 28 bytes of memory, but those are about to be overwritten.\n        mstore(0x0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\n        // Next is the offset to the location of the string, which will be placed immediately after (20 bytes away).\n        mstore(0x04, 0x0000000000000000000000000000000000000000000000000000000000000020)\n        // The string length is fixed: 7 characters.\n        mstore(0x24, 7)\n        // Finally, the string itself is stored.\n        mstore(0x44, revertReason)\n\n        // Even if the string is only 7 bytes long, we need to return a full 32 byte slot containing it. The length of\n        // the encoded message is therefore 4 + 32 + 32 + 32 = 100.\n        revert(0, 100)\n    }\n}\n\nlibrary Errors {\n    // Math\n    uint256 internal constant ADD_OVERFLOW = 0;\n    uint256 internal constant SUB_OVERFLOW = 1;\n    uint256 internal constant SUB_UNDERFLOW = 2;\n    uint256 internal constant MUL_OVERFLOW = 3;\n    uint256 internal constant ZERO_DIVISION = 4;\n    uint256 internal constant DIV_INTERNAL = 5;\n    uint256 internal constant X_OUT_OF_BOUNDS = 6;\n    uint256 internal constant Y_OUT_OF_BOUNDS = 7;\n    uint256 internal constant PRODUCT_OUT_OF_BOUNDS = 8;\n    uint256 internal constant INVALID_EXPONENT = 9;\n\n    // Input\n    uint256 internal constant OUT_OF_BOUNDS = 100;\n    uint256 internal constant UNSORTED_ARRAY = 101;\n    uint256 internal constant UNSORTED_TOKENS = 102;\n    uint256 internal constant INPUT_LENGTH_MISMATCH = 103;\n    uint256 internal constant ZERO_TOKEN = 104;\n\n    // Shared pools\n    uint256 internal constant MIN_TOKENS = 200;\n    uint256 internal constant MAX_TOKENS = 201;\n    uint256 internal constant MAX_SWAP_FEE_PERCENTAGE = 202;\n    uint256 internal constant MIN_SWAP_FEE_PERCENTAGE = 203;\n    uint256 internal constant MINIMUM_BPT = 204;\n    uint256 internal constant CALLER_NOT_VAULT = 205;\n    uint256 internal constant UNINITIALIZED = 206;\n    uint256 internal constant BPT_IN_MAX_AMOUNT = 207;\n    uint256 internal constant BPT_OUT_MIN_AMOUNT = 208;\n    uint256 internal constant EXPIRED_PERMIT = 209;\n\n    // Pools\n    uint256 internal constant MIN_AMP = 300;\n    uint256 internal constant MAX_AMP = 301;\n    uint256 internal constant MIN_WEIGHT = 302;\n    uint256 internal constant MAX_STABLE_TOKENS = 303;\n    uint256 internal constant MAX_IN_RATIO = 304;\n    uint256 internal constant MAX_OUT_RATIO = 305;\n    uint256 internal constant MIN_BPT_IN_FOR_TOKEN_OUT = 306;\n    uint256 internal constant MAX_OUT_BPT_FOR_TOKEN_IN = 307;\n    uint256 internal constant NORMALIZED_WEIGHT_INVARIANT = 308;\n    uint256 internal constant INVALID_TOKEN = 309;\n    uint256 internal constant UNHANDLED_JOIN_KIND = 310;\n    uint256 internal constant ZERO_INVARIANT = 311;\n    uint256 internal constant ORACLE_INVALID_SECONDS_QUERY = 312;\n    uint256 internal constant ORACLE_NOT_INITIALIZED = 313;\n    uint256 internal constant ORACLE_QUERY_TOO_OLD = 314;\n    uint256 internal constant ORACLE_INVALID_INDEX = 315;\n    uint256 internal constant ORACLE_BAD_SECS = 316;\n\n    // Lib\n    uint256 internal constant REENTRANCY = 400;\n    uint256 internal constant SENDER_NOT_ALLOWED = 401;\n    uint256 internal constant PAUSED = 402;\n    uint256 internal constant PAUSE_WINDOW_EXPIRED = 403;\n    uint256 internal constant MAX_PAUSE_WINDOW_DURATION = 404;\n    uint256 internal constant MAX_BUFFER_PERIOD_DURATION = 405;\n    uint256 internal constant INSUFFICIENT_BALANCE = 406;\n    uint256 internal constant INSUFFICIENT_ALLOWANCE = 407;\n    uint256 internal constant ERC20_TRANSFER_FROM_ZERO_ADDRESS = 408;\n    uint256 internal constant ERC20_TRANSFER_TO_ZERO_ADDRESS = 409;\n    uint256 internal constant ERC20_MINT_TO_ZERO_ADDRESS = 410;\n    uint256 internal constant ERC20_BURN_FROM_ZERO_ADDRESS = 411;\n    uint256 internal constant ERC20_APPROVE_FROM_ZERO_ADDRESS = 412;\n    uint256 internal constant ERC20_APPROVE_TO_ZERO_ADDRESS = 413;\n    uint256 internal constant ERC20_TRANSFER_EXCEEDS_ALLOWANCE = 414;\n    uint256 internal constant ERC20_DECREASED_ALLOWANCE_BELOW_ZERO = 415;\n    uint256 internal constant ERC20_TRANSFER_EXCEEDS_BALANCE = 416;\n    uint256 internal constant ERC20_BURN_EXCEEDS_ALLOWANCE = 417;\n    uint256 internal constant SAFE_ERC20_CALL_FAILED = 418;\n    uint256 internal constant ADDRESS_INSUFFICIENT_BALANCE = 419;\n    uint256 internal constant ADDRESS_CANNOT_SEND_VALUE = 420;\n    uint256 internal constant SAFE_CAST_VALUE_CANT_FIT_INT256 = 421;\n    uint256 internal constant GRANT_SENDER_NOT_ADMIN = 422;\n    uint256 internal constant REVOKE_SENDER_NOT_ADMIN = 423;\n    uint256 internal constant RENOUNCE_SENDER_NOT_ALLOWED = 424;\n    uint256 internal constant BUFFER_PERIOD_EXPIRED = 425;\n\n    // Vault\n    uint256 internal constant INVALID_POOL_ID = 500;\n    uint256 internal constant CALLER_NOT_POOL = 501;\n    uint256 internal constant SENDER_NOT_ASSET_MANAGER = 502;\n    uint256 internal constant USER_DOESNT_ALLOW_RELAYER = 503;\n    uint256 internal constant INVALID_SIGNATURE = 504;\n    uint256 internal constant EXIT_BELOW_MIN = 505;\n    uint256 internal constant JOIN_ABOVE_MAX = 506;\n    uint256 internal constant SWAP_LIMIT = 507;\n    uint256 internal constant SWAP_DEADLINE = 508;\n    uint256 internal constant CANNOT_SWAP_SAME_TOKEN = 509;\n    uint256 internal constant UNKNOWN_AMOUNT_IN_FIRST_SWAP = 510;\n    uint256 internal constant MALCONSTRUCTED_MULTIHOP_SWAP = 511;\n    uint256 internal constant INTERNAL_BALANCE_OVERFLOW = 512;\n    uint256 internal constant INSUFFICIENT_INTERNAL_BALANCE = 513;\n    uint256 internal constant INVALID_ETH_INTERNAL_BALANCE = 514;\n    uint256 internal constant INVALID_POST_LOAN_BALANCE = 515;\n    uint256 internal constant INSUFFICIENT_ETH = 516;\n    uint256 internal constant UNALLOCATED_ETH = 517;\n    uint256 internal constant ETH_TRANSFER = 518;\n    uint256 internal constant CANNOT_USE_ETH_SENTINEL = 519;\n    uint256 internal constant TOKENS_MISMATCH = 520;\n    uint256 internal constant TOKEN_NOT_REGISTERED = 521;\n    uint256 internal constant TOKEN_ALREADY_REGISTERED = 522;\n    uint256 internal constant TOKENS_ALREADY_SET = 523;\n    uint256 internal constant TOKENS_LENGTH_MUST_BE_2 = 524;\n    uint256 internal constant NONZERO_TOKEN_BALANCE = 525;\n    uint256 internal constant BALANCE_TOTAL_OVERFLOW = 526;\n    uint256 internal constant POOL_NO_TOKENS = 527;\n    uint256 internal constant INSUFFICIENT_FLASH_LOAN_BALANCE = 528;\n\n    // Fees\n    uint256 internal constant SWAP_FEE_PERCENTAGE_TOO_HIGH = 600;\n    uint256 internal constant FLASH_LOAN_FEE_PERCENTAGE_TOO_HIGH = 601;\n    uint256 internal constant INSUFFICIENT_FLASH_LOAN_FEE_AMOUNT = 602;\n}"
    }
  },
  "settings": {
    "viaIR": false,
    "optimizer": {
      "enabled": true,
      "runs": 100000
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}