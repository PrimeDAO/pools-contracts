{
  "address": "0xE25E53220Df33D41b0422FeDBD2D23A94045cFf3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_mintr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_bal",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_wethBal",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_veBal",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_gaugeController",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "BadInput",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NeedsShutdown",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Unauthorized",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newDepositor",
          "type": "address"
        }
      ],
      "name": "DepositorChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newOperator",
          "type": "address"
        }
      ],
      "name": "OperatorChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnerChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "stash",
          "type": "address"
        }
      ],
      "name": "StashAccessGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "VotingPowerCleared",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_delegate",
          "type": "address"
        }
      ],
      "name": "VotingPowerDelegated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BALANCER_SNAPSHOT_ID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SNAPSHOT_REGISTRY",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bal",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gauge",
          "type": "address"
        }
      ],
      "name": "balanceOfPool",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gauge",
          "type": "address"
        }
      ],
      "name": "claimBal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_distroContract",
          "type": "address"
        },
        {
          "internalType": "contract IERC20[]",
          "name": "_tokens",
          "type": "address[]"
        }
      ],
      "name": "claimFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gauge",
          "type": "address"
        }
      ],
      "name": "claimRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "clearDelegate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_unlockTime",
          "type": "uint256"
        }
      ],
      "name": "createLock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_delegateTo",
          "type": "address"
        }
      ],
      "name": "delegateVotingPower",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_gauge",
          "type": "address"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "execute",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gaugeController",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "increaseAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "increaseTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "operator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "release",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_depositor",
          "type": "address"
        }
      ],
      "name": "setDepositor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        }
      ],
      "name": "setOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newOwner",
          "type": "address"
        }
      ],
      "name": "setOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "veBal",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_gauges",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_weights",
          "type": "uint256[]"
        }
      ],
      "name": "voteMultipleGauges",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wethBal",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_gauge",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_gauge",
          "type": "address"
        }
      ],
      "name": "withdrawAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "withdrawWethBal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc37783604d79f8faaf56ad0a5b111a70a389e7f5ae4894214a8dab6a44848e8b",
  "receipt": {
    "to": null,
    "from": "0x5F9a7EA6A79Ef04F103bfe7BD45dA65476a5155C",
    "contractAddress": "0xE25E53220Df33D41b0422FeDBD2D23A94045cFf3",
    "transactionIndex": 247,
    "gasUsed": "2255014",
    "logsBloom": "0x
    "blockHash": "0xddcbfc6ac92c41f9e7b1f5bc0977425116d69f68cd4f7b1131f5e03b7e1d6ea7",
    "transactionHash": "0xc37783604d79f8faaf56ad0a5b111a70a389e7f5ae4894214a8dab6a44848e8b",
    "logs": [
      {
        "transactionIndex": 247,
        "blockNumber": 15223863,
        "transactionHash": "0xc37783604d79f8faaf56ad0a5b111a70a389e7f5ae4894214a8dab6a44848e8b",
        "address": "0x5c6Ee304399DBdB9C8Ef030aB642B10820DB8F56",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000e25e53220df33d41b0422fedbd2d23a94045cff3",
          "0x000000000000000000000000c128a9954e6c874ea3d62ce62b468ba073093f25"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 490,
        "blockHash": "0xddcbfc6ac92c41f9e7b1f5bc0977425116d69f68cd4f7b1131f5e03b7e1d6ea7"
      }
    ],
    "blockNumber": 15223863,
    "cumulativeGasUsed": "23842903",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x239e55F427D44C3cc793f49bFB507ebe76638a2b",
    "0xba100000625a3754423978a60c9317c58a424e3d",
    "0x5c6ee304399dbdb9c8ef030ab642b10820db8f56",
    "0xC128a9954e6c874eA3d62ce62B468bA073093F25",
    "0xC128468b7Ce63eA702C1f104D55A2566b13D3ABD"
  ],
  "solcInputHash": "74d87a39c2f5002629cc62ce8e120808",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mintr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bal\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wethBal\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_veBal\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gaugeController\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"BadInput\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NeedsShutdown\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newDepositor\",\"type\":\"address\"}],\"name\":\"DepositorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOperator\",\"type\":\"address\"}],\"name\":\"OperatorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"stash\",\"type\":\"address\"}],\"name\":\"StashAccessGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"VotingPowerCleared\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_delegate\",\"type\":\"address\"}],\"name\":\"VotingPowerDelegated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BALANCER_SNAPSHOT_ID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SNAPSHOT_REGISTRY\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"}],\"name\":\"balanceOfPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"}],\"name\":\"claimBal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_distroContract\",\"type\":\"address\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"_tokens\",\"type\":\"address[]\"}],\"name\":\"claimFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"}],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clearDelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_unlockTime\",\"type\":\"uint256\"}],\"name\":\"createLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_delegateTo\",\"type\":\"address\"}],\"name\":\"delegateVotingPower\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gaugeController\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"increaseAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"increaseTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_depositor\",\"type\":\"address\"}],\"name\":\"setDepositor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"veBal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_gauges\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_weights\",\"type\":\"uint256[]\"}],\"name\":\"voteMultipleGauges\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wethBal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"}],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdrawWethBal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"based on Convex's VoterProxy smart contract      https://etherscan.io/address/0x989AEb4d175e16225E39E87d0D97A3360524AD80#code\",\"kind\":\"dev\",\"methods\":{\"balanceOfPool(address)\":{\"params\":{\"_gauge\":\"The gauge to check\"},\"returns\":{\"_0\":\"uint256 balance\"}},\"claimBal(address)\":{\"params\":{\"_gauge\":\"The gauge to claim from\"},\"returns\":{\"_0\":\"amount claimed\"}},\"claimFees(address,address[])\":{\"params\":{\"_distroContract\":\"The distro contract to claim from\",\"_tokens\":\"The tokens to claim\"}},\"createLock(uint256,uint256)\":{\"params\":{\"_unlockTime\":\"Epoch time when tokens unlock, rounded down to whole weeks\",\"_value\":\"The amount of BAL tokens to lock\"}},\"delegateVotingPower(address)\":{\"params\":{\"_delegateTo\":\"to whom we delegate voting power\"}},\"deposit(address,address)\":{\"params\":{\"_gauge\":\"The gauge to deposit to\",\"_token\":\"The address of the LP token\"}},\"execute(address,uint256,bytes)\":{\"params\":{\"_data\":\"calldata\",\"_to\":\"The address to call\",\"_value\":\"The ETH value to send\"},\"returns\":{\"_0\":\"The result of the call (bool, result)\"}},\"increaseAmount(uint256)\":{\"params\":{\"_value\":\"The amount of veBal tokens to increase\"}},\"increaseTime(uint256)\":{\"params\":{\"_value\":\"New epoch time for unlocking\"}},\"release()\":{\"details\":\"Only possible if the lock has expired\"},\"setDepositor(address)\":{\"details\":\"Only the owner can change the depositor\",\"params\":{\"_depositor\":\"The new depositor of the contract\"}},\"setOperator(address)\":{\"details\":\"Only the owner can change the operator      Current operator must be shutdown before changing the operator      Or we can set operator to address(0)\",\"params\":{\"_operator\":\"The new operator of the contract\"}},\"setOwner(address)\":{\"params\":{\"_newOwner\":\"The new owner of the contract\"}},\"voteMultipleGauges(address[],uint256[])\":{\"details\":\"Input arrays must have same length\",\"params\":{\"_gauges\":\"The gauges to vote for\",\"_weights\":\"The weights for a gauge in basis points (units of 0.01%). Minimal is 0.01%. Ignored if 0\"}},\"withdraw(address,address,uint256)\":{\"details\":\"If this contract doesn't have enough tokens it will withdraw them from gauge\",\"params\":{\"_amount\":\"The amount of tokens to withdraw\",\"_gauge\":\"The gauge to withdraw from\",\"_token\":\"ERC20 token address\"}},\"withdrawAll(address,address)\":{\"details\":\"If this contract doesn't have enough tokens it will withdraw them from gauge\",\"params\":{\"_gauge\":\"The gauge to withdraw from\",\"_token\":\"ERC20 token address\"}},\"withdrawWethBal(address)\":{\"params\":{\"_to\":\"send to address\"}}},\"title\":\"VoterProxy contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"balanceOfPool(address)\":{\"notice\":\"Balance of gauge\"},\"claimBal(address)\":{\"notice\":\"Claims VeBal tokens\"},\"claimFees(address,address[])\":{\"notice\":\"Claims fees\"},\"claimRewards(address)\":{\"notice\":\"Claims rewards_gauge The gauge to claim from\"},\"clearDelegate()\":{\"notice\":\"Clears delegation\"},\"createLock(uint256,uint256)\":{\"notice\":\"Locks BAL tokens to veBal\"},\"delegateVotingPower(address)\":{\"notice\":\"Delegates voting power to EOA so that it can vote on behalf of DAO off chain (Snapshot)\"},\"deposit(address,address)\":{\"notice\":\"Used to deposit tokens\"},\"execute(address,uint256,bytes)\":{\"notice\":\"Executes a call to `_to` with calldata `_data`\"},\"increaseAmount(uint256)\":{\"notice\":\"Increases amount of veBal tokens without modifying the unlock time\"},\"increaseTime(uint256)\":{\"notice\":\"Extend the unlock time\"},\"release()\":{\"notice\":\"Redeems veBal tokens\"},\"setDepositor(address)\":{\"notice\":\"Changes the depositor of the contract\"},\"setOperator(address)\":{\"notice\":\"Changes the operator of the contract\"},\"setOwner(address)\":{\"notice\":\"Used to change the owner of the contract\"},\"voteMultipleGauges(address[],uint256[])\":{\"notice\":\"Votes for multiple gauge weights\"},\"withdraw(address,address,uint256)\":{\"notice\":\"Used for withdrawing tokens\"},\"withdrawAll(address,address)\":{\"notice\":\"Used for withdrawing tokens\"},\"withdrawWethBal(address)\":{\"notice\":\"Used for withdrawing wethBal tokens to address\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/VoterProxy.sol\":\"VoterProxy\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"contracts/VoterProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\nimport \\\"./utils/Interfaces.sol\\\";\\nimport \\\"./utils/MathUtil.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n/// @title VoterProxy contract\\n/// @dev based on Convex's VoterProxy smart contract\\n///      https://etherscan.io/address/0x989AEb4d175e16225E39E87d0D97A3360524AD80#code\\ncontract VoterProxy is IVoterProxy {\\n    using MathUtil for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    // Same address on all chains\\n    address public constant SNAPSHOT_REGISTRY = 0x469788fE6E9E9681C6ebF3bF78e7Fd26Fc015446;\\n    bytes32 public constant BALANCER_SNAPSHOT_ID = 0x62616c616e6365722e6574680000000000000000000000000000000000000000;\\n\\n    event OperatorChanged(address newOperator);\\n    event DepositorChanged(address newDepositor);\\n    event OwnerChanged(address newOwner);\\n    event StashAccessGranted(address stash);\\n    event VotingPowerDelegated(address _delegate);\\n    event VotingPowerCleared();\\n\\n    error BadInput();\\n    error Unauthorized();\\n    error NeedsShutdown(); // Current operator must be shutdown before changing the operator\\n\\n    address public immutable mintr;\\n    address public immutable bal; // Reward token\\n    address public immutable wethBal; // Staking token\\n    address public immutable veBal; // veBal\\n    address public immutable gaugeController;\\n\\n    address public owner; // MultiSig\\n    address public operator; // Controller smart contract\\n    address public depositor; // BalDepositor smart contract\\n\\n    mapping(address => bool) private stashAccess; // stash -> canAccess\\n    mapping(address => bool) private protectedTokens; // token -> protected\\n\\n    constructor(\\n        address _mintr,\\n        address _bal,\\n        address _wethBal,\\n        address _veBal,\\n        address _gaugeController\\n    ) {\\n        mintr = _mintr;\\n        bal = _bal;\\n        wethBal = _wethBal;\\n        veBal = _veBal;\\n        gaugeController = _gaugeController;\\n        owner = msg.sender;\\n        IERC20(_wethBal).approve(_veBal, type(uint256).max);\\n    }\\n\\n    modifier onlyOwner() {\\n        if (msg.sender != owner) {\\n            revert Unauthorized();\\n        }\\n        _;\\n    }\\n\\n    modifier onlyOperator() {\\n        if (msg.sender != operator) {\\n            revert Unauthorized();\\n        }\\n        _;\\n    }\\n\\n    modifier onlyDepositor() {\\n        if (msg.sender != depositor) {\\n            revert Unauthorized();\\n        }\\n        _;\\n    }\\n\\n    /// @notice Balance of gauge\\n    /// @param _gauge The gauge to check\\n    /// @return uint256 balance\\n    function balanceOfPool(address _gauge) public view returns (uint256) {\\n        return IBalGauge(_gauge).balanceOf(address(this));\\n    }\\n\\n    /// @notice Used to change the owner of the contract\\n    /// @param _newOwner The new owner of the contract\\n    function setOwner(address _newOwner) external onlyOwner {\\n        owner = _newOwner;\\n        emit OwnerChanged(_newOwner);\\n    }\\n\\n    /// @notice Changes the operator of the contract\\n    /// @dev Only the owner can change the operator\\n    ///      Current operator must be shutdown before changing the operator\\n    ///      Or we can set operator to address(0)\\n    /// @param _operator The new operator of the contract\\n    function setOperator(address _operator) external onlyOwner {\\n        if (operator != address(0) && !IController(operator).isShutdown()) {\\n            revert NeedsShutdown();\\n        }\\n        operator = _operator;\\n        emit OperatorChanged(_operator);\\n    }\\n\\n    /// @notice Changes the depositor of the contract\\n    /// @dev Only the owner can change the depositor\\n    /// @param _depositor The new depositor of the contract\\n    function setDepositor(address _depositor) external onlyOwner {\\n        depositor = _depositor;\\n        emit DepositorChanged(_depositor);\\n    }\\n\\n    /// @notice Used to deposit tokens\\n    /// @param _token The address of the LP token\\n    /// @param _gauge The gauge to deposit to\\n    function deposit(address _token, address _gauge) external onlyOperator {\\n        if (protectedTokens[_token] == false) {\\n            protectedTokens[_token] = true;\\n        }\\n        if (protectedTokens[_gauge] == false) {\\n            protectedTokens[_gauge] = true;\\n        }\\n\\n        uint256 balance = IERC20(_token).balanceOf(address(this));\\n        if (balance > 0) {\\n            IERC20(_token).approve(_gauge, balance);\\n            IBalGauge(_gauge).deposit(balance);\\n        }\\n    }\\n\\n    /// @notice Used for withdrawing tokens\\n    /// @dev If this contract doesn't have enough tokens it will withdraw them from gauge\\n    /// @param _token ERC20 token address\\n    /// @param _gauge The gauge to withdraw from\\n    /// @param _amount The amount of tokens to withdraw\\n    function withdraw(\\n        address _token,\\n        address _gauge,\\n        uint256 _amount\\n    ) public onlyOperator {\\n        uint256 _balance = IERC20(_token).balanceOf(address(this));\\n\\n        if (_balance < _amount) {\\n            IBalGauge(_gauge).withdraw(_amount - _balance);\\n        }\\n        IERC20(_token).transfer(msg.sender, _amount);\\n    }\\n\\n    /// @notice Delegates voting power to EOA\\n    /// so that it can vote on behalf of DAO off chain (Snapshot)\\n    /// @param _delegateTo to whom we delegate voting power\\n    function delegateVotingPower(address _delegateTo) external onlyOperator {\\n        ISnapshotDelegateRegistry(SNAPSHOT_REGISTRY).setDelegate(BALANCER_SNAPSHOT_ID, _delegateTo);\\n        emit VotingPowerDelegated(_delegateTo);\\n    }\\n\\n    /// @notice Clears delegation\\n    function clearDelegate() external onlyOperator {\\n        ISnapshotDelegateRegistry(SNAPSHOT_REGISTRY).clearDelegate(BALANCER_SNAPSHOT_ID);\\n        emit VotingPowerCleared();\\n    }\\n\\n    /// @notice Votes for multiple gauge weights\\n    /// @dev Input arrays must have same length\\n    /// @param _gauges The gauges to vote for\\n    /// @param _weights The weights for a gauge in basis points (units of 0.01%). Minimal is 0.01%. Ignored if 0\\n    function voteMultipleGauges(address[] calldata _gauges, uint256[] calldata _weights) external onlyOperator {\\n        if (_gauges.length != _weights.length) {\\n            revert BadInput();\\n        }\\n        for (uint256 i = 0; i < _gauges.length; i = i.unsafeInc()) {\\n            IVoting(gaugeController).vote_for_gauge_weights(_gauges[i], _weights[i]);\\n        }\\n    }\\n\\n    /// @notice Claims VeBal tokens\\n    /// @param _gauge The gauge to claim from\\n    /// @return amount claimed\\n    function claimBal(address _gauge) external onlyOperator returns (uint256) {\\n        uint256 _balance;\\n\\n        try IMinter(mintr).mint(_gauge) {\\n            _balance = IERC20(bal).balanceOf(address(this));\\n            IERC20(bal).transfer(operator, _balance);\\n            //solhint-disable-next-line\\n        } catch {}\\n\\n        return _balance;\\n    }\\n\\n    /// @notice Claims rewards\\n    /// @notice _gauge The gauge to claim from\\n    function claimRewards(address _gauge) external onlyOperator {\\n        IBalGauge(_gauge).claim_rewards();\\n    }\\n\\n    /// @notice Claims fees\\n    /// @param _distroContract The distro contract to claim from\\n    /// @param _tokens The tokens to claim\\n    function claimFees(address _distroContract, IERC20[] calldata _tokens) external onlyOperator {\\n        IFeeDistro(_distroContract).claimTokens(address(this), _tokens);\\n\\n        for (uint256 i = 0; i < _tokens.length; i = i.unsafeInc()) {\\n            uint256 balance = _tokens[i].balanceOf(address(this));\\n            if (balance != 0) {\\n                _tokens[i].safeTransfer(operator, balance);\\n            }\\n        }\\n    }\\n\\n    /// @notice Executes a call to `_to` with calldata `_data`\\n    /// @param _to The address to call\\n    /// @param _value The ETH value to send\\n    /// @param _data calldata\\n    /// @return The result of the call (bool, result)\\n    function execute(\\n        address _to,\\n        uint256 _value,\\n        bytes calldata _data\\n    ) external onlyOperator returns (bool, bytes memory) {\\n        // solhint-disable-next-line\\n        (bool success, bytes memory result) = _to.call{ value: _value }(_data);\\n\\n        return (success, result);\\n    }\\n\\n    /// @notice Locks BAL tokens to veBal\\n    /// @param _value The amount of BAL tokens to lock\\n    /// @param _unlockTime Epoch time when tokens unlock, rounded down to whole weeks\\n    function createLock(uint256 _value, uint256 _unlockTime) external onlyDepositor {\\n        IBalVoteEscrow(veBal).create_lock(_value, _unlockTime);\\n    }\\n\\n    /// @notice Increases amount of veBal tokens without modifying the unlock time\\n    /// @param _value The amount of veBal tokens to increase\\n    function increaseAmount(uint256 _value) external onlyDepositor {\\n        IBalVoteEscrow(veBal).increase_amount(_value);\\n    }\\n\\n    /// @notice Extend the unlock time\\n    /// @param _value New epoch time for unlocking\\n    function increaseTime(uint256 _value) external onlyDepositor {\\n        IBalVoteEscrow(veBal).increase_unlock_time(_value);\\n    }\\n\\n    /// @notice Redeems veBal tokens\\n    /// @dev Only possible if the lock has expired\\n    function release() external onlyDepositor {\\n        IBalVoteEscrow(veBal).withdraw();\\n    }\\n\\n    /// @notice Used for withdrawing tokens\\n    /// @dev If this contract doesn't have enough tokens it will withdraw them from gauge\\n    /// @param _token ERC20 token address\\n    /// @param _gauge The gauge to withdraw from\\n    function withdrawAll(address _token, address _gauge) external {\\n        // withdraw has authorization check, so we don't need to check here\\n        uint256 amount = balanceOfPool(_gauge) + (IERC20(_token).balanceOf(address(this)));\\n        withdraw(_token, _gauge, amount);\\n    }\\n\\n    /// @notice Used for withdrawing wethBal tokens to address\\n    /// @param _to send to address\\n    function withdrawWethBal(address _to) external onlyOperator {\\n        IBalVoteEscrow(veBal).withdraw();\\n        uint256 _balance = IERC20(wethBal).balanceOf(address(this));\\n        IERC20(wethBal).safeTransfer(_to, _balance);\\n    }\\n}\\n\",\"keccak256\":\"0x3ede8b4112ec8acd9c437d5515c8506279c19465226c98c6cdb8cabd93f17fb2\",\"license\":\"MIT\"},\"contracts/utils/Interfaces.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IBalGauge {\\n    function deposit(uint256) external;\\n\\n    function balanceOf(address) external view returns (uint256);\\n\\n    function withdraw(uint256) external;\\n\\n    function claim_rewards() external;\\n\\n    function reward_tokens(uint256) external view returns (address);\\n\\n    function lp_token() external view returns (address);\\n}\\n\\ninterface IBalVoteEscrow {\\n    function create_lock(uint256, uint256) external;\\n\\n    function increase_amount(uint256) external;\\n\\n    function increase_unlock_time(uint256) external;\\n\\n    function withdraw() external;\\n\\n    function smart_wallet_checker() external view returns (address);\\n\\n    function balanceOf(address, uint256) external view returns (uint256);\\n\\n    function balanceOfAt(address, uint256) external view returns (uint256);\\n}\\n\\ninterface IVoting {\\n    function vote_for_gauge_weights(address, uint256) external;\\n}\\n\\ninterface IMinter {\\n    function mint(address) external;\\n}\\n\\ninterface IBalDepositor {\\n    function d2dBal() external view returns (address);\\n\\n    function wethBal() external view returns (address);\\n\\n    function burnD2DBal(address _from, uint256 _amount) external;\\n}\\n\\ninterface IVoterProxy {\\n    function deposit(address _token, address _gauge) external;\\n\\n    function withdrawWethBal(address _to) external;\\n\\n    function wethBal() external view returns (address);\\n\\n    function depositor() external view returns (address);\\n\\n    function withdraw(\\n        address _token,\\n        address _gauge,\\n        uint256 _amount\\n    ) external;\\n\\n    function withdrawAll(address _token, address _gauge) external;\\n\\n    function createLock(uint256 _value, uint256 _unlockTime) external;\\n\\n    function increaseAmount(uint256 _value) external;\\n\\n    function increaseTime(uint256 _unlockTimestamp) external;\\n\\n    function release() external;\\n\\n    function claimBal(address _gauge) external returns (uint256);\\n\\n    function claimRewards(address _gauge) external;\\n\\n    function claimFees(address _distroContract, IERC20[] calldata _tokens) external;\\n\\n    function delegateVotingPower(address _delegateTo) external;\\n\\n    function clearDelegate() external;\\n\\n    function voteMultipleGauges(address[] calldata _gauges, uint256[] calldata _weights) external;\\n\\n    function balanceOfPool(address _gauge) external view returns (uint256);\\n\\n    function operator() external view returns (address);\\n\\n    function execute(\\n        address _to,\\n        uint256 _value,\\n        bytes calldata _data\\n    ) external returns (bool, bytes memory);\\n}\\n\\ninterface ISnapshotDelegateRegistry {\\n    function setDelegate(bytes32 id, address delegate) external;\\n\\n    function clearDelegate(bytes32 id) external;\\n}\\n\\ninterface IRewards {\\n    function stake(address, uint256) external;\\n\\n    function stakeFor(address, uint256) external;\\n\\n    function withdraw(address, uint256) external;\\n\\n    function exit(address) external;\\n\\n    function getReward(address) external;\\n\\n    function queueNewRewards(uint256) external;\\n\\n    function notifyRewardAmount(uint256) external;\\n\\n    function addExtraReward(address) external;\\n\\n    function stakingToken() external view returns (address);\\n\\n    function rewardToken() external view returns (address);\\n\\n    function earned(address account) external view returns (uint256);\\n}\\n\\ninterface IStash {\\n    function processStash() external;\\n\\n    function claimRewards() external;\\n\\n    function initialize(\\n        uint256 _pid,\\n        address _operator,\\n        address _gauge,\\n        address _rewardFactory\\n    ) external;\\n}\\n\\ninterface IFeeDistro {\\n    /**\\n     * @notice Claims all pending distributions of the provided token for a user.\\n     * @dev It's not necessary to explicitly checkpoint before calling this function, it will ensure the FeeDistributor\\n     * is up to date before calculating the amount of tokens to be claimed.\\n     * @param user - The user on behalf of which to claim.\\n     * @param token - The ERC20 token address to be claimed.\\n     * @return The amount of `token` sent to `user` as a result of claiming.\\n     */\\n    function claimToken(address user, IERC20 token) external returns (uint256);\\n\\n    /**\\n     * @notice Claims a number of tokens on behalf of a user.\\n     * @dev A version of `claimToken` which supports claiming multiple `tokens` on behalf of `user`.\\n     * See `claimToken` for more details.\\n     * @param user - The user on behalf of which to claim.\\n     * @param tokens - An array of ERC20 token addresses to be claimed.\\n     * @return An array of the amounts of each token in `tokens` sent to `user` as a result of claiming.\\n     */\\n    function claimTokens(address user, IERC20[] calldata tokens) external returns (uint256[] memory);\\n}\\n\\ninterface ITokenMinter {\\n    function mint(address, uint256) external;\\n\\n    function burn(address, uint256) external;\\n}\\n\\ninterface IBaseRewardsPool {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address _account) external view returns (uint256);\\n}\\n\\ninterface IController {\\n    /// @notice returns the number of pools\\n    function poolLength() external returns (uint256);\\n\\n    /// @notice Deposits an amount of LP token into a specific pool,\\n    /// mints reward and optionally tokens and  stakes them into the reward contract\\n    /// @dev Sender must approve LP tokens to Controller smart contract\\n    /// @param _pid The pool id to deposit lp tokens into\\n    /// @param _amount The amount of lp tokens to be deposited\\n    /// @param _stake bool for wheather the tokens should be staked\\n    function deposit(\\n        uint256 _pid,\\n        uint256 _amount,\\n        bool _stake\\n    ) external;\\n\\n    /// @notice Deposits and stakes all LP tokens\\n    /// @dev Sender must approve LP tokens to Controller smart contract\\n    /// @param _pid The pool id to deposit lp tokens into\\n    /// @param _stake bool for wheather the tokens should be staked\\n    function depositAll(uint256 _pid, bool _stake) external;\\n\\n    /// @notice Withdraws lp tokens from the pool\\n    /// @param _pid The pool id to withdraw lp tokens from\\n    /// @param _amount amount of LP tokens to withdraw\\n    function withdraw(uint256 _pid, uint256 _amount) external;\\n\\n    /// @notice Withdraws all of the lp tokens in the pool\\n    /// @param _pid The pool id to withdraw lp tokens from\\n    function withdrawAll(uint256 _pid) external;\\n\\n    /// @notice Withdraws LP tokens and sends them to a specified address\\n    /// @param _pid The pool id to deposit lp tokens into\\n    /// @param _amount amount of LP tokens to withdraw\\n    function withdrawTo(\\n        uint256 _pid,\\n        uint256 _amount,\\n        address _to\\n    ) external;\\n\\n    /// @notice Withdraws `amount` of unlocked WethBal to controller\\n    /// @dev WethBal is redeemable by burning equivalent amount of D2D WethBal\\n    function withdrawUnlockedWethBal() external;\\n\\n    /// @notice Burns all D2DWethBal from a user, and transfers the equivalent amount of unlocked WethBal tokes\\n    function redeemWethBal() external;\\n\\n    /// @notice Claims rewards from a pool and disperses them to the rewards contract\\n    /// @param _pid the id of the pool where lp tokens are held\\n    function earmarkRewards(uint256 _pid) external;\\n\\n    /// @notice Claims rewards from the Balancer's fee distributor contract and transfers the tokens into the rewards contract\\n    function earmarkFees() external;\\n\\n    function isShutdown() external view returns (bool);\\n\\n    function poolInfo(uint256)\\n        external\\n        view\\n        returns (\\n            address,\\n            address,\\n            address,\\n            address,\\n            address,\\n            bool\\n        );\\n\\n    function claimRewards(uint256, address) external;\\n\\n    function owner() external returns (address);\\n}\\n\\ninterface IRewardFactory {\\n    function grantRewardStashAccess(address) external;\\n\\n    function createBalRewards(uint256, address) external returns (address);\\n\\n    function createTokenRewards(\\n        address,\\n        address,\\n        address\\n    ) external returns (address);\\n\\n    function activeRewardCount(address) external view returns (uint256);\\n\\n    function addActiveReward(address, uint256) external returns (bool);\\n\\n    function removeActiveReward(address, uint256) external returns (bool);\\n}\\n\\ninterface IStashFactory {\\n    function createStash(uint256 _pid, address _gauge) external returns (address);\\n}\\n\\ninterface ITokenFactory {\\n    function createDepositToken(address) external returns (address);\\n}\\n\\ninterface IProxyFactory {\\n    function clone(address _target) external returns (address);\\n}\\n\\ninterface IRewardHook {\\n    function onRewardClaim() external;\\n}\\n\",\"keccak256\":\"0x98f8f4c5e094e34ec48993d3e1af8a272524e6707c3f17cc7bd45bdb15bbb378\",\"license\":\"MIT\"},\"contracts/utils/MathUtil.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\n// copied from https://github.com/Uniswap/v2-core/blob/master/contracts/libraries/SafeMath.sol\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUtil {\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /// @dev Gas optimization for loops that iterate over extra rewards\\n    /// We know that this can't overflow because we can't interate over big arrays\\n    function unsafeInc(uint256 x) internal pure returns (uint256) {\\n        unchecked {\\n            return x + 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8969c0e7b65ca3bf8e8c76ea850d4b02e488c94e25735fe6b2c55b4ae14416a4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101206040523480156200001257600080fd5b506040516200295d3803806200295d833981016040819052620000359162000108565b6001600160a01b0385811660805284811660a05283811660c081905283821660e081905291831661010052600080546001600160a01b0319163317905560405163095ea7b360e01b8152600481019290925260001960248301529063095ea7b3906044016020604051808303816000875af1158015620000b9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000df919062000178565b505050505050620001a3565b80516001600160a01b03811681146200010357600080fd5b919050565b600080600080600060a086880312156200012157600080fd5b6200012c86620000eb565b94506200013c60208701620000eb565b93506200014c60408701620000eb565b92506200015c60608701620000eb565b91506200016c60808701620000eb565b90509295509295909350565b6000602082840312156200018b57600080fd5b815180151581146200019c57600080fd5b9392505050565b60805160a05160c05160e05161010051612728620002356000396000818161034a0152610a4e01526000818161024d015281816106d501528181610bde01528181610d8e0152818161113601526114e301526000818161040c015281816111e401526112810152600081816102ac01528181610870015261094201526000818161045301526107e601526127286000f3fe608060405234801561001057600080fd5b50600436106101cf5760003560e01c8063a81d2f4711610104578063c17af1a7116100a2578063ef5cfb8c11610071578063ef5cfb8c14610488578063f2c098b71461049b578063f3ff955a146104ae578063f9609f08146104c157600080fd5b8063c17af1a714610407578063c7c4ff461461042e578063d1e61dcb1461044e578063d9caed121461047557600080fd5b8063b287ff31116100de578063b287ff31146103ad578063b3ab15fb146103c0578063b52c05fe146103d3578063b61d27f6146103e657600080fd5b8063a81d2f471461036c578063b0f637941461037f578063b21f3eaa1461039257600080fd5b80633d79d1c8116101715780636ea447ba1161014b5780636ea447ba1461031557806386d1a69f1461031d5780638da5cb5b1461032557806399eecb3b1461034557600080fd5b80633d79d1c8146102a7578063570ca735146102ce5780635ba3c6a6146102ee57600080fd5b80631e4b196a116101ad5780631e4b196a1461020f57806328fa28a91461023557806334bce903146102485780633c9a2a1a1461029457600080fd5b806309cae2c8146101d457806313af4035146101e957806315456eba146101fc575b600080fd5b6101e76101e236600461217e565b6104d4565b005b6101e76101f73660046121b7565b61058a565b6101e761020a3660046121d4565b610655565b61022261021d3660046121b7565b61074a565b6040519081526020015b60405180910390f35b6101e7610243366004612239565b6109b7565b61026f7f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161022c565b6101e76102a23660046121d4565b610b5e565b61026f7f000000000000000000000000000000000000000000000000000000000000000081565b60015461026f9073ffffffffffffffffffffffffffffffffffffffff1681565b6102227f62616c616e6365722e657468000000000000000000000000000000000000000081565b6101e7610c22565b6101e7610d3b565b60005461026f9073ffffffffffffffffffffffffffffffffffffffff1681565b61026f7f000000000000000000000000000000000000000000000000000000000000000081565b6101e761037a3660046122a5565b610e0e565b61022261038d3660046121b7565b611052565b61026f73469788fe6e9e9681c6ebf3bf78e7fd26fc01544681565b6101e76103bb3660046121b7565b6110e3565b6101e76103ce3660046121b7565b6112ac565b6101e76103e13660046122fa565b61145c565b6103f96103f436600461231c565b611558565b60405161022c92919061241b565b61026f7f000000000000000000000000000000000000000000000000000000000000000081565b60025461026f9073ffffffffffffffffffffffffffffffffffffffff1681565b61026f7f000000000000000000000000000000000000000000000000000000000000000081565b6101e7610483366004612436565b61162c565b6101e76104963660046121b7565b611826565b6101e76104a93660046121b7565b6118bf565b6101e76104bc3660046121b7565b611983565b6101e76104cf36600461217e565b611ad4565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009073ffffffffffffffffffffffffffffffffffffffff8416906370a0823190602401602060405180830381865afa158015610541573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105659190612477565b61056e83611052565b61057891906124bf565b905061058583838361162c565b505050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146105db576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040519081527fa2ea9883a321a3e97b8266c2b078bfeec6d50c711ed71f874a90d500ae2eaf36906020015b60405180910390a150565b60025473ffffffffffffffffffffffffffffffffffffffff1633146106a6576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f4957677c000000000000000000000000000000000000000000000000000000008152600481018290527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690634957677c906024015b600060405180830381600087803b15801561072f57600080fd5b505af1158015610743573d6000803e3d6000fd5b5050505050565b60015460009073ffffffffffffffffffffffffffffffffffffffff16331461079e576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f6a62784200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83811660048301526000917f000000000000000000000000000000000000000000000000000000000000000090911690636a62784290602401600060405180830381600087803b15801561082c57600080fd5b505af192505050801561083d575060015b156109b1576040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906370a0823190602401602060405180830381865afa1580156108cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108f09190612477565b6001546040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9182166004820152602481018390529192507f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303816000875af115801561098b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109af91906124d7565b505b92915050565b60015473ffffffffffffffffffffffffffffffffffffffff163314610a08576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b828114610a41576040517f2bb9acf700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b83811015610743577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d7136328868684818110610a9a57610a9a6124f9565b9050602002016020810190610aaf91906121b7565b858585818110610ac157610ac16124f9565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e087901b16815273ffffffffffffffffffffffffffffffffffffffff90941660048501526020029190910135602483015250604401600060405180830381600087803b158015610b3557600080fd5b505af1158015610b49573d6000803e3d6000fd5b50505050610b578160010190565b9050610a44565b60025473ffffffffffffffffffffffffffffffffffffffff163314610baf576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517feff7a612000000000000000000000000000000000000000000000000000000008152600481018290527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063eff7a61290602401610715565b60015473ffffffffffffffffffffffffffffffffffffffff163314610c73576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517ff0bedbe20000000000000000000000000000000000000000000000000000000081527f62616c616e6365722e6574680000000000000000000000000000000000000000600482015273469788fe6e9e9681c6ebf3bf78e7fd26fc0154469063f0bedbe290602401600060405180830381600087803b158015610cf857600080fd5b505af1158015610d0c573d6000803e3d6000fd5b50506040517fa7febde3d063f85cd125edf1098752804757b63e77a6b3b12d146aaed3a00b8a925060009150a1565b60025473ffffffffffffffffffffffffffffffffffffffff163314610d8c576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16633ccfd60b6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610df457600080fd5b505af1158015610e08573d6000803e3d6000fd5b50505050565b60015473ffffffffffffffffffffffffffffffffffffffff163314610e5f576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f8872046700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff841690638872046790610eb590309086908690600401612528565b6000604051808303816000875af1158015610ed4573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052610f1a91908101906125c0565b5060005b81811015610e08576000838383818110610f3a57610f3a6124f9565b9050602002016020810190610f4f91906121b7565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff91909116906370a0823190602401602060405180830381865afa158015610fbb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fdf9190612477565b90508015611049576001546110499073ffffffffffffffffffffffffffffffffffffffff1682868686818110611017576110176124f9565b905060200201602081019061102c91906121b7565b73ffffffffffffffffffffffffffffffffffffffff169190611ddd565b50600101610f1e565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009073ffffffffffffffffffffffffffffffffffffffff8316906370a0823190602401602060405180830381865afa1580156110bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109b19190612477565b60015473ffffffffffffffffffffffffffffffffffffffff163314611134576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16633ccfd60b6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561119c57600080fd5b505af11580156111b0573d6000803e3d6000fd5b50506040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152600092507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1691506370a0823190602401602060405180830381865afa158015611241573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112659190612477565b90506112a873ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168383611ddd565b5050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146112fd576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60015473ffffffffffffffffffffffffffffffffffffffff16158015906113b25750600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bf86d6906040518163ffffffff1660e01b8152600401602060405180830381865afa15801561138c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113b091906124d7565b155b156113e9576040517fa88a170d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040519081527f4721129e0e676ed6a92909bb24e853ccdd63ad72280cc2e974e38e480e0e6e549060200161064a565b60025473ffffffffffffffffffffffffffffffffffffffff1633146114ad576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f65fc387300000000000000000000000000000000000000000000000000000000815260048101839052602481018290527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906365fc387390604401600060405180830381600087803b15801561153c57600080fd5b505af1158015611550573d6000803e3d6000fd5b505050505050565b60015460009060609073ffffffffffffffffffffffffffffffffffffffff1633146115af576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000808773ffffffffffffffffffffffffffffffffffffffff168787876040516115da92919061269c565b60006040518083038185875af1925050503d8060008114611617576040519150601f19603f3d011682016040523d82523d6000602084013e61161c565b606091505b5090999098509650505050505050565b60015473ffffffffffffffffffffffffffffffffffffffff16331461167d576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009073ffffffffffffffffffffffffffffffffffffffff8516906370a0823190602401602060405180830381865afa1580156116ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061170e9190612477565b90508181101561178f5773ffffffffffffffffffffffffffffffffffffffff8316632e1a7d4d61173e83856126ac565b6040518263ffffffff1660e01b815260040161175c91815260200190565b600060405180830381600087803b15801561177657600080fd5b505af115801561178a573d6000803e3d6000fd5b505050505b6040517fa9059cbb0000000000000000000000000000000000000000000000000000000081523360048201526024810183905273ffffffffffffffffffffffffffffffffffffffff85169063a9059cbb906044016020604051808303816000875af1158015611802573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061074391906124d7565b60015473ffffffffffffffffffffffffffffffffffffffff163314611877576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1663e6f1daf26040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561072f57600080fd5b60005473ffffffffffffffffffffffffffffffffffffffff163314611910576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600280547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040519081527f165ea44172651427010df987e6fd454678cc3c3f3e7331ab563c596bc8e787f69060200161064a565b60015473ffffffffffffffffffffffffffffffffffffffff1633146119d4576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517fbd86e5080000000000000000000000000000000000000000000000000000000081527f62616c616e6365722e6574680000000000000000000000000000000000000000600482015273ffffffffffffffffffffffffffffffffffffffff8216602482015273469788fe6e9e9681c6ebf3bf78e7fd26fc0154469063bd86e50890604401600060405180830381600087803b158015611a7557600080fd5b505af1158015611a89573d6000803e3d6000fd5b505060405173ffffffffffffffffffffffffffffffffffffffff841681527f9765f939e65a9a6667affea71ad5d97f51fd25883d233f2b8e44c811395fc0509250602001905061064a565b60015473ffffffffffffffffffffffffffffffffffffffff163314611b25576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff821660009081526004602052604081205460ff1615159003611ba55773ffffffffffffffffffffffffffffffffffffffff8216600090815260046020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790555b73ffffffffffffffffffffffffffffffffffffffff811660009081526004602052604081205460ff1615159003611c255773ffffffffffffffffffffffffffffffffffffffff8116600090815260046020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790555b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009073ffffffffffffffffffffffffffffffffffffffff8416906370a0823190602401602060405180830381865afa158015611c92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cb69190612477565b90508015610585576040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83811660048301526024820183905284169063095ea7b3906044016020604051808303816000875af1158015611d33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d5791906124d7565b506040517fb6b55f250000000000000000000000000000000000000000000000000000000081526004810182905273ffffffffffffffffffffffffffffffffffffffff83169063b6b55f2590602401600060405180830381600087803b158015611dc057600080fd5b505af1158015611dd4573d6000803e3d6000fd5b50505050505050565b6040805173ffffffffffffffffffffffffffffffffffffffff848116602483015260448083018590528351808403909101815260649092018352602080830180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb0000000000000000000000000000000000000000000000000000000017905283518085019094528084527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65649084015261058592869291600091611ea8918516908490611f57565b8051909150156105855780806020019051810190611ec691906124d7565b610585576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6060611f668484600085611f70565b90505b9392505050565b606082471015612002576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401611f4e565b73ffffffffffffffffffffffffffffffffffffffff85163b612080576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401611f4e565b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516120a991906126c3565b60006040518083038185875af1925050503d80600081146120e6576040519150601f19603f3d011682016040523d82523d6000602084013e6120eb565b606091505b50915091506120fb828286612106565b979650505050505050565b60608315612115575081611f69565b8251156121255782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f4e91906126df565b73ffffffffffffffffffffffffffffffffffffffff8116811461217b57600080fd5b50565b6000806040838503121561219157600080fd5b823561219c81612159565b915060208301356121ac81612159565b809150509250929050565b6000602082840312156121c957600080fd5b8135611f6981612159565b6000602082840312156121e657600080fd5b5035919050565b60008083601f8401126121ff57600080fd5b50813567ffffffffffffffff81111561221757600080fd5b6020830191508360208260051b850101111561223257600080fd5b9250929050565b6000806000806040858703121561224f57600080fd5b843567ffffffffffffffff8082111561226757600080fd5b612273888389016121ed565b9096509450602087013591508082111561228c57600080fd5b50612299878288016121ed565b95989497509550505050565b6000806000604084860312156122ba57600080fd5b83356122c581612159565b9250602084013567ffffffffffffffff8111156122e157600080fd5b6122ed868287016121ed565b9497909650939450505050565b6000806040838503121561230d57600080fd5b50508035926020909101359150565b6000806000806060858703121561233257600080fd5b843561233d81612159565b935060208501359250604085013567ffffffffffffffff8082111561236157600080fd5b818701915087601f83011261237557600080fd5b81358181111561238457600080fd5b88602082850101111561239657600080fd5b95989497505060200194505050565b60005b838110156123c05781810151838201526020016123a8565b83811115610e085750506000910152565b600081518084526123e98160208601602086016123a5565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b8215158152604060208201526000611f6660408301846123d1565b60008060006060848603121561244b57600080fd5b833561245681612159565b9250602084013561246681612159565b929592945050506040919091013590565b60006020828403121561248957600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082198211156124d2576124d2612490565b500190565b6000602082840312156124e957600080fd5b81518015158114611f6957600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff848116825260406020808401829052908301849052600091859160608501845b8781101561258457843561257081612159565b84168252938201939082019060010161255d565b5098975050505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600060208083850312156125d357600080fd5b825167ffffffffffffffff808211156125eb57600080fd5b818501915085601f8301126125ff57600080fd5b81518181111561261157612611612591565b8060051b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f8301168101818110858211171561265457612654612591565b60405291825284820192508381018501918883111561267257600080fd5b938501935b8285101561269057845184529385019392850192612677565b98975050505050505050565b8183823760009101908152919050565b6000828210156126be576126be612490565b500390565b600082516126d58184602087016123a5565b9190910192915050565b602081526000611f6960208301846123d156fea26469706673582212200d0d97d7eed6060c8a778c1085d8ef9d2bfb733ecf47a70316f85ab552d383ed64736f6c634300080f0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101cf5760003560e01c8063a81d2f4711610104578063c17af1a7116100a2578063ef5cfb8c11610071578063ef5cfb8c14610488578063f2c098b71461049b578063f3ff955a146104ae578063f9609f08146104c157600080fd5b8063c17af1a714610407578063c7c4ff461461042e578063d1e61dcb1461044e578063d9caed121461047557600080fd5b8063b287ff31116100de578063b287ff31146103ad578063b3ab15fb146103c0578063b52c05fe146103d3578063b61d27f6146103e657600080fd5b8063a81d2f471461036c578063b0f637941461037f578063b21f3eaa1461039257600080fd5b80633d79d1c8116101715780636ea447ba1161014b5780636ea447ba1461031557806386d1a69f1461031d5780638da5cb5b1461032557806399eecb3b1461034557600080fd5b80633d79d1c8146102a7578063570ca735146102ce5780635ba3c6a6146102ee57600080fd5b80631e4b196a116101ad5780631e4b196a1461020f57806328fa28a91461023557806334bce903146102485780633c9a2a1a1461029457600080fd5b806309cae2c8146101d457806313af4035146101e957806315456eba146101fc575b600080fd5b6101e76101e236600461217e565b6104d4565b005b6101e76101f73660046121b7565b61058a565b6101e761020a3660046121d4565b610655565b61022261021d3660046121b7565b61074a565b6040519081526020015b60405180910390f35b6101e7610243366004612239565b6109b7565b61026f7f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161022c565b6101e76102a23660046121d4565b610b5e565b61026f7f000000000000000000000000000000000000000000000000000000000000000081565b60015461026f9073ffffffffffffffffffffffffffffffffffffffff1681565b6102227f62616c616e6365722e657468000000000000000000000000000000000000000081565b6101e7610c22565b6101e7610d3b565b60005461026f9073ffffffffffffffffffffffffffffffffffffffff1681565b61026f7f000000000000000000000000000000000000000000000000000000000000000081565b6101e761037a3660046122a5565b610e0e565b61022261038d3660046121b7565b611052565b61026f73469788fe6e9e9681c6ebf3bf78e7fd26fc01544681565b6101e76103bb3660046121b7565b6110e3565b6101e76103ce3660046121b7565b6112ac565b6101e76103e13660046122fa565b61145c565b6103f96103f436600461231c565b611558565b60405161022c92919061241b565b61026f7f000000000000000000000000000000000000000000000000000000000000000081565b60025461026f9073ffffffffffffffffffffffffffffffffffffffff1681565b61026f7f000000000000000000000000000000000000000000000000000000000000000081565b6101e7610483366004612436565b61162c565b6101e76104963660046121b7565b611826565b6101e76104a93660046121b7565b6118bf565b6101e76104bc3660046121b7565b611983565b6101e76104cf36600461217e565b611ad4565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009073ffffffffffffffffffffffffffffffffffffffff8416906370a0823190602401602060405180830381865afa158015610541573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105659190612477565b61056e83611052565b61057891906124bf565b905061058583838361162c565b505050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146105db576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040519081527fa2ea9883a321a3e97b8266c2b078bfeec6d50c711ed71f874a90d500ae2eaf36906020015b60405180910390a150565b60025473ffffffffffffffffffffffffffffffffffffffff1633146106a6576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f4957677c000000000000000000000000000000000000000000000000000000008152600481018290527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690634957677c906024015b600060405180830381600087803b15801561072f57600080fd5b505af1158015610743573d6000803e3d6000fd5b5050505050565b60015460009073ffffffffffffffffffffffffffffffffffffffff16331461079e576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f6a62784200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83811660048301526000917f000000000000000000000000000000000000000000000000000000000000000090911690636a62784290602401600060405180830381600087803b15801561082c57600080fd5b505af192505050801561083d575060015b156109b1576040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906370a0823190602401602060405180830381865afa1580156108cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108f09190612477565b6001546040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9182166004820152602481018390529192507f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303816000875af115801561098b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109af91906124d7565b505b92915050565b60015473ffffffffffffffffffffffffffffffffffffffff163314610a08576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b828114610a41576040517f2bb9acf700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b83811015610743577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d7136328868684818110610a9a57610a9a6124f9565b9050602002016020810190610aaf91906121b7565b858585818110610ac157610ac16124f9565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e087901b16815273ffffffffffffffffffffffffffffffffffffffff90941660048501526020029190910135602483015250604401600060405180830381600087803b158015610b3557600080fd5b505af1158015610b49573d6000803e3d6000fd5b50505050610b578160010190565b9050610a44565b60025473ffffffffffffffffffffffffffffffffffffffff163314610baf576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517feff7a612000000000000000000000000000000000000000000000000000000008152600481018290527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063eff7a61290602401610715565b60015473ffffffffffffffffffffffffffffffffffffffff163314610c73576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517ff0bedbe20000000000000000000000000000000000000000000000000000000081527f62616c616e6365722e6574680000000000000000000000000000000000000000600482015273469788fe6e9e9681c6ebf3bf78e7fd26fc0154469063f0bedbe290602401600060405180830381600087803b158015610cf857600080fd5b505af1158015610d0c573d6000803e3d6000fd5b50506040517fa7febde3d063f85cd125edf1098752804757b63e77a6b3b12d146aaed3a00b8a925060009150a1565b60025473ffffffffffffffffffffffffffffffffffffffff163314610d8c576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16633ccfd60b6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610df457600080fd5b505af1158015610e08573d6000803e3d6000fd5b50505050565b60015473ffffffffffffffffffffffffffffffffffffffff163314610e5f576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f8872046700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff841690638872046790610eb590309086908690600401612528565b6000604051808303816000875af1158015610ed4573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052610f1a91908101906125c0565b5060005b81811015610e08576000838383818110610f3a57610f3a6124f9565b9050602002016020810190610f4f91906121b7565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff91909116906370a0823190602401602060405180830381865afa158015610fbb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fdf9190612477565b90508015611049576001546110499073ffffffffffffffffffffffffffffffffffffffff1682868686818110611017576110176124f9565b905060200201602081019061102c91906121b7565b73ffffffffffffffffffffffffffffffffffffffff169190611ddd565b50600101610f1e565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009073ffffffffffffffffffffffffffffffffffffffff8316906370a0823190602401602060405180830381865afa1580156110bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109b19190612477565b60015473ffffffffffffffffffffffffffffffffffffffff163314611134576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16633ccfd60b6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561119c57600080fd5b505af11580156111b0573d6000803e3d6000fd5b50506040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152600092507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1691506370a0823190602401602060405180830381865afa158015611241573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112659190612477565b90506112a873ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168383611ddd565b5050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146112fd576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60015473ffffffffffffffffffffffffffffffffffffffff16158015906113b25750600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bf86d6906040518163ffffffff1660e01b8152600401602060405180830381865afa15801561138c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113b091906124d7565b155b156113e9576040517fa88a170d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040519081527f4721129e0e676ed6a92909bb24e853ccdd63ad72280cc2e974e38e480e0e6e549060200161064a565b60025473ffffffffffffffffffffffffffffffffffffffff1633146114ad576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f65fc387300000000000000000000000000000000000000000000000000000000815260048101839052602481018290527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906365fc387390604401600060405180830381600087803b15801561153c57600080fd5b505af1158015611550573d6000803e3d6000fd5b505050505050565b60015460009060609073ffffffffffffffffffffffffffffffffffffffff1633146115af576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000808773ffffffffffffffffffffffffffffffffffffffff168787876040516115da92919061269c565b60006040518083038185875af1925050503d8060008114611617576040519150601f19603f3d011682016040523d82523d6000602084013e61161c565b606091505b5090999098509650505050505050565b60015473ffffffffffffffffffffffffffffffffffffffff16331461167d576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009073ffffffffffffffffffffffffffffffffffffffff8516906370a0823190602401602060405180830381865afa1580156116ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061170e9190612477565b90508181101561178f5773ffffffffffffffffffffffffffffffffffffffff8316632e1a7d4d61173e83856126ac565b6040518263ffffffff1660e01b815260040161175c91815260200190565b600060405180830381600087803b15801561177657600080fd5b505af115801561178a573d6000803e3d6000fd5b505050505b6040517fa9059cbb0000000000000000000000000000000000000000000000000000000081523360048201526024810183905273ffffffffffffffffffffffffffffffffffffffff85169063a9059cbb906044016020604051808303816000875af1158015611802573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061074391906124d7565b60015473ffffffffffffffffffffffffffffffffffffffff163314611877576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1663e6f1daf26040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561072f57600080fd5b60005473ffffffffffffffffffffffffffffffffffffffff163314611910576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600280547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040519081527f165ea44172651427010df987e6fd454678cc3c3f3e7331ab563c596bc8e787f69060200161064a565b60015473ffffffffffffffffffffffffffffffffffffffff1633146119d4576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517fbd86e5080000000000000000000000000000000000000000000000000000000081527f62616c616e6365722e6574680000000000000000000000000000000000000000600482015273ffffffffffffffffffffffffffffffffffffffff8216602482015273469788fe6e9e9681c6ebf3bf78e7fd26fc0154469063bd86e50890604401600060405180830381600087803b158015611a7557600080fd5b505af1158015611a89573d6000803e3d6000fd5b505060405173ffffffffffffffffffffffffffffffffffffffff841681527f9765f939e65a9a6667affea71ad5d97f51fd25883d233f2b8e44c811395fc0509250602001905061064a565b60015473ffffffffffffffffffffffffffffffffffffffff163314611b25576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff821660009081526004602052604081205460ff1615159003611ba55773ffffffffffffffffffffffffffffffffffffffff8216600090815260046020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790555b73ffffffffffffffffffffffffffffffffffffffff811660009081526004602052604081205460ff1615159003611c255773ffffffffffffffffffffffffffffffffffffffff8116600090815260046020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790555b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009073ffffffffffffffffffffffffffffffffffffffff8416906370a0823190602401602060405180830381865afa158015611c92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cb69190612477565b90508015610585576040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83811660048301526024820183905284169063095ea7b3906044016020604051808303816000875af1158015611d33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d5791906124d7565b506040517fb6b55f250000000000000000000000000000000000000000000000000000000081526004810182905273ffffffffffffffffffffffffffffffffffffffff83169063b6b55f2590602401600060405180830381600087803b158015611dc057600080fd5b505af1158015611dd4573d6000803e3d6000fd5b50505050505050565b6040805173ffffffffffffffffffffffffffffffffffffffff848116602483015260448083018590528351808403909101815260649092018352602080830180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb0000000000000000000000000000000000000000000000000000000017905283518085019094528084527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65649084015261058592869291600091611ea8918516908490611f57565b8051909150156105855780806020019051810190611ec691906124d7565b610585576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6060611f668484600085611f70565b90505b9392505050565b606082471015612002576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401611f4e565b73ffffffffffffffffffffffffffffffffffffffff85163b612080576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401611f4e565b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516120a991906126c3565b60006040518083038185875af1925050503d80600081146120e6576040519150601f19603f3d011682016040523d82523d6000602084013e6120eb565b606091505b50915091506120fb828286612106565b979650505050505050565b60608315612115575081611f69565b8251156121255782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f4e91906126df565b73ffffffffffffffffffffffffffffffffffffffff8116811461217b57600080fd5b50565b6000806040838503121561219157600080fd5b823561219c81612159565b915060208301356121ac81612159565b809150509250929050565b6000602082840312156121c957600080fd5b8135611f6981612159565b6000602082840312156121e657600080fd5b5035919050565b60008083601f8401126121ff57600080fd5b50813567ffffffffffffffff81111561221757600080fd5b6020830191508360208260051b850101111561223257600080fd5b9250929050565b6000806000806040858703121561224f57600080fd5b843567ffffffffffffffff8082111561226757600080fd5b612273888389016121ed565b9096509450602087013591508082111561228c57600080fd5b50612299878288016121ed565b95989497509550505050565b6000806000604084860312156122ba57600080fd5b83356122c581612159565b9250602084013567ffffffffffffffff8111156122e157600080fd5b6122ed868287016121ed565b9497909650939450505050565b6000806040838503121561230d57600080fd5b50508035926020909101359150565b6000806000806060858703121561233257600080fd5b843561233d81612159565b935060208501359250604085013567ffffffffffffffff8082111561236157600080fd5b818701915087601f83011261237557600080fd5b81358181111561238457600080fd5b88602082850101111561239657600080fd5b95989497505060200194505050565b60005b838110156123c05781810151838201526020016123a8565b83811115610e085750506000910152565b600081518084526123e98160208601602086016123a5565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b8215158152604060208201526000611f6660408301846123d1565b60008060006060848603121561244b57600080fd5b833561245681612159565b9250602084013561246681612159565b929592945050506040919091013590565b60006020828403121561248957600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082198211156124d2576124d2612490565b500190565b6000602082840312156124e957600080fd5b81518015158114611f6957600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff848116825260406020808401829052908301849052600091859160608501845b8781101561258457843561257081612159565b84168252938201939082019060010161255d565b5098975050505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600060208083850312156125d357600080fd5b825167ffffffffffffffff808211156125eb57600080fd5b818501915085601f8301126125ff57600080fd5b81518181111561261157612611612591565b8060051b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f8301168101818110858211171561265457612654612591565b60405291825284820192508381018501918883111561267257600080fd5b938501935b8285101561269057845184529385019392850192612677565b98975050505050505050565b8183823760009101908152919050565b6000828210156126be576126be612490565b500390565b600082516126d58184602087016123a5565b9190910192915050565b602081526000611f6960208301846123d156fea26469706673582212200d0d97d7eed6060c8a778c1085d8ef9d2bfb733ecf47a70316f85ab552d383ed64736f6c634300080f0033",
  "devdoc": {
    "details": "based on Convex's VoterProxy smart contract      https://etherscan.io/address/0x989AEb4d175e16225E39E87d0D97A3360524AD80#code",
    "kind": "dev",
    "methods": {
      "balanceOfPool(address)": {
        "params": {
          "_gauge": "The gauge to check"
        },
        "returns": {
          "_0": "uint256 balance"
        }
      },
      "claimBal(address)": {
        "params": {
          "_gauge": "The gauge to claim from"
        },
        "returns": {
          "_0": "amount claimed"
        }
      },
      "claimFees(address,address[])": {
        "params": {
          "_distroContract": "The distro contract to claim from",
          "_tokens": "The tokens to claim"
        }
      },
      "createLock(uint256,uint256)": {
        "params": {
          "_unlockTime": "Epoch time when tokens unlock, rounded down to whole weeks",
          "_value": "The amount of BAL tokens to lock"
        }
      },
      "delegateVotingPower(address)": {
        "params": {
          "_delegateTo": "to whom we delegate voting power"
        }
      },
      "deposit(address,address)": {
        "params": {
          "_gauge": "The gauge to deposit to",
          "_token": "The address of the LP token"
        }
      },
      "execute(address,uint256,bytes)": {
        "params": {
          "_data": "calldata",
          "_to": "The address to call",
          "_value": "The ETH value to send"
        },
        "returns": {
          "_0": "The result of the call (bool, result)"
        }
      },
      "increaseAmount(uint256)": {
        "params": {
          "_value": "The amount of veBal tokens to increase"
        }
      },
      "increaseTime(uint256)": {
        "params": {
          "_value": "New epoch time for unlocking"
        }
      },
      "release()": {
        "details": "Only possible if the lock has expired"
      },
      "setDepositor(address)": {
        "details": "Only the owner can change the depositor",
        "params": {
          "_depositor": "The new depositor of the contract"
        }
      },
      "setOperator(address)": {
        "details": "Only the owner can change the operator      Current operator must be shutdown before changing the operator      Or we can set operator to address(0)",
        "params": {
          "_operator": "The new operator of the contract"
        }
      },
      "setOwner(address)": {
        "params": {
          "_newOwner": "The new owner of the contract"
        }
      },
      "voteMultipleGauges(address[],uint256[])": {
        "details": "Input arrays must have same length",
        "params": {
          "_gauges": "The gauges to vote for",
          "_weights": "The weights for a gauge in basis points (units of 0.01%). Minimal is 0.01%. Ignored if 0"
        }
      },
      "withdraw(address,address,uint256)": {
        "details": "If this contract doesn't have enough tokens it will withdraw them from gauge",
        "params": {
          "_amount": "The amount of tokens to withdraw",
          "_gauge": "The gauge to withdraw from",
          "_token": "ERC20 token address"
        }
      },
      "withdrawAll(address,address)": {
        "details": "If this contract doesn't have enough tokens it will withdraw them from gauge",
        "params": {
          "_gauge": "The gauge to withdraw from",
          "_token": "ERC20 token address"
        }
      },
      "withdrawWethBal(address)": {
        "params": {
          "_to": "send to address"
        }
      }
    },
    "title": "VoterProxy contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "balanceOfPool(address)": {
        "notice": "Balance of gauge"
      },
      "claimBal(address)": {
        "notice": "Claims VeBal tokens"
      },
      "claimFees(address,address[])": {
        "notice": "Claims fees"
      },
      "claimRewards(address)": {
        "notice": "Claims rewards_gauge The gauge to claim from"
      },
      "clearDelegate()": {
        "notice": "Clears delegation"
      },
      "createLock(uint256,uint256)": {
        "notice": "Locks BAL tokens to veBal"
      },
      "delegateVotingPower(address)": {
        "notice": "Delegates voting power to EOA so that it can vote on behalf of DAO off chain (Snapshot)"
      },
      "deposit(address,address)": {
        "notice": "Used to deposit tokens"
      },
      "execute(address,uint256,bytes)": {
        "notice": "Executes a call to `_to` with calldata `_data`"
      },
      "increaseAmount(uint256)": {
        "notice": "Increases amount of veBal tokens without modifying the unlock time"
      },
      "increaseTime(uint256)": {
        "notice": "Extend the unlock time"
      },
      "release()": {
        "notice": "Redeems veBal tokens"
      },
      "setDepositor(address)": {
        "notice": "Changes the depositor of the contract"
      },
      "setOperator(address)": {
        "notice": "Changes the operator of the contract"
      },
      "setOwner(address)": {
        "notice": "Used to change the owner of the contract"
      },
      "voteMultipleGauges(address[],uint256[])": {
        "notice": "Votes for multiple gauge weights"
      },
      "withdraw(address,address,uint256)": {
        "notice": "Used for withdrawing tokens"
      },
      "withdrawAll(address,address)": {
        "notice": "Used for withdrawing tokens"
      },
      "withdrawWethBal(address)": {
        "notice": "Used for withdrawing wethBal tokens to address"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6853,
        "contract": "contracts/VoterProxy.sol:VoterProxy",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 6855,
        "contract": "contracts/VoterProxy.sol:VoterProxy",
        "label": "operator",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 6857,
        "contract": "contracts/VoterProxy.sol:VoterProxy",
        "label": "depositor",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 6861,
        "contract": "contracts/VoterProxy.sol:VoterProxy",
        "label": "stashAccess",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 6865,
        "contract": "contracts/VoterProxy.sol:VoterProxy",
        "label": "protectedTokens",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      }
    }
  }
}