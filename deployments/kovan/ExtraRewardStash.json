{
  "address": "0x770ea7EbCDA8c03aa7C51Cd31ccE39955AA9c24E",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_bal",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AlreadyInitialized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Unauthorized",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newRewardHook",
          "type": "address"
        }
      ],
      "name": "RewardHookSet",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "bal",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gauge",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hasBalRewards",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hasRedirected",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "historicalRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_staker",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_gauge",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_rFactory",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "operator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "processStash",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardFactory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardHook",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "setExtraReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_hook",
          "type": "address"
        }
      ],
      "name": "setRewardHook",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "staker",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "rewardAddress",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenList",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xaefe90a25a33169ac68d38ae4b14b45155fea927987192ba239e9dd98797699b",
  "receipt": {
    "to": null,
    "from": "0xbF63Afb77A49159b4502E91CD3f4EbDcc161431f",
    "contractAddress": "0x770ea7EbCDA8c03aa7C51Cd31ccE39955AA9c24E",
    "transactionIndex": 0,
    "gasUsed": "1149201",
    "logsBloom": "0x
    "blockHash": "0x1b0e6d0befa695c1dab2d7ed8c12f7cac545701f8a9ed49b96db291ab4a11f98",
    "transactionHash": "0xaefe90a25a33169ac68d38ae4b14b45155fea927987192ba239e9dd98797699b",
    "logs": [],
    "blockNumber": 32274883,
    "cumulativeGasUsed": "1149201",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xcb355677e36f390ccc4a5d4beadfbf1eb2071c81"
  ],
  "solcInputHash": "ffe7c3d313508848a216b8f00aa6ff1c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bal\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyInitialized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newRewardHook\",\"type\":\"address\"}],\"name\":\"RewardHookSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"bal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gauge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasBalRewards\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasRedirected\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"historicalRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rFactory\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"processStash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardHook\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setExtraReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_hook\",\"type\":\"address\"}],\"name\":\"setRewardHook\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"staker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"setExtraReward(address)\":{\"details\":\"Used for any new incentive that is not directly on curve gauges\",\"params\":{\"_token\":\"The reward token address\"}},\"setRewardHook(address)\":{\"params\":{\"_hook\":\"The address of the reward hook\"}}},\"title\":\"ExtraRewardStash\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"claimRewards()\":{\"notice\":\"Claims registered reward tokens\"},\"processStash()\":{\"notice\":\"Sends all of the extra rewards to the reward contracts\"},\"setExtraReward(address)\":{\"notice\":\"Registers an extra reward token to be handled\"},\"setRewardHook(address)\":{\"notice\":\"Sets the reward hook address\"},\"tokenCount()\":{\"notice\":\"Returns the length of the tokenList\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ExtraRewardStash.sol\":\"ExtraRewardStash\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"contracts/ExtraRewardStash.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// solium-disable linebreak-style\\npragma solidity 0.8.14;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./utils/Interfaces.sol\\\";\\n\\n/// @title ExtraRewardStash\\ncontract ExtraRewardStash is IStash {\\n    error Unauthorized();\\n    error AlreadyInitialized();\\n\\n    event RewardHookSet(address newRewardHook);\\n\\n    uint256 private constant MAX_REWARDS = 8;\\n    address public immutable bal;\\n\\n    uint256 public pid;\\n    address public operator;\\n    address public staker;\\n    address public gauge;\\n    address public rewardFactory;\\n    address public rewardHook; // address to call for reward pulls\\n    bool public hasRedirected;\\n    bool public hasBalRewards;\\n\\n    mapping(address => uint256) public historicalRewards;\\n\\n    struct TokenInfo {\\n        address token;\\n        address rewardAddress;\\n    }\\n\\n    // use mapping + array so that we dont have to loop check each time setToken is called\\n    mapping(address => TokenInfo) public tokenInfo;\\n    address[] public tokenList;\\n\\n    constructor(address _bal) {\\n        bal = _bal;\\n    }\\n\\n    function initialize(\\n        uint256 _pid,\\n        address _operator,\\n        address _staker,\\n        address _gauge,\\n        address _rFactory\\n    ) external {\\n        if (gauge != address(0)) {\\n            revert AlreadyInitialized();\\n        }\\n        pid = _pid;\\n        operator = _operator;\\n        staker = _staker;\\n        gauge = _gauge;\\n        rewardFactory = _rFactory;\\n    }\\n\\n    /// @notice Returns the length of the tokenList\\n    function tokenCount() external view returns (uint256) {\\n        return tokenList.length;\\n    }\\n\\n    /// @notice Claims registered reward tokens\\n    function claimRewards() external {\\n        if (msg.sender != operator) {\\n            revert Unauthorized();\\n        }\\n        // this is updateable from v2 gauges now so must check each time.\\n        checkForNewRewardTokens();\\n\\n        // make sure we're redirected\\n        if (!hasRedirected) {\\n            IController(operator).setGaugeRedirect(pid);\\n            hasRedirected = true;\\n        }\\n\\n        if (hasBalRewards) {\\n            // claim rewards on gauge for staker\\n            // using reward_receiver so all rewards will be moved to this stash\\n            IController(operator).claimRewards(pid, gauge);\\n        }\\n\\n        // hook for reward pulls\\n        if (rewardHook != address(0)) {\\n            // solhint-disable-next-line\\n            try IRewardHook(rewardHook).onRewardClaim() {} catch {}\\n        }\\n    }\\n\\n    /// @notice Checks if the gauge rewards have changed\\n    function checkForNewRewardTokens() internal {\\n        for (uint256 i = 0; i < MAX_REWARDS; i++) {\\n            address token = IBalGauge(gauge).reward_tokens(i);\\n            if (token == address(0)) {\\n                break;\\n            }\\n            if (!hasBalRewards) {\\n                hasBalRewards = true;\\n            }\\n            setToken(token);\\n        }\\n    }\\n\\n    /// @notice Registers an extra reward token to be handled\\n    /// @param _token The reward token address\\n    /// @dev Used for any new incentive that is not directly on curve gauges\\n    function setExtraReward(address _token) external {\\n        // owner of booster can set extra rewards\\n        if (msg.sender != IController(operator).owner()) {\\n            revert Unauthorized();\\n        }\\n        setToken(_token);\\n    }\\n\\n    /// @notice Sets the reward hook address\\n    /// @param _hook The address of the reward hook\\n    function setRewardHook(address _hook) external {\\n        // owner of booster can set reward hook\\n        if (msg.sender != IController(operator).owner()) {\\n            revert Unauthorized();\\n        }\\n        rewardHook = _hook;\\n        emit RewardHookSet(_hook);\\n    }\\n\\n    /// @notice Replaces a token on the token list\\n    /// @param _token The address of the token\\n    function setToken(address _token) internal {\\n        TokenInfo storage t = tokenInfo[_token];\\n\\n        if (t.token == address(0)) {\\n            //set token address\\n            t.token = _token;\\n\\n            //check if BAL\\n            if (_token != bal) {\\n                //create new reward contract (for NON-BAL tokens only)\\n                (, , , address mainRewardContract, , ) = IController(operator)\\n                    .poolInfo(pid);\\n                address rewardContract = IRewardFactory(rewardFactory)\\n                    .createTokenRewards(\\n                        _token,\\n                        mainRewardContract,\\n                        address(this)\\n                    );\\n\\n                t.rewardAddress = rewardContract;\\n            }\\n            //add token to list of known rewards\\n            tokenList.push(_token);\\n        }\\n    }\\n\\n    /// @notice Sends all of the extra rewards to the reward contracts\\n    function processStash() external {\\n        if (msg.sender != operator) {\\n            revert Unauthorized();\\n        }\\n        uint256 tCount = tokenList.length;\\n        for (uint256 i = 0; i < tCount; i++) {\\n            TokenInfo storage t = tokenInfo[tokenList[i]];\\n            address token = t.token;\\n            if (token == address(0)) continue;\\n\\n            uint256 amount = IERC20(token).balanceOf(address(this));\\n            if (amount > 0) {\\n                historicalRewards[token] = historicalRewards[token] + amount;\\n                if (token == bal) {\\n                    //if BAL, send back to booster to distribute\\n                    IERC20(token).transfer(operator, amount);\\n                    continue;\\n                }\\n                //add to reward contract\\n                address rewards = t.rewardAddress;\\n                if (rewards == address(0)) continue;\\n                IERC20(token).transfer(rewards, amount);\\n                IRewards(rewards).queueNewRewards(amount);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2b4232f791c17a2cf2cb2cc934bacb3b4adeed73a420ceb4beafb48bfb3b460\",\"license\":\"MIT\"},\"contracts/utils/Interfaces.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.14;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IBalGauge {\\n    function deposit(uint256) external;\\n\\n    function balanceOf(address) external view returns (uint256);\\n\\n    function withdraw(uint256) external;\\n\\n    function claim_rewards() external;\\n\\n    function reward_tokens(uint256) external view returns (address);\\n\\n    function lp_token() external view returns (address);\\n}\\n\\ninterface IBalVoteEscrow {\\n    function create_lock(uint256, uint256) external;\\n\\n    function increase_amount(uint256) external;\\n\\n    function increase_unlock_time(uint256) external;\\n\\n    function withdraw() external;\\n\\n    function smart_wallet_checker() external view returns (address);\\n\\n    function balanceOf(address, uint256) external view returns (uint256);\\n\\n    function balanceOfAt(address, uint256) external view returns (uint256);\\n}\\n\\ninterface IWalletChecker {\\n    function check(address) external view returns (bool);\\n}\\n\\ninterface IVoting {\\n    function vote_for_gauge_weights(address, uint256) external;\\n}\\n\\ninterface IMinter {\\n    function mint(address) external;\\n}\\n\\ninterface IVoterProxy {\\n    function deposit(address _token, address _gauge) external;\\n\\n    function withdrawWethBal(address, uint256) external;\\n\\n    function withdraw(IERC20 _asset) external returns (uint256 balance);\\n\\n    function withdraw(\\n        address _token,\\n        address _gauge,\\n        uint256 _amount\\n    ) external;\\n\\n    function withdrawAll(address _token, address _gauge) external;\\n\\n    function createLock(uint256 _value, uint256 _unlockTime) external;\\n\\n    function increaseAmount(uint256 _value) external;\\n\\n    function increaseTime(uint256 _unlockTimestamp) external;\\n\\n    function release() external;\\n\\n    function claimBal(address _gauge) external returns (uint256);\\n\\n    function claimRewards(address _gauge) external;\\n\\n    function claimFees(address _distroContract, IERC20 _token)\\n        external\\n        returns (uint256);\\n\\n    function grantStashAccess(address _stash) external;\\n\\n    function delegateVotingPower(address _delegateTo) external;\\n\\n    function clearDelegate() external;\\n\\n    function voteMultipleGauges(\\n        address[] calldata _gauges,\\n        uint256[] calldata _weights\\n    ) external;\\n\\n    function balanceOfPool(address _gauge) external view returns (uint256);\\n\\n    function operator() external view returns (address);\\n\\n    function execute(\\n        address _to,\\n        uint256 _value,\\n        bytes calldata _data\\n    ) external returns (bool, bytes memory);\\n}\\n\\ninterface ISnapshotDelegateRegistry {\\n    function setDelegate(bytes32 id, address delegate) external;\\n\\n    function clearDelegate(bytes32 id) external;\\n}\\n\\ninterface IRewards {\\n    function stake(address, uint256) external;\\n\\n    function stakeFor(address, uint256) external;\\n\\n    function withdraw(address, uint256) external;\\n\\n    function exit(address) external;\\n\\n    function getReward(address) external;\\n\\n    function queueNewRewards(uint256) external;\\n\\n    function notifyRewardAmount(uint256) external;\\n\\n    function addExtraReward(address) external;\\n\\n    function stakingToken() external view returns (address);\\n\\n    function rewardToken() external view returns (address);\\n\\n    function earned(address account) external view returns (uint256);\\n}\\n\\ninterface IStash {\\n    function processStash() external;\\n\\n    function claimRewards() external;\\n\\n    function initialize(\\n        uint256 _pid,\\n        address _operator,\\n        address _staker,\\n        address _gauge,\\n        address _rewardFactory\\n    ) external;\\n}\\n\\ninterface IFeeDistro {\\n    /**\\n     * @notice Claims all pending distributions of the provided token for a user.\\n     * @dev It's not necessary to explicitly checkpoint before calling this function, it will ensure the FeeDistributor\\n     * is up to date before calculating the amount of tokens to be claimed.\\n     * @param user - The user on behalf of which to claim.\\n     * @param token - The ERC20 token address to be claimed.\\n     * @return The amount of `token` sent to `user` as a result of claiming.\\n     */\\n    function claimToken(address user, IERC20 token) external returns (uint256);\\n\\n    /**\\n     * @notice Claims a number of tokens on behalf of a user.\\n     * @dev A version of `claimToken` which supports claiming multiple `tokens` on behalf of `user`.\\n     * See `claimToken` for more details.\\n     * @param user - The user on behalf of which to claim.\\n     * @param tokens - An array of ERC20 token addresses to be claimed.\\n     * @return An array of the amounts of each token in `tokens` sent to `user` as a result of claiming.\\n     */\\n    function claimTokens(address user, IERC20[] calldata tokens)\\n        external\\n        returns (uint256[] memory);\\n}\\n\\ninterface ITokenMinter {\\n    function mint(address, uint256) external;\\n\\n    function burn(address, uint256) external;\\n}\\n\\ninterface IBaseRewardsPool {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address _account) external view returns (uint256);\\n}\\n\\ninterface IController {\\n    /// @notice returns the number of pools\\n    function poolLength() external returns (uint256);\\n\\n    /// @notice Deposits an amount of LP token into a specific pool,\\n    /// mints reward and optionally tokens and  stakes them into the reward contract\\n    /// @dev Sender must approve LP tokens to Controller smart contract\\n    /// @param _pid The pool id to deposit lp tokens into\\n    /// @param _amount The amount of lp tokens to be deposited\\n    /// @param _stake bool for wheather the tokens should be staked\\n    function deposit(\\n        uint256 _pid,\\n        uint256 _amount,\\n        bool _stake\\n    ) external;\\n\\n    /// @notice Deposits and stakes all LP tokens\\n    /// @dev Sender must approve LP tokens to Controller smart contract\\n    /// @param _pid The pool id to deposit lp tokens into\\n    /// @param _stake bool for wheather the tokens should be staked\\n    function depositAll(uint256 _pid, bool _stake) external;\\n\\n    /// @notice Withdraws lp tokens from the pool\\n    /// @param _pid The pool id to withdraw lp tokens from\\n    /// @param _amount amount of LP tokens to withdraw\\n    function withdraw(uint256 _pid, uint256 _amount) external;\\n\\n    /// @notice Withdraws all of the lp tokens in the pool\\n    /// @param _pid The pool id to withdraw lp tokens from\\n    function withdrawAll(uint256 _pid) external;\\n\\n    /// @notice Withdraws LP tokens and sends them to a specified address\\n    /// @param _pid The pool id to deposit lp tokens into\\n    /// @param _amount amount of LP tokens to withdraw\\n    function withdrawTo(\\n        uint256 _pid,\\n        uint256 _amount,\\n        address _to\\n    ) external;\\n\\n    /// @notice Withdraws `amount` of unlocked WethBal to treasury\\n    /// @param _amount amount of tokens to withdraw\\n    function withdrawUnlockedWethBal(uint256 _amount) external;\\n\\n    /// @notice Claims rewards from a pool and disperses them to the rewards contract\\n    /// @param _pid the id of the pool where lp tokens are held\\n    function earmarkRewards(uint256 _pid) external;\\n\\n    /// @notice Claims fees from the Balancer's fee distributor contract and transfers the tokens into the rewards contract\\n    function earmarkFees() external;\\n\\n    function isShutdown() external view returns (bool);\\n\\n    function poolInfo(uint256)\\n        external\\n        view\\n        returns (\\n            address,\\n            address,\\n            address,\\n            address,\\n            address,\\n            bool\\n        );\\n\\n    function claimRewards(uint256, address) external;\\n\\n    function setGaugeRedirect(uint256 _pid) external;\\n\\n    function owner() external returns (address);\\n}\\n\\ninterface ICrvDeposit {\\n    function deposit(uint256, bool) external;\\n\\n    function lockIncentive() external view returns (uint256);\\n}\\n\\ninterface IRewardFactory {\\n    function grantRewardStashAccess(address) external;\\n\\n    function createBalRewards(uint256, address) external returns (address);\\n\\n    function createTokenRewards(\\n        address,\\n        address,\\n        address\\n    ) external returns (address);\\n\\n    function activeRewardCount(address) external view returns (uint256);\\n\\n    function addActiveReward(address, uint256) external returns (bool);\\n\\n    function removeActiveReward(address, uint256) external returns (bool);\\n}\\n\\ninterface IStashFactory {\\n    function createStash(\\n        uint256,\\n        address,\\n        address\\n    ) external returns (address);\\n}\\n\\ninterface ITokenFactory {\\n    function createDepositToken(address) external returns (address);\\n}\\n\\ninterface IPools {\\n    function addPool(address, address) external returns (bool);\\n\\n    function forceAddPool(address, address) external returns (bool);\\n\\n    function shutdownPool(uint256) external returns (bool);\\n\\n    function poolInfo(uint256)\\n        external\\n        view\\n        returns (\\n            address,\\n            address,\\n            address,\\n            address,\\n            address,\\n            bool\\n        );\\n\\n    function poolLength() external view returns (uint256);\\n\\n    function gaugeMap(address) external view returns (bool);\\n\\n    function setPoolManager(address _poolM) external;\\n}\\n\\ninterface IVestedEscrow {\\n    function fund(address[] calldata _recipient, uint256[] calldata _amount)\\n        external\\n        returns (bool);\\n}\\n\\ninterface GaugeController {\\n    function gauge_types(address _addr) external returns (int128);\\n}\\n\\ninterface LiquidityGauge {\\n    function integrate_fraction(address _address) external returns (uint256);\\n\\n    function user_checkpoint(address _address) external returns (bool);\\n}\\n\\ninterface IProxyFactory {\\n    function clone(address _target) external returns (address);\\n}\\n\\ninterface IRewardHook {\\n    function onRewardClaim() external;\\n}\\n\",\"keccak256\":\"0x8b7e0f0261e1c084438eac5a14d2e6d09bcbee4e4d1d7ea33eb4c508f616eb0e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b5060405161148c38038061148c83398101604081905261002f91610040565b6001600160a01b0316608052610070565b60006020828403121561005257600080fd5b81516001600160a01b038116811461006957600080fd5b9392505050565b6080516113f3610099600039600081816101cd01528181610b500152610ded01526113f36000f3fe608060405234801561001057600080fd5b50600436106101365760003560e01c80635ebaf1db116100b2578063ca8b017611610081578063e0a5095111610066578063e0a50951146102f1578063f106845414610317578063f5dab7111461032057600080fd5b8063ca8b0176146102c9578063cb00aa73146102d157600080fd5b80635ebaf1db146102645780639ead7222146102845780639f181b5e14610297578063a6f19c84146102a957600080fd5b8063372500ab1161010957806344214ecf116100ee57806344214ecf146101ef578063570ca7351461020f5780635afffef11461022f57600080fd5b8063372500ab146101c05780633d79d1c8146101c857600080fd5b80630d5225de1461013b5780632223686f14610150578063245e4bf0146101635780633641e083146101ad575b600080fd5b61014e610149366004611182565b61038e565b005b61014e61015e366004611182565b6104fe565b6004546101839073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b61014e6101bb3660046111a6565b610601565b61014e6106ca565b6101837f000000000000000000000000000000000000000000000000000000000000000081565b6005546101839073ffffffffffffffffffffffffffffffffffffffff1681565b6001546101839073ffffffffffffffffffffffffffffffffffffffff1681565b6005546102549074010000000000000000000000000000000000000000900460ff1681565b60405190151581526020016101a4565b6002546101839073ffffffffffffffffffffffffffffffffffffffff1681565b61018361029236600461120e565b610963565b6008545b6040519081526020016101a4565b6003546101839073ffffffffffffffffffffffffffffffffffffffff1681565b61014e61099a565b61029b6102df366004611182565b60066020526000908152604090205481565b600554610254907501000000000000000000000000000000000000000000900460ff1681565b61029b60005481565b61036161032e366004611182565b6007602052600090815260409020805460019091015473ffffffffffffffffffffffffffffffffffffffff918216911682565b6040805173ffffffffffffffffffffffffffffffffffffffff9384168152929091166020830152016101a4565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b81526004016020604051808303816000875af11580156103fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104219190611227565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610485576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600580547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040519081527fd6665c7fd9e04cb4f58d8bd09095b335663c64fe4e75463435fe373a2da6337c9060200160405180910390a150565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b81526004016020604051808303816000875af115801561056d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105919190611227565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146105f5576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6105fe81610d7b565b50565b60035473ffffffffffffffffffffffffffffffffffffffff1615610651576040517f0dc149f000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600094909455600180547fffffffffffffffffffffffff000000000000000000000000000000000000000090811673ffffffffffffffffffffffffffffffffffffffff95861617909155600280548216938516939093179092556003805483169184169190911790556004805490911691909216179055565b60015473ffffffffffffffffffffffffffffffffffffffff16331461071b576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61072361101f565b60055474010000000000000000000000000000000000000000900460ff16610812576001546000546040517f9123d40400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90921691639123d404916107a09160040190815260200190565b600060405180830381600087803b1580156107ba57600080fd5b505af11580156107ce573d6000803e3d6000fd5b5050600580547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff167401000000000000000000000000000000000000000017905550505b6005547501000000000000000000000000000000000000000000900460ff16156108ca576001546000546003546040517f6c7b69cb000000000000000000000000000000000000000000000000000000008152600481019290925273ffffffffffffffffffffffffffffffffffffffff908116602483015290911690636c7b69cb90604401600060405180830381600087803b1580156108b157600080fd5b505af11580156108c5573d6000803e3d6000fd5b505050505b60055473ffffffffffffffffffffffffffffffffffffffff161561096157600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632663fcfc6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561095257600080fd5b505af19250505080156105fe57505b565b6008818154811061097357600080fd5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b60015473ffffffffffffffffffffffffffffffffffffffff1633146109eb576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60085460005b81811015610d775760006007600060088481548110610a1257610a12611244565b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff9081168452908301939093526040909101902080549092501680610a5a575050610d65565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009073ffffffffffffffffffffffffffffffffffffffff8316906370a0823190602401602060405180830381865afa158015610ac7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aeb9190611273565b90508015610d615773ffffffffffffffffffffffffffffffffffffffff8216600090815260066020526040902054610b249082906112bb565b73ffffffffffffffffffffffffffffffffffffffff8084166000818152600660205260409020929092557f0000000000000000000000000000000000000000000000000000000000000000169003610c1c576001546040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9182166004820152602481018390529083169063a9059cbb906044016020604051808303816000875af1158015610bef573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c1391906112e8565b50505050610d65565b600183015473ffffffffffffffffffffffffffffffffffffffff1680610c455750505050610d65565b6040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82811660048301526024820184905284169063a9059cbb906044016020604051808303816000875af1158015610cba573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cde91906112e8565b506040517f590a41f50000000000000000000000000000000000000000000000000000000081526004810183905273ffffffffffffffffffffffffffffffffffffffff82169063590a41f590602401600060405180830381600087803b158015610d4757600080fd5b505af1158015610d5b573d6000803e3d6000fd5b50505050505b5050505b80610d6f81611303565b9150506109f1565b5050565b73ffffffffffffffffffffffffffffffffffffffff80821660009081526007602052604090208054909116610d775780547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83811691821783557f00000000000000000000000000000000000000000000000000000000000000001614610fa957600154600080546040517f1526fe27000000000000000000000000000000000000000000000000000000008152919273ffffffffffffffffffffffffffffffffffffffff1691631526fe2791610e6e9160040190815260200190565b60c060405180830381865afa158015610e8b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eaf919061133b565b5050600480546040517f2f1b327100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8a811693820193909352828416602482015230604482015292965060009550169250632f1b327191506064016020604051808303816000875af1158015610f3b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f5f9190611227565b6001840180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff9290921691909117905550505b600880546001810182556000919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee301805473ffffffffffffffffffffffffffffffffffffffff84167fffffffffffffffffffffffff00000000000000000000000000000000000000009091161790555050565b60005b60088110156105fe576003546040517f54c49fe90000000000000000000000000000000000000000000000000000000081526004810183905260009173ffffffffffffffffffffffffffffffffffffffff16906354c49fe990602401602060405180830381865afa15801561109b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110bf9190611227565b905073ffffffffffffffffffffffffffffffffffffffff81166110e0575050565b6005547501000000000000000000000000000000000000000000900460ff1661114457600580547fffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff1675010000000000000000000000000000000000000000001790555b61114d81610d7b565b508061115881611303565b915050611022565b73ffffffffffffffffffffffffffffffffffffffff811681146105fe57600080fd5b60006020828403121561119457600080fd5b813561119f81611160565b9392505050565b600080600080600060a086880312156111be57600080fd5b8535945060208601356111d081611160565b935060408601356111e081611160565b925060608601356111f081611160565b9150608086013561120081611160565b809150509295509295909350565b60006020828403121561122057600080fd5b5035919050565b60006020828403121561123957600080fd5b815161119f81611160565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006020828403121561128557600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082198211156112ce576112ce61128c565b500190565b805180151581146112e357600080fd5b919050565b6000602082840312156112fa57600080fd5b61119f826112d3565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036113345761133461128c565b5060010190565b60008060008060008060c0878903121561135457600080fd5b865161135f81611160565b602088015190965061137081611160565b604088015190955061138181611160565b606088015190945061139281611160565b60808801519093506113a381611160565b91506113b160a088016112d3565b9050929550929550929556fea26469706673582212202dce1217a4c0028bebfe185ce7667a0b2ca0df4d6f4d58a07db110637a07a52064736f6c634300080e0033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "setExtraReward(address)": {
        "details": "Used for any new incentive that is not directly on curve gauges",
        "params": {
          "_token": "The reward token address"
        }
      },
      "setRewardHook(address)": {
        "params": {
          "_hook": "The address of the reward hook"
        }
      }
    },
    "title": "ExtraRewardStash",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "claimRewards()": {
        "notice": "Claims registered reward tokens"
      },
      "processStash()": {
        "notice": "Sends all of the extra rewards to the reward contracts"
      },
      "setExtraReward(address)": {
        "notice": "Registers an extra reward token to be handled"
      },
      "setRewardHook(address)": {
        "notice": "Sets the reward hook address"
      },
      "tokenCount()": {
        "notice": "Returns the length of the tokenList"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5318,
        "contract": "contracts/ExtraRewardStash.sol:ExtraRewardStash",
        "label": "pid",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 5320,
        "contract": "contracts/ExtraRewardStash.sol:ExtraRewardStash",
        "label": "operator",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 5322,
        "contract": "contracts/ExtraRewardStash.sol:ExtraRewardStash",
        "label": "staker",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 5324,
        "contract": "contracts/ExtraRewardStash.sol:ExtraRewardStash",
        "label": "gauge",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 5326,
        "contract": "contracts/ExtraRewardStash.sol:ExtraRewardStash",
        "label": "rewardFactory",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 5328,
        "contract": "contracts/ExtraRewardStash.sol:ExtraRewardStash",
        "label": "rewardHook",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 5330,
        "contract": "contracts/ExtraRewardStash.sol:ExtraRewardStash",
        "label": "hasRedirected",
        "offset": 20,
        "slot": "5",
        "type": "t_bool"
      },
      {
        "astId": 5332,
        "contract": "contracts/ExtraRewardStash.sol:ExtraRewardStash",
        "label": "hasBalRewards",
        "offset": 21,
        "slot": "5",
        "type": "t_bool"
      },
      {
        "astId": 5336,
        "contract": "contracts/ExtraRewardStash.sol:ExtraRewardStash",
        "label": "historicalRewards",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 5346,
        "contract": "contracts/ExtraRewardStash.sol:ExtraRewardStash",
        "label": "tokenInfo",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_struct(TokenInfo)5341_storage)"
      },
      {
        "astId": 5349,
        "contract": "contracts/ExtraRewardStash.sol:ExtraRewardStash",
        "label": "tokenList",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(TokenInfo)5341_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ExtraRewardStash.TokenInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenInfo)5341_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(TokenInfo)5341_storage": {
        "encoding": "inplace",
        "label": "struct ExtraRewardStash.TokenInfo",
        "members": [
          {
            "astId": 5338,
            "contract": "contracts/ExtraRewardStash.sol:ExtraRewardStash",
            "label": "token",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 5340,
            "contract": "contracts/ExtraRewardStash.sol:ExtraRewardStash",
            "label": "rewardAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}