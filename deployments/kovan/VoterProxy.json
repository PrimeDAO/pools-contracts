{
  "address": "0xE60E9D00C30A46A661171C068B6cd2b0Da5B686c",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_mintr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_bal",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_wethBal",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_veBal",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_gaugeController",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "BadInput",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NeedsShutdown",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Unauthorized",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newDepositor",
          "type": "address"
        }
      ],
      "name": "DepositorChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newOperator",
          "type": "address"
        }
      ],
      "name": "OperatorChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnerChanged",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "bal",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gauge",
          "type": "address"
        }
      ],
      "name": "balanceOfPool",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gauge",
          "type": "address"
        }
      ],
      "name": "claimBal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_distroContract",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "claimFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gauge",
          "type": "address"
        }
      ],
      "name": "claimRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_unlockTime",
          "type": "uint256"
        }
      ],
      "name": "createLock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_gauge",
          "type": "address"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "execute",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gaugeController",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "increaseAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "increaseTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "operator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "release",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_depositor",
          "type": "address"
        }
      ],
      "name": "setDepositor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        }
      ],
      "name": "setOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newOwner",
          "type": "address"
        }
      ],
      "name": "setOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stash",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_status",
          "type": "bool"
        }
      ],
      "name": "setStashAccess",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "veBal",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_voteId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_votingAddress",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_support",
          "type": "bool"
        }
      ],
      "name": "vote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gauge",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_weight",
          "type": "uint256"
        }
      ],
      "name": "voteGaugeWeight",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_gauges",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_weights",
          "type": "uint256[]"
        }
      ],
      "name": "voteMultipleGauges",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wethBal",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_gauge",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_gauge",
          "type": "address"
        }
      ],
      "name": "withdrawAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_gauge",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawWethBal",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x14dc005dc7669f019ec906d33fc612f2945f58b50918cb1b37e5d6f1b0c39f81",
  "receipt": {
    "to": null,
    "from": "0xbF63Afb77A49159b4502E91CD3f4EbDcc161431f",
    "contractAddress": "0xE60E9D00C30A46A661171C068B6cd2b0Da5B686c",
    "transactionIndex": 1,
    "gasUsed": "2120868",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000100000000000010200000080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000800000000000000000000000000000000000000000000000000800000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000800000000000000000000000000000000010000000000000",
    "blockHash": "0xb052b2e4e6c35ff0cec7fdbd3a1c7ee686d0d1fc96da1667e7ce5864e0bc4438",
    "transactionHash": "0x14dc005dc7669f019ec906d33fc612f2945f58b50918cb1b37e5d6f1b0c39f81",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 32151442,
        "transactionHash": "0x14dc005dc7669f019ec906d33fc612f2945f58b50918cb1b37e5d6f1b0c39f81",
        "address": "0xDC2EcFDf2688f92c85064bE0b929693ACC6dBcA6",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000e60e9d00c30a46a661171c068b6cd2b0da5b686c",
          "0x0000000000000000000000000ba4d28a89b0ab0c48253f4f36b204de24354651"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 10,
        "blockHash": "0xb052b2e4e6c35ff0cec7fdbd3a1c7ee686d0d1fc96da1667e7ce5864e0bc4438"
      }
    ],
    "blockNumber": 32151442,
    "cumulativeGasUsed": "2394094",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xe1008f2871f5f5c3da47f806deba3cd83fe0e55b",
    "0xcb355677e36f390ccc4a5d4beadfbf1eb2071c81",
    "0xdc2ecfdf2688f92c85064be0b929693acc6dbca6",
    "0x0BA4d28a89b0aB0c48253f4f36B204DE24354651",
    "0x28bE1a58A534B281c3A22df28d3720323bfF331D"
  ],
  "solcInputHash": "e3e766566fe34d0ad4122b4efba89aaf",
  "metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mintr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bal\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wethBal\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_veBal\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gaugeController\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"BadInput\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NeedsShutdown\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newDepositor\",\"type\":\"address\"}],\"name\":\"DepositorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOperator\",\"type\":\"address\"}],\"name\":\"OperatorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"bal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"}],\"name\":\"balanceOfPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"}],\"name\":\"claimBal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_distroContract\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"claimFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"}],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_unlockTime\",\"type\":\"uint256\"}],\"name\":\"createLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gaugeController\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"increaseAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"increaseTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_depositor\",\"type\":\"address\"}],\"name\":\"setDepositor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stash\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setStashAccess\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"veBal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_voteId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_votingAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_support\",\"type\":\"bool\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_weight\",\"type\":\"uint256\"}],\"name\":\"voteGaugeWeight\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_gauges\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_weights\",\"type\":\"uint256[]\"}],\"name\":\"voteMultipleGauges\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wethBal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"}],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawWethBal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"based on Convex's VoterProxy smart contract      https://etherscan.io/address/0x989AEb4d175e16225E39E87d0D97A3360524AD80#code\",\"kind\":\"dev\",\"methods\":{\"balanceOfPool(address)\":{\"params\":{\"_gauge\":\"The gauge to check\"},\"returns\":{\"_0\":\"uint256 balance\"}},\"claimBal(address)\":{\"params\":{\"_gauge\":\"The gauge to claim from\"},\"returns\":{\"_0\":\"amount claimed\"}},\"claimFees(address,address)\":{\"params\":{\"_distroContract\":\"The distro contract to claim from\",\"_token\":\"The token to claim from\"},\"returns\":{\"_0\":\"uint256 amaunt claimed\"}},\"createLock(uint256,uint256)\":{\"params\":{\"_unlockTime\":\"Epoch time when tokens unlock, rounded down to whole weeks\",\"_value\":\"The amount of BAL tokens to lock\"}},\"deposit(address,address)\":{\"params\":{\"_gauge\":\"The gauge to deposit to\",\"_token\":\"The address of the LP token\"}},\"execute(address,uint256,bytes)\":{\"params\":{\"_data\":\"calldata\",\"_to\":\"The address to call\",\"_value\":\"The ETH value to send\"},\"returns\":{\"_0\":\"The result of the call (bool, result)\"}},\"increaseAmount(uint256)\":{\"params\":{\"_value\":\"The amount of veBal tokens to increase\"}},\"increaseTime(uint256)\":{\"params\":{\"_value\":\"New epoch time for unlocking\"}},\"release()\":{\"details\":\"Only possible if the lock has expired\"},\"setDepositor(address)\":{\"details\":\"Only the owner can change the depositor\",\"params\":{\"_depositor\":\"The new depositor of the contract\"}},\"setOperator(address)\":{\"details\":\"Only the owner can change the operator      Current operator must be shutdown before changing the operator      Or we can set operator to address(0)\",\"params\":{\"_operator\":\"The new operator of the contract\"}},\"setOwner(address)\":{\"params\":{\"_newOwner\":\"The new owner of the contract\"}},\"setStashAccess(address,bool)\":{\"params\":{\"_stash\":\"The address of the stash\",\"_status\":\"The new access status\"}},\"voteGaugeWeight(address,uint256)\":{\"params\":{\"_gauge\":\"The gauge to vote for\",\"_weight\":\"The weight for a gauge in basis points (units of 0.01%). Minimal is 0.01%. Ignored if 0\"}},\"voteMultipleGauges(address[],uint256[])\":{\"details\":\"Input arrays must have same length\",\"params\":{\"_gauges\":\"The gauges to vote for\",\"_weights\":\"The weights for a gauge in basis points (units of 0.01%). Minimal is 0.01%. Ignored if 0\"}},\"withdraw(address)\":{\"params\":{\"_asset\":\"ERC20 token address\"},\"returns\":{\"_0\":\"amount of tokens withdrawn\"}},\"withdraw(address,address,uint256)\":{\"details\":\"If this contract doesn't have enough tokens it will withdraw them from gauge\",\"params\":{\"_amount\":\"The amount of tokens to withdraw\",\"_gauge\":\"The gauge to withdraw from\",\"_token\":\"ERC20 token address\"}},\"withdrawAll(address,address)\":{\"details\":\"If this contract doesn't have enough tokens it will withdraw them from gauge\",\"params\":{\"_gauge\":\"The gauge to withdraw from\",\"_token\":\"ERC20 token address\"}},\"withdrawWethBal(address,address,uint256)\":{\"details\":\"If contract doesn't have asked _amount tokens it will withdraw all tokens\",\"params\":{\"_amount\":\"The amount to withdraw\",\"_gauge\":\"The gauge\",\"_to\":\"send to address\"}}},\"title\":\"VoterProxy contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"balanceOfPool(address)\":{\"notice\":\"Balance of gauge\"},\"claimBal(address)\":{\"notice\":\"Claims VeBal tokens\"},\"claimFees(address,address)\":{\"notice\":\"Claims fees\"},\"claimRewards(address)\":{\"notice\":\"Claims rewards_gauge The gauge to claim from\"},\"createLock(uint256,uint256)\":{\"notice\":\"Locks BAL tokens to veBal\"},\"deposit(address,address)\":{\"notice\":\"Used to deposit tokens\"},\"execute(address,uint256,bytes)\":{\"notice\":\"Executes a call to `_to` with calldata `_data`\"},\"increaseAmount(uint256)\":{\"notice\":\"Increases amount of veBal tokens without modifying the unlock time\"},\"increaseTime(uint256)\":{\"notice\":\"Extend the unlock time\"},\"release()\":{\"notice\":\"Redeems veBal tokens\"},\"setDepositor(address)\":{\"notice\":\"Changes the depositor of the contract\"},\"setOperator(address)\":{\"notice\":\"Changes the operator of the contract\"},\"setOwner(address)\":{\"notice\":\"Used to change the owner of the contract\"},\"setStashAccess(address,bool)\":{\"notice\":\"Sets `_stash` access to `_status`\"},\"voteGaugeWeight(address,uint256)\":{\"notice\":\"Votes for gauge weight\"},\"voteMultipleGauges(address[],uint256[])\":{\"notice\":\"Votes for multiple gauge weights\"},\"withdraw(address)\":{\"notice\":\"Used for pulling extra incentive reward tokens out\"},\"withdraw(address,address,uint256)\":{\"notice\":\"Used for withdrawing tokens\"},\"withdrawAll(address,address)\":{\"notice\":\"Used for withdrawing tokens\"},\"withdrawWethBal(address,address,uint256)\":{\"notice\":\"Used for withdrawing wethBal tokens to address\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/VoterProxy.sol\":\"VoterProxy\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"contracts/VoterProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.14;\\n\\nimport \\\"./utils/Interfaces.sol\\\";\\nimport \\\"./utils/MathUtil.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @title VoterProxy contract\\n/// @dev based on Convex's VoterProxy smart contract\\n///      https://etherscan.io/address/0x989AEb4d175e16225E39E87d0D97A3360524AD80#code\\ncontract VoterProxy is IVoterProxy {\\n    using MathUtil for uint256;\\n\\n    event OperatorChanged(address newOperator);\\n    event DepositorChanged(address newDepositor);\\n    event OwnerChanged(address newOwner);\\n\\n    error BadInput();\\n    error Unauthorized();\\n    error NeedsShutdown(); // Current operator must be shutdown before changing the operator\\n\\n    address public immutable mintr;\\n    address public immutable bal; // Reward token\\n    address public immutable wethBal; // Staking token\\n    address public immutable veBal; // veBal\\n    address public immutable gaugeController;\\n\\n    address public owner; // MultiSig\\n    address public operator; // Controller smart contract\\n    address public depositor; // BalDepositor smart contract\\n\\n    mapping(address => bool) private stashAccess; // stash -> canAccess\\n    mapping(address => bool) private protectedTokens; // token -> protected\\n\\n    constructor(\\n        address _mintr,\\n        address _bal,\\n        address _wethBal,\\n        address _veBal,\\n        address _gaugeController\\n    ) {\\n        mintr = _mintr;\\n        bal = _bal;\\n        wethBal = _wethBal;\\n        veBal = _veBal;\\n        gaugeController = _gaugeController;\\n        owner = msg.sender;\\n        IERC20(_wethBal).approve(_veBal, type(uint256).max);\\n    }\\n\\n    modifier onlyOwner() {\\n        if (msg.sender != owner) {\\n            revert Unauthorized();\\n        }\\n        _;\\n    }\\n\\n    modifier onlyOperator() {\\n        if (msg.sender != operator) {\\n            revert Unauthorized();\\n        }\\n        _;\\n    }\\n\\n    modifier onlyDepositor() {\\n        if (msg.sender != depositor) {\\n            revert Unauthorized();\\n        }\\n        _;\\n    }\\n\\n    /// @notice Balance of gauge\\n    /// @param _gauge The gauge to check\\n    /// @return uint256 balance\\n    function balanceOfPool(address _gauge) public view returns (uint256) {\\n        return IBalGauge(_gauge).balanceOf(address(this));\\n    }\\n\\n    /// @notice Used to change the owner of the contract\\n    /// @param _newOwner The new owner of the contract\\n    function setOwner(address _newOwner) external onlyOwner {\\n        owner = _newOwner;\\n        emit OwnerChanged(_newOwner);\\n    }\\n\\n    /// @notice Changes the operator of the contract\\n    /// @dev Only the owner can change the operator\\n    ///      Current operator must be shutdown before changing the operator\\n    ///      Or we can set operator to address(0)\\n    /// @param _operator The new operator of the contract\\n    function setOperator(address _operator) external onlyOwner {\\n        if (operator != address(0) && !IDeposit(operator).isShutdown()) {\\n            revert NeedsShutdown();\\n        }\\n        operator = _operator;\\n        emit OperatorChanged(_operator);\\n    }\\n\\n    /// @notice Changes the depositor of the contract\\n    /// @dev Only the owner can change the depositor\\n    /// @param _depositor The new depositor of the contract\\n    function setDepositor(address _depositor) external onlyOwner {\\n        depositor = _depositor;\\n        emit DepositorChanged(_depositor);\\n    }\\n\\n    /// @notice Sets `_stash` access to `_status`\\n    /// @param _stash The address of the stash\\n    /// @param _status The new access status\\n    function setStashAccess(address _stash, bool _status)\\n        external\\n        onlyOperator\\n    {\\n        if (_stash != address(0)) {\\n            stashAccess[_stash] = _status;\\n        }\\n    }\\n\\n    /// @notice Used to deposit tokens\\n    /// @param _token The address of the LP token\\n    /// @param _gauge The gauge to deposit to\\n    function deposit(address _token, address _gauge) external onlyOperator {\\n        if (protectedTokens[_token] == false) {\\n            protectedTokens[_token] = true;\\n        }\\n        if (protectedTokens[_gauge] == false) {\\n            protectedTokens[_gauge] = true;\\n        }\\n\\n        uint256 balance = IERC20(_token).balanceOf(address(this));\\n        if (balance > 0) {\\n            IERC20(_token).approve(_gauge, balance);\\n            IBalGauge(_gauge).deposit(balance);\\n        }\\n    }\\n\\n    /// @notice Used for withdrawing tokens\\n    /// @dev If this contract doesn't have enough tokens it will withdraw them from gauge\\n    /// @param _token ERC20 token address\\n    /// @param _gauge The gauge to withdraw from\\n    /// @param _amount The amount of tokens to withdraw\\n    function withdraw(\\n        address _token,\\n        address _gauge,\\n        uint256 _amount\\n    ) public onlyOperator {\\n        uint256 _balance = IERC20(_token).balanceOf(address(this));\\n\\n        if (_balance < _amount) {\\n            IBalGauge(_gauge).withdraw(_amount - _balance);\\n        }\\n\\n        IERC20(_token).transfer(msg.sender, _amount);\\n    }\\n\\n    function vote(\\n        uint256 _voteId,\\n        address _votingAddress,\\n        bool _support\\n    ) external onlyOperator {\\n        IVoting(_votingAddress).vote(_voteId, _support, false);\\n    }\\n\\n    /// @notice Votes for gauge weight\\n    /// @param _gauge The gauge to vote for\\n    /// @param _weight The weight for a gauge in basis points (units of 0.01%). Minimal is 0.01%. Ignored if 0\\n    function voteGaugeWeight(address _gauge, uint256 _weight)\\n        external\\n        onlyOperator\\n    {\\n        IVoting(gaugeController).vote_for_gauge_weights(_gauge, _weight);\\n    }\\n\\n    /// @notice Votes for multiple gauge weights\\n    /// @dev Input arrays must have same length\\n    /// @param _gauges The gauges to vote for\\n    /// @param _weights The weights for a gauge in basis points (units of 0.01%). Minimal is 0.01%. Ignored if 0\\n    function voteMultipleGauges(\\n        address[] calldata _gauges,\\n        uint256[] calldata _weights\\n    ) external onlyOperator {\\n        if (_gauges.length != _weights.length) {\\n            revert BadInput();\\n        }\\n        for (uint256 i = 0; i < _gauges.length; i = i.unsafeInc()) {\\n            IVoting(gaugeController).vote_for_gauge_weights(\\n                _gauges[i],\\n                _weights[i]\\n            );\\n        }\\n    }\\n\\n    /// @notice Claims VeBal tokens\\n    /// @param _gauge The gauge to claim from\\n    /// @return amount claimed\\n    function claimBal(address _gauge) external onlyOperator returns (uint256) {\\n        uint256 _balance;\\n\\n        try IMinter(mintr).mint(_gauge) {\\n            _balance = IERC20(bal).balanceOf(address(this));\\n            IERC20(bal).transfer(operator, _balance);\\n            //solhint-disable-next-line\\n        } catch {}\\n\\n        return _balance;\\n    }\\n\\n    /// @notice Claims rewards\\n    /// @notice _gauge The gauge to claim from\\n    function claimRewards(address _gauge) external onlyOperator {\\n        IBalGauge(_gauge).claim_rewards();\\n    }\\n\\n    /// @notice Claims fees\\n    /// @param _distroContract The distro contract to claim from\\n    /// @param _token The token to claim from\\n    /// @return uint256 amaunt claimed\\n    function claimFees(address _distroContract, IERC20 _token)\\n        external\\n        onlyOperator\\n        returns (uint256)\\n    {\\n        IFeeDistro(_distroContract).claimToken(address(this), _token);\\n        uint256 _balance = _token.balanceOf(address(this));\\n        _token.transfer(operator, _balance);\\n        return _balance;\\n    }\\n\\n    /// @notice Executes a call to `_to` with calldata `_data`\\n    /// @param _to The address to call\\n    /// @param _value The ETH value to send\\n    /// @param _data calldata\\n    /// @return The result of the call (bool, result)\\n    function execute(\\n        address _to,\\n        uint256 _value,\\n        bytes calldata _data\\n    ) external onlyOperator returns (bool, bytes memory) {\\n        // solhint-disable-next-line\\n        (bool success, bytes memory result) = _to.call{value: _value}(_data);\\n\\n        return (success, result);\\n    }\\n\\n    /// @notice Locks BAL tokens to veBal\\n    /// @param _value The amount of BAL tokens to lock\\n    /// @param _unlockTime Epoch time when tokens unlock, rounded down to whole weeks\\n    function createLock(uint256 _value, uint256 _unlockTime)\\n        external\\n        onlyDepositor\\n    {\\n        IBalVoteEscrow(veBal).create_lock(_value, _unlockTime);\\n    }\\n\\n    /// @notice Increases amount of veBal tokens without modifying the unlock time\\n    /// @param _value The amount of veBal tokens to increase\\n    function increaseAmount(uint256 _value) external onlyDepositor {\\n        IBalVoteEscrow(veBal).increase_amount(_value);\\n    }\\n\\n    /// @notice Extend the unlock time\\n    /// @param _value New epoch time for unlocking\\n    function increaseTime(uint256 _value) external onlyDepositor {\\n        IBalVoteEscrow(veBal).increase_unlock_time(_value);\\n    }\\n\\n    /// @notice Redeems veBal tokens\\n    /// @dev Only possible if the lock has expired\\n    function release() external onlyDepositor {\\n        IBalVoteEscrow(veBal).withdraw();\\n    }\\n\\n    /// @notice Used for pulling extra incentive reward tokens out\\n    /// @param _asset ERC20 token address\\n    /// @return amount of tokens withdrawn\\n    function withdraw(IERC20 _asset) external returns (uint256) {\\n        if (!stashAccess[msg.sender]) {\\n            revert Unauthorized();\\n        }\\n\\n        if (protectedTokens[address(_asset)]) {\\n            return 0;\\n        }\\n\\n        uint256 balance = _asset.balanceOf(address(this));\\n        _asset.transfer(msg.sender, balance);\\n        return balance;\\n    }\\n\\n    /// @notice Used for withdrawing tokens\\n    /// @dev If this contract doesn't have enough tokens it will withdraw them from gauge\\n    /// @param _token ERC20 token address\\n    /// @param _gauge The gauge to withdraw from\\n    function withdrawAll(address _token, address _gauge) external {\\n        // withdraw has authorization check, so we don't need to check here\\n        uint256 amount = balanceOfPool(_gauge) +\\n            (IERC20(_token).balanceOf(address(this)));\\n        withdraw(_token, _gauge, amount);\\n    }\\n\\n    /// @notice Used for withdrawing wethBal tokens to address\\n    /// @dev If contract doesn't have asked _amount tokens it will withdraw all tokens\\n    /// @param _to send to address\\n    /// @param _gauge The gauge\\n    /// @param _amount The amount to withdraw\\n    function withdrawWethBal(\\n        address _to,\\n        address _gauge,\\n        uint256 _amount\\n    ) public returns (bool) {\\n        require(msg.sender == operator, \\\"!auth\\\");\\n        IBalVoteEscrow(veBal).withdraw();\\n        uint256 _balance = IBalVoteEscrow(veBal).balanceOf(address(this), 0);\\n        if (_balance < _amount) {\\n            _amount = _balance;\\n            IBalVoteEscrow(veBal).withdraw();\\n        }\\n        IERC20(wethBal).transfer(_to, _amount);\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0x84fdefec7e23118738a5182742607dffd8f42f37507e178d9f0174d9859037a9\",\"license\":\"MIT\"},\"contracts/utils/Interfaces.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.14;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IBalGauge {\\n    function deposit(uint256) external;\\n\\n    function balanceOf(address) external view returns (uint256);\\n\\n    function withdraw(uint256) external;\\n\\n    function claim_rewards() external;\\n\\n    function reward_tokens(uint256) external view returns (address);\\n\\n    function lp_token() external view returns (address);\\n}\\n\\ninterface IBalVoteEscrow {\\n    function create_lock(uint256, uint256) external;\\n\\n    function increase_amount(uint256) external;\\n\\n    function increase_unlock_time(uint256) external;\\n\\n    function withdraw() external;\\n\\n    function smart_wallet_checker() external view returns (address);\\n\\n    function balanceOf(address, uint256) external view returns (uint256);\\n\\n    function balanceOfAt(address, uint256) external view returns (uint256);\\n}\\n\\ninterface IWalletChecker {\\n    function check(address) external view returns (bool);\\n}\\n\\ninterface IVoting {\\n    function vote(\\n        uint256,\\n        bool,\\n        bool\\n    ) external; //voteId, support, executeIfDecided\\n\\n    function vote_for_gauge_weights(address, uint256) external;\\n}\\n\\ninterface IMinter {\\n    function mint(address) external;\\n}\\n\\ninterface IVoterProxy {\\n    function deposit(address _token, address _gauge) external;\\n\\n    function withdrawWethBal(\\n        address,\\n        address,\\n        uint256\\n    ) external returns (bool);\\n\\n    function withdraw(IERC20 _asset) external returns (uint256 balance);\\n\\n    function withdraw(\\n        address _token,\\n        address _gauge,\\n        uint256 _amount\\n    ) external;\\n\\n    function withdrawAll(address _token, address _gauge) external;\\n\\n    function createLock(uint256 _value, uint256 _unlockTime) external;\\n\\n    function increaseAmount(uint256 _value) external;\\n\\n    function increaseTime(uint256 _unlockTimestamp) external;\\n\\n    function release() external;\\n\\n    function claimBal(address _gauge) external returns (uint256);\\n\\n    function claimRewards(address _gauge) external;\\n\\n    function claimFees(address _distroContract, IERC20 _token)\\n        external\\n        returns (uint256);\\n\\n    function setStashAccess(address _stash, bool _status) external;\\n\\n    function vote(\\n        uint256 _voteId,\\n        address _votingAddress,\\n        bool _support\\n    ) external;\\n\\n    function voteGaugeWeight(address _gauge, uint256 _weight) external;\\n\\n    function balanceOfPool(address _gauge) external view returns (uint256);\\n\\n    function operator() external view returns (address);\\n\\n    function execute(\\n        address _to,\\n        uint256 _value,\\n        bytes calldata _data\\n    ) external returns (bool, bytes memory);\\n}\\n\\ninterface IRewards {\\n    function stake(address, uint256) external;\\n\\n    function stakeFor(address, uint256) external;\\n\\n    function withdraw(address, uint256) external;\\n\\n    function exit(address) external;\\n\\n    function getReward(address) external;\\n\\n    function queueNewRewards(uint256) external;\\n\\n    function notifyRewardAmount(uint256) external;\\n\\n    function addExtraReward(address) external;\\n\\n    function stakingToken() external view returns (address);\\n\\n    function rewardToken() external view returns (address);\\n\\n    function earned(address account) external view returns (uint256);\\n}\\n\\ninterface IStash {\\n    function stashRewards() external returns (bool);\\n\\n    function processStash() external returns (bool);\\n\\n    function claimRewards() external returns (bool);\\n\\n    function initialize(\\n        uint256 _pid,\\n        address _operator,\\n        address _staker,\\n        address _gauge,\\n        address _rewardFactory\\n    ) external;\\n}\\n\\ninterface IFeeDistro {\\n    /**\\n     * @notice Claims all pending distributions of the provided token for a user.\\n     * @dev It's not necessary to explicitly checkpoint before calling this function, it will ensure the FeeDistributor\\n     * is up to date before calculating the amount of tokens to be claimed.\\n     * @param user - The user on behalf of which to claim.\\n     * @param token - The ERC20 token address to be claimed.\\n     * @return The amount of `token` sent to `user` as a result of claiming.\\n     */\\n    function claimToken(address user, IERC20 token) external returns (uint256);\\n\\n    /**\\n     * @notice Claims a number of tokens on behalf of a user.\\n     * @dev A version of `claimToken` which supports claiming multiple `tokens` on behalf of `user`.\\n     * See `claimToken` for more details.\\n     * @param user - The user on behalf of which to claim.\\n     * @param tokens - An array of ERC20 token addresses to be claimed.\\n     * @return An array of the amounts of each token in `tokens` sent to `user` as a result of claiming.\\n     */\\n    function claimTokens(address user, IERC20[] calldata tokens)\\n        external\\n        returns (uint256[] memory);\\n}\\n\\ninterface ITokenMinter {\\n    function mint(address, uint256) external;\\n\\n    function burn(address, uint256) external;\\n}\\n\\ninterface IDeposit {\\n    function isShutdown() external view returns (bool);\\n\\n    function balanceOf(address _account) external view returns (uint256);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function poolInfo(uint256)\\n        external\\n        view\\n        returns (\\n            address,\\n            address,\\n            address,\\n            address,\\n            address,\\n            bool\\n        );\\n\\n    function rewardClaimed(\\n        uint256,\\n        address,\\n        uint256\\n    ) external;\\n\\n    function withdrawTo(\\n        uint256,\\n        uint256,\\n        address\\n    ) external;\\n\\n    function claimRewards(uint256, address) external returns (bool);\\n\\n    function rewardArbitrator() external returns (address);\\n\\n    function setGaugeRedirect(uint256 _pid) external returns (bool);\\n\\n    function owner() external returns (address);\\n}\\n\\ninterface ICrvDeposit {\\n    function deposit(uint256, bool) external;\\n\\n    function lockIncentive() external view returns (uint256);\\n}\\n\\ninterface IRewardFactory {\\n    function setAccess(address, bool) external;\\n\\n    function createBalRewards(uint256, address) external returns (address);\\n\\n    function createTokenRewards(\\n        address,\\n        address,\\n        address\\n    ) external returns (address);\\n\\n    function activeRewardCount(address) external view returns (uint256);\\n\\n    function addActiveReward(address, uint256) external returns (bool);\\n\\n    function removeActiveReward(address, uint256) external returns (bool);\\n}\\n\\ninterface IStashFactory {\\n    function createStash(\\n        uint256,\\n        address,\\n        address\\n    ) external returns (address);\\n}\\n\\ninterface ITokenFactory {\\n    function createDepositToken(address) external returns (address);\\n}\\n\\ninterface IPools {\\n    function addPool(address, address) external returns (bool);\\n\\n    function forceAddPool(address, address) external returns (bool);\\n\\n    function shutdownPool(uint256) external returns (bool);\\n\\n    function poolInfo(uint256)\\n        external\\n        view\\n        returns (\\n            address,\\n            address,\\n            address,\\n            address,\\n            address,\\n            bool\\n        );\\n\\n    function poolLength() external view returns (uint256);\\n\\n    function gaugeMap(address) external view returns (bool);\\n\\n    function setPoolManager(address _poolM) external;\\n}\\n\\ninterface IVestedEscrow {\\n    function fund(address[] calldata _recipient, uint256[] calldata _amount)\\n        external\\n        returns (bool);\\n}\\n\\ninterface GaugeController {\\n    function gauge_types(address _addr) external returns (int128);\\n}\\n\\ninterface LiquidityGauge {\\n    function integrate_fraction(address _address) external returns (uint256);\\n\\n    function user_checkpoint(address _address) external returns (bool);\\n}\\n\\ninterface IProxyFactory {\\n    function clone(address _target) external returns (address);\\n}\\n\\ninterface IRewardHook {\\n    function onRewardClaim() external;\\n}\\n\",\"keccak256\":\"0xcd7740e1d1cdc1e4e4e34d3d122877418b32ee8aa42f27b497d194d651cb1b0b\",\"license\":\"MIT\"},\"contracts/utils/MathUtil.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.14;\\n\\n// copied from https://github.com/Uniswap/v2-core/blob/master/contracts/libraries/SafeMath.sol\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUtil {\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /// @dev Gas optimization for loops that iterate over extra rewards\\n    /// We know that this can't overflow because we can't interate over big arrays\\n    function unsafeInc(uint256 x) internal pure returns (uint256) {\\n        unchecked {\\n            return x + 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x537a968bce2ed8c6ece0aed375995311568ebf791c3804ff2274a9117274377b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101206040523480156200001257600080fd5b50604051620026fc380380620026fc833981016040819052620000359162000108565b6001600160a01b0385811660805284811660a05283811660c081905283821660e081905291831661010052600080546001600160a01b0319163317905560405163095ea7b360e01b8152600481019290925260001960248301529063095ea7b3906044016020604051808303816000875af1158015620000b9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000df919062000178565b505050505050620001a3565b80516001600160a01b03811681146200010357600080fd5b919050565b600080600080600060a086880312156200012157600080fd5b6200012c86620000eb565b94506200013c60208701620000eb565b93506200014c60408701620000eb565b92506200015c60608701620000eb565b91506200016c60808701620000eb565b90509295509295909350565b6000602082840312156200018b57600080fd5b815180151581146200019c57600080fd5b9392505050565b60805160a05160c05160e051610100516124b9620002436000396000818161035401528181610a4e0152611050015260008181610260015281816106d401528181610e03015281816111040152818161144c015281816118ce015281816119820152611a110152600081816103d50152611adc0152600081816102bf0152818161086f015261094101526000818161041c01526107e501526124b96000f3fe608060405234801561001057600080fd5b50600436106101cf5760003560e01c806399eecb3b11610104578063d1e61dcb116100a2578063ef5cfb8c11610071578063ef5cfb8c14610487578063f2c098b71461049a578063f9609f08146104ad578063fa3964b2146104c057600080fd5b8063d1e61dcb14610417578063d9caed121461043e578063e2cdd42a14610451578063e68cb15d1461046457600080fd5b8063b52c05fe116100de578063b52c05fe1461039c578063b61d27f6146103af578063c17af1a7146103d0578063c7c4ff46146103f757600080fd5b806399eecb3b1461034f578063b0f6379414610376578063b3ab15fb1461038957600080fd5b80633c9a2a1a11610171578063570ca7351161014b578063570ca735146102f45780635d7e9bcb1461031457806386d1a69f146103275780638da5cb5b1461032f57600080fd5b80633c9a2a1a146102a75780633d79d1c8146102ba57806351cff8d9146102e157600080fd5b80631e4b196a116101ad5780631e4b196a1461020f57806328fa28a9146102355780632dbfa7351461024857806334bce9031461025b57600080fd5b806309cae2c8146101d457806313af4035146101e957806315456eba146101fc575b600080fd5b6101e76101e236600461206f565b6104d3565b005b6101e76101f73660046120a8565b610589565b6101e761020a3660046120cc565b610654565b61022261021d3660046120a8565b610749565b6040519081526020015b60405180910390f35b6101e7610243366004612131565b6109b7565b61022261025636600461206f565b610b5e565b6102827f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161022c565b6101e76102b53660046120cc565b610d83565b6102827f000000000000000000000000000000000000000000000000000000000000000081565b6102226102ef3660046120a8565b610e47565b6001546102829073ffffffffffffffffffffffffffffffffffffffff1681565b6101e761032236600461219d565b610fb3565b6101e76110b1565b6000546102829073ffffffffffffffffffffffffffffffffffffffff1681565b6102827f000000000000000000000000000000000000000000000000000000000000000081565b6102226103843660046120a8565b611184565b6101e76103973660046120a8565b611215565b6101e76103aa3660046121c9565b6113c5565b6103c26103bd3660046121eb565b611490565b60405161022c929190612274565b6102827f000000000000000000000000000000000000000000000000000000000000000081565b6002546102829073ffffffffffffffffffffffffffffffffffffffff1681565b6102827f000000000000000000000000000000000000000000000000000000000000000081565b6101e761044c3660046122f1565b611564565b6101e761045f366004612340565b61175e565b6104776104723660046122f1565b611844565b604051901515815260200161022c565b6101e76104953660046120a8565b611b55565b6101e76104a83660046120a8565b611bee565b6101e76104bb36600461206f565b611cb2565b6101e76104ce366004612382565b611f89565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009073ffffffffffffffffffffffffffffffffffffffff8416906370a0823190602401602060405180830381865afa158015610540573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061056491906123b0565b61056d83611184565b61057791906123f8565b9050610584838383611564565b505050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146105da576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040519081527fa2ea9883a321a3e97b8266c2b078bfeec6d50c711ed71f874a90d500ae2eaf36906020015b60405180910390a150565b60025473ffffffffffffffffffffffffffffffffffffffff1633146106a5576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f4957677c000000000000000000000000000000000000000000000000000000008152600481018290527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690634957677c906024015b600060405180830381600087803b15801561072e57600080fd5b505af1158015610742573d6000803e3d6000fd5b5050505050565b60015460009073ffffffffffffffffffffffffffffffffffffffff16331461079d576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f6a62784200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83811660048301526000917f000000000000000000000000000000000000000000000000000000000000000090911690636a62784290602401600060405180830381600087803b15801561082b57600080fd5b505af192505050801561083c575060015b156109b1576040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906370a0823190602401602060405180830381865afa1580156108cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ef91906123b0565b6001546040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9182166004820152602481018390529192507f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044015b6020604051808303816000875af115801561098b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109af9190612410565b505b92915050565b60015473ffffffffffffffffffffffffffffffffffffffff163314610a08576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b828114610a41576040517f2bb9acf700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b83811015610742577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d7136328868684818110610a9a57610a9a61242d565b9050602002016020810190610aaf91906120a8565b858585818110610ac157610ac161242d565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e087901b16815273ffffffffffffffffffffffffffffffffffffffff90941660048501526020029190910135602483015250604401600060405180830381600087803b158015610b3557600080fd5b505af1158015610b49573d6000803e3d6000fd5b50505050610b578160010190565b9050610a44565b60015460009073ffffffffffffffffffffffffffffffffffffffff163314610bb2576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517fca31879d00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff838116602483015284169063ca31879d906044016020604051808303816000875af1158015610c26573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c4a91906123b0565b506040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009073ffffffffffffffffffffffffffffffffffffffff8416906370a0823190602401602060405180830381865afa158015610cb8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cdc91906123b0565b6001546040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff91821660048201526024810183905291925084169063a9059cbb906044016020604051808303816000875af1158015610d57573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d7b9190612410565b509392505050565b60025473ffffffffffffffffffffffffffffffffffffffff163314610dd4576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517feff7a612000000000000000000000000000000000000000000000000000000008152600481018290527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063eff7a61290602401610714565b3360009081526003602052604081205460ff16610e90576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff821660009081526004602052604090205460ff1615610ec657506000919050565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009073ffffffffffffffffffffffffffffffffffffffff8416906370a0823190602401602060405180830381865afa158015610f33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f5791906123b0565b6040517fa9059cbb0000000000000000000000000000000000000000000000000000000081523360048201526024810182905290915073ffffffffffffffffffffffffffffffffffffffff84169063a9059cbb9060440161096c565b60015473ffffffffffffffffffffffffffffffffffffffff163314611004576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517fd713632800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8381166004830152602482018390527f0000000000000000000000000000000000000000000000000000000000000000169063d7136328906044015b600060405180830381600087803b15801561109557600080fd5b505af11580156110a9573d6000803e3d6000fd5b505050505050565b60025473ffffffffffffffffffffffffffffffffffffffff163314611102576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16633ccfd60b6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561116a57600080fd5b505af115801561117e573d6000803e3d6000fd5b50505050565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009073ffffffffffffffffffffffffffffffffffffffff8316906370a0823190602401602060405180830381865afa1580156111f1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109b191906123b0565b60005473ffffffffffffffffffffffffffffffffffffffff163314611266576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60015473ffffffffffffffffffffffffffffffffffffffff161580159061131b5750600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bf86d6906040518163ffffffff1660e01b8152600401602060405180830381865afa1580156112f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113199190612410565b155b15611352576040517fa88a170d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040519081527f4721129e0e676ed6a92909bb24e853ccdd63ad72280cc2e974e38e480e0e6e5490602001610649565b60025473ffffffffffffffffffffffffffffffffffffffff163314611416576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f65fc387300000000000000000000000000000000000000000000000000000000815260048101839052602481018290527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906365fc38739060440161107b565b60015460009060609073ffffffffffffffffffffffffffffffffffffffff1633146114e7576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000808773ffffffffffffffffffffffffffffffffffffffff1687878760405161151292919061245c565b60006040518083038185875af1925050503d806000811461154f576040519150601f19603f3d011682016040523d82523d6000602084013e611554565b606091505b5090999098509650505050505050565b60015473ffffffffffffffffffffffffffffffffffffffff1633146115b5576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009073ffffffffffffffffffffffffffffffffffffffff8516906370a0823190602401602060405180830381865afa158015611622573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061164691906123b0565b9050818110156116c75773ffffffffffffffffffffffffffffffffffffffff8316632e1a7d4d611676838561246c565b6040518263ffffffff1660e01b815260040161169491815260200190565b600060405180830381600087803b1580156116ae57600080fd5b505af11580156116c2573d6000803e3d6000fd5b505050505b6040517fa9059cbb0000000000000000000000000000000000000000000000000000000081523360048201526024810183905273ffffffffffffffffffffffffffffffffffffffff85169063a9059cbb906044016020604051808303816000875af115801561173a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107429190612410565b60015473ffffffffffffffffffffffffffffffffffffffff1633146117af576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517fdf133bca0000000000000000000000000000000000000000000000000000000081526004810184905281151560248201526000604482015273ffffffffffffffffffffffffffffffffffffffff83169063df133bca906064015b600060405180830381600087803b15801561182757600080fd5b505af115801561183b573d6000803e3d6000fd5b50505050505050565b60015460009073ffffffffffffffffffffffffffffffffffffffff1633146118cc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f2161757468000000000000000000000000000000000000000000000000000000604482015260640160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16633ccfd60b6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561193457600080fd5b505af1158015611948573d6000803e3d6000fd5b50506040517efdd58e00000000000000000000000000000000000000000000000000000000815230600482015260006024820181905292507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16915062fdd58e90604401602060405180830381865afa1580156119de573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a0291906123b0565b905082811015611a90578092507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16633ccfd60b6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015611a7757600080fd5b505af1158015611a8b573d6000803e3d6000fd5b505050505b6040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8681166004830152602482018590527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303816000875af1158015611b25573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b499190612410565b50600195945050505050565b60015473ffffffffffffffffffffffffffffffffffffffff163314611ba6576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1663e6f1daf26040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561072e57600080fd5b60005473ffffffffffffffffffffffffffffffffffffffff163314611c3f576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600280547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040519081527f165ea44172651427010df987e6fd454678cc3c3f3e7331ab563c596bc8e787f690602001610649565b60015473ffffffffffffffffffffffffffffffffffffffff163314611d03576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff821660009081526004602052604081205460ff1615159003611d835773ffffffffffffffffffffffffffffffffffffffff8216600090815260046020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790555b73ffffffffffffffffffffffffffffffffffffffff811660009081526004602052604081205460ff1615159003611e035773ffffffffffffffffffffffffffffffffffffffff8116600090815260046020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790555b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009073ffffffffffffffffffffffffffffffffffffffff8416906370a0823190602401602060405180830381865afa158015611e70573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e9491906123b0565b90508015610584576040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83811660048301526024820183905284169063095ea7b3906044016020604051808303816000875af1158015611f11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f359190612410565b506040517fb6b55f250000000000000000000000000000000000000000000000000000000081526004810182905273ffffffffffffffffffffffffffffffffffffffff83169063b6b55f259060240161180d565b60015473ffffffffffffffffffffffffffffffffffffffff163314611fda576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8216156120465773ffffffffffffffffffffffffffffffffffffffff8216600090815260036020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00168215151790555b5050565b73ffffffffffffffffffffffffffffffffffffffff8116811461206c57600080fd5b50565b6000806040838503121561208257600080fd5b823561208d8161204a565b9150602083013561209d8161204a565b809150509250929050565b6000602082840312156120ba57600080fd5b81356120c58161204a565b9392505050565b6000602082840312156120de57600080fd5b5035919050565b60008083601f8401126120f757600080fd5b50813567ffffffffffffffff81111561210f57600080fd5b6020830191508360208260051b850101111561212a57600080fd5b9250929050565b6000806000806040858703121561214757600080fd5b843567ffffffffffffffff8082111561215f57600080fd5b61216b888389016120e5565b9096509450602087013591508082111561218457600080fd5b50612191878288016120e5565b95989497509550505050565b600080604083850312156121b057600080fd5b82356121bb8161204a565b946020939093013593505050565b600080604083850312156121dc57600080fd5b50508035926020909101359150565b6000806000806060858703121561220157600080fd5b843561220c8161204a565b935060208501359250604085013567ffffffffffffffff8082111561223057600080fd5b818701915087601f83011261224457600080fd5b81358181111561225357600080fd5b88602082850101111561226557600080fd5b95989497505060200194505050565b821515815260006020604081840152835180604085015260005b818110156122aa5785810183015185820160600152820161228e565b818111156122bc576000606083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01692909201606001949350505050565b60008060006060848603121561230657600080fd5b83356123118161204a565b925060208401356123218161204a565b929592945050506040919091013590565b801515811461206c57600080fd5b60008060006060848603121561235557600080fd5b8335925060208401356123678161204a565b9150604084013561237781612332565b809150509250925092565b6000806040838503121561239557600080fd5b82356123a08161204a565b9150602083013561209d81612332565b6000602082840312156123c257600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000821982111561240b5761240b6123c9565b500190565b60006020828403121561242257600080fd5b81516120c581612332565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b8183823760009101908152919050565b60008282101561247e5761247e6123c9565b50039056fea264697066735822122030a22646fbc0fb47e9d81e0fb573fa6756da78447147903c5720d28a3a8c27d164736f6c634300080e0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101cf5760003560e01c806399eecb3b11610104578063d1e61dcb116100a2578063ef5cfb8c11610071578063ef5cfb8c14610487578063f2c098b71461049a578063f9609f08146104ad578063fa3964b2146104c057600080fd5b8063d1e61dcb14610417578063d9caed121461043e578063e2cdd42a14610451578063e68cb15d1461046457600080fd5b8063b52c05fe116100de578063b52c05fe1461039c578063b61d27f6146103af578063c17af1a7146103d0578063c7c4ff46146103f757600080fd5b806399eecb3b1461034f578063b0f6379414610376578063b3ab15fb1461038957600080fd5b80633c9a2a1a11610171578063570ca7351161014b578063570ca735146102f45780635d7e9bcb1461031457806386d1a69f146103275780638da5cb5b1461032f57600080fd5b80633c9a2a1a146102a75780633d79d1c8146102ba57806351cff8d9146102e157600080fd5b80631e4b196a116101ad5780631e4b196a1461020f57806328fa28a9146102355780632dbfa7351461024857806334bce9031461025b57600080fd5b806309cae2c8146101d457806313af4035146101e957806315456eba146101fc575b600080fd5b6101e76101e236600461206f565b6104d3565b005b6101e76101f73660046120a8565b610589565b6101e761020a3660046120cc565b610654565b61022261021d3660046120a8565b610749565b6040519081526020015b60405180910390f35b6101e7610243366004612131565b6109b7565b61022261025636600461206f565b610b5e565b6102827f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161022c565b6101e76102b53660046120cc565b610d83565b6102827f000000000000000000000000000000000000000000000000000000000000000081565b6102226102ef3660046120a8565b610e47565b6001546102829073ffffffffffffffffffffffffffffffffffffffff1681565b6101e761032236600461219d565b610fb3565b6101e76110b1565b6000546102829073ffffffffffffffffffffffffffffffffffffffff1681565b6102827f000000000000000000000000000000000000000000000000000000000000000081565b6102226103843660046120a8565b611184565b6101e76103973660046120a8565b611215565b6101e76103aa3660046121c9565b6113c5565b6103c26103bd3660046121eb565b611490565b60405161022c929190612274565b6102827f000000000000000000000000000000000000000000000000000000000000000081565b6002546102829073ffffffffffffffffffffffffffffffffffffffff1681565b6102827f000000000000000000000000000000000000000000000000000000000000000081565b6101e761044c3660046122f1565b611564565b6101e761045f366004612340565b61175e565b6104776104723660046122f1565b611844565b604051901515815260200161022c565b6101e76104953660046120a8565b611b55565b6101e76104a83660046120a8565b611bee565b6101e76104bb36600461206f565b611cb2565b6101e76104ce366004612382565b611f89565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009073ffffffffffffffffffffffffffffffffffffffff8416906370a0823190602401602060405180830381865afa158015610540573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061056491906123b0565b61056d83611184565b61057791906123f8565b9050610584838383611564565b505050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146105da576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040519081527fa2ea9883a321a3e97b8266c2b078bfeec6d50c711ed71f874a90d500ae2eaf36906020015b60405180910390a150565b60025473ffffffffffffffffffffffffffffffffffffffff1633146106a5576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f4957677c000000000000000000000000000000000000000000000000000000008152600481018290527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690634957677c906024015b600060405180830381600087803b15801561072e57600080fd5b505af1158015610742573d6000803e3d6000fd5b5050505050565b60015460009073ffffffffffffffffffffffffffffffffffffffff16331461079d576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f6a62784200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83811660048301526000917f000000000000000000000000000000000000000000000000000000000000000090911690636a62784290602401600060405180830381600087803b15801561082b57600080fd5b505af192505050801561083c575060015b156109b1576040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906370a0823190602401602060405180830381865afa1580156108cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ef91906123b0565b6001546040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9182166004820152602481018390529192507f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044015b6020604051808303816000875af115801561098b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109af9190612410565b505b92915050565b60015473ffffffffffffffffffffffffffffffffffffffff163314610a08576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b828114610a41576040517f2bb9acf700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b83811015610742577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d7136328868684818110610a9a57610a9a61242d565b9050602002016020810190610aaf91906120a8565b858585818110610ac157610ac161242d565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e087901b16815273ffffffffffffffffffffffffffffffffffffffff90941660048501526020029190910135602483015250604401600060405180830381600087803b158015610b3557600080fd5b505af1158015610b49573d6000803e3d6000fd5b50505050610b578160010190565b9050610a44565b60015460009073ffffffffffffffffffffffffffffffffffffffff163314610bb2576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517fca31879d00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff838116602483015284169063ca31879d906044016020604051808303816000875af1158015610c26573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c4a91906123b0565b506040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009073ffffffffffffffffffffffffffffffffffffffff8416906370a0823190602401602060405180830381865afa158015610cb8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cdc91906123b0565b6001546040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff91821660048201526024810183905291925084169063a9059cbb906044016020604051808303816000875af1158015610d57573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d7b9190612410565b509392505050565b60025473ffffffffffffffffffffffffffffffffffffffff163314610dd4576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517feff7a612000000000000000000000000000000000000000000000000000000008152600481018290527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063eff7a61290602401610714565b3360009081526003602052604081205460ff16610e90576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff821660009081526004602052604090205460ff1615610ec657506000919050565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009073ffffffffffffffffffffffffffffffffffffffff8416906370a0823190602401602060405180830381865afa158015610f33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f5791906123b0565b6040517fa9059cbb0000000000000000000000000000000000000000000000000000000081523360048201526024810182905290915073ffffffffffffffffffffffffffffffffffffffff84169063a9059cbb9060440161096c565b60015473ffffffffffffffffffffffffffffffffffffffff163314611004576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517fd713632800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8381166004830152602482018390527f0000000000000000000000000000000000000000000000000000000000000000169063d7136328906044015b600060405180830381600087803b15801561109557600080fd5b505af11580156110a9573d6000803e3d6000fd5b505050505050565b60025473ffffffffffffffffffffffffffffffffffffffff163314611102576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16633ccfd60b6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561116a57600080fd5b505af115801561117e573d6000803e3d6000fd5b50505050565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009073ffffffffffffffffffffffffffffffffffffffff8316906370a0823190602401602060405180830381865afa1580156111f1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109b191906123b0565b60005473ffffffffffffffffffffffffffffffffffffffff163314611266576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60015473ffffffffffffffffffffffffffffffffffffffff161580159061131b5750600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bf86d6906040518163ffffffff1660e01b8152600401602060405180830381865afa1580156112f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113199190612410565b155b15611352576040517fa88a170d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040519081527f4721129e0e676ed6a92909bb24e853ccdd63ad72280cc2e974e38e480e0e6e5490602001610649565b60025473ffffffffffffffffffffffffffffffffffffffff163314611416576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f65fc387300000000000000000000000000000000000000000000000000000000815260048101839052602481018290527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906365fc38739060440161107b565b60015460009060609073ffffffffffffffffffffffffffffffffffffffff1633146114e7576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000808773ffffffffffffffffffffffffffffffffffffffff1687878760405161151292919061245c565b60006040518083038185875af1925050503d806000811461154f576040519150601f19603f3d011682016040523d82523d6000602084013e611554565b606091505b5090999098509650505050505050565b60015473ffffffffffffffffffffffffffffffffffffffff1633146115b5576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009073ffffffffffffffffffffffffffffffffffffffff8516906370a0823190602401602060405180830381865afa158015611622573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061164691906123b0565b9050818110156116c75773ffffffffffffffffffffffffffffffffffffffff8316632e1a7d4d611676838561246c565b6040518263ffffffff1660e01b815260040161169491815260200190565b600060405180830381600087803b1580156116ae57600080fd5b505af11580156116c2573d6000803e3d6000fd5b505050505b6040517fa9059cbb0000000000000000000000000000000000000000000000000000000081523360048201526024810183905273ffffffffffffffffffffffffffffffffffffffff85169063a9059cbb906044016020604051808303816000875af115801561173a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107429190612410565b60015473ffffffffffffffffffffffffffffffffffffffff1633146117af576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517fdf133bca0000000000000000000000000000000000000000000000000000000081526004810184905281151560248201526000604482015273ffffffffffffffffffffffffffffffffffffffff83169063df133bca906064015b600060405180830381600087803b15801561182757600080fd5b505af115801561183b573d6000803e3d6000fd5b50505050505050565b60015460009073ffffffffffffffffffffffffffffffffffffffff1633146118cc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f2161757468000000000000000000000000000000000000000000000000000000604482015260640160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16633ccfd60b6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561193457600080fd5b505af1158015611948573d6000803e3d6000fd5b50506040517efdd58e00000000000000000000000000000000000000000000000000000000815230600482015260006024820181905292507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16915062fdd58e90604401602060405180830381865afa1580156119de573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a0291906123b0565b905082811015611a90578092507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16633ccfd60b6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015611a7757600080fd5b505af1158015611a8b573d6000803e3d6000fd5b505050505b6040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8681166004830152602482018590527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303816000875af1158015611b25573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b499190612410565b50600195945050505050565b60015473ffffffffffffffffffffffffffffffffffffffff163314611ba6576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1663e6f1daf26040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561072e57600080fd5b60005473ffffffffffffffffffffffffffffffffffffffff163314611c3f576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600280547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040519081527f165ea44172651427010df987e6fd454678cc3c3f3e7331ab563c596bc8e787f690602001610649565b60015473ffffffffffffffffffffffffffffffffffffffff163314611d03576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff821660009081526004602052604081205460ff1615159003611d835773ffffffffffffffffffffffffffffffffffffffff8216600090815260046020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790555b73ffffffffffffffffffffffffffffffffffffffff811660009081526004602052604081205460ff1615159003611e035773ffffffffffffffffffffffffffffffffffffffff8116600090815260046020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790555b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009073ffffffffffffffffffffffffffffffffffffffff8416906370a0823190602401602060405180830381865afa158015611e70573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e9491906123b0565b90508015610584576040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83811660048301526024820183905284169063095ea7b3906044016020604051808303816000875af1158015611f11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f359190612410565b506040517fb6b55f250000000000000000000000000000000000000000000000000000000081526004810182905273ffffffffffffffffffffffffffffffffffffffff83169063b6b55f259060240161180d565b60015473ffffffffffffffffffffffffffffffffffffffff163314611fda576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8216156120465773ffffffffffffffffffffffffffffffffffffffff8216600090815260036020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00168215151790555b5050565b73ffffffffffffffffffffffffffffffffffffffff8116811461206c57600080fd5b50565b6000806040838503121561208257600080fd5b823561208d8161204a565b9150602083013561209d8161204a565b809150509250929050565b6000602082840312156120ba57600080fd5b81356120c58161204a565b9392505050565b6000602082840312156120de57600080fd5b5035919050565b60008083601f8401126120f757600080fd5b50813567ffffffffffffffff81111561210f57600080fd5b6020830191508360208260051b850101111561212a57600080fd5b9250929050565b6000806000806040858703121561214757600080fd5b843567ffffffffffffffff8082111561215f57600080fd5b61216b888389016120e5565b9096509450602087013591508082111561218457600080fd5b50612191878288016120e5565b95989497509550505050565b600080604083850312156121b057600080fd5b82356121bb8161204a565b946020939093013593505050565b600080604083850312156121dc57600080fd5b50508035926020909101359150565b6000806000806060858703121561220157600080fd5b843561220c8161204a565b935060208501359250604085013567ffffffffffffffff8082111561223057600080fd5b818701915087601f83011261224457600080fd5b81358181111561225357600080fd5b88602082850101111561226557600080fd5b95989497505060200194505050565b821515815260006020604081840152835180604085015260005b818110156122aa5785810183015185820160600152820161228e565b818111156122bc576000606083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01692909201606001949350505050565b60008060006060848603121561230657600080fd5b83356123118161204a565b925060208401356123218161204a565b929592945050506040919091013590565b801515811461206c57600080fd5b60008060006060848603121561235557600080fd5b8335925060208401356123678161204a565b9150604084013561237781612332565b809150509250925092565b6000806040838503121561239557600080fd5b82356123a08161204a565b9150602083013561209d81612332565b6000602082840312156123c257600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000821982111561240b5761240b6123c9565b500190565b60006020828403121561242257600080fd5b81516120c581612332565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b8183823760009101908152919050565b60008282101561247e5761247e6123c9565b50039056fea264697066735822122030a22646fbc0fb47e9d81e0fb573fa6756da78447147903c5720d28a3a8c27d164736f6c634300080e0033",
  "devdoc": {
    "details": "based on Convex's VoterProxy smart contract      https://etherscan.io/address/0x989AEb4d175e16225E39E87d0D97A3360524AD80#code",
    "kind": "dev",
    "methods": {
      "balanceOfPool(address)": {
        "params": {
          "_gauge": "The gauge to check"
        },
        "returns": {
          "_0": "uint256 balance"
        }
      },
      "claimBal(address)": {
        "params": {
          "_gauge": "The gauge to claim from"
        },
        "returns": {
          "_0": "amount claimed"
        }
      },
      "claimFees(address,address)": {
        "params": {
          "_distroContract": "The distro contract to claim from",
          "_token": "The token to claim from"
        },
        "returns": {
          "_0": "uint256 amaunt claimed"
        }
      },
      "createLock(uint256,uint256)": {
        "params": {
          "_unlockTime": "Epoch time when tokens unlock, rounded down to whole weeks",
          "_value": "The amount of BAL tokens to lock"
        }
      },
      "deposit(address,address)": {
        "params": {
          "_gauge": "The gauge to deposit to",
          "_token": "The address of the LP token"
        }
      },
      "execute(address,uint256,bytes)": {
        "params": {
          "_data": "calldata",
          "_to": "The address to call",
          "_value": "The ETH value to send"
        },
        "returns": {
          "_0": "The result of the call (bool, result)"
        }
      },
      "increaseAmount(uint256)": {
        "params": {
          "_value": "The amount of veBal tokens to increase"
        }
      },
      "increaseTime(uint256)": {
        "params": {
          "_value": "New epoch time for unlocking"
        }
      },
      "release()": {
        "details": "Only possible if the lock has expired"
      },
      "setDepositor(address)": {
        "details": "Only the owner can change the depositor",
        "params": {
          "_depositor": "The new depositor of the contract"
        }
      },
      "setOperator(address)": {
        "details": "Only the owner can change the operator      Current operator must be shutdown before changing the operator      Or we can set operator to address(0)",
        "params": {
          "_operator": "The new operator of the contract"
        }
      },
      "setOwner(address)": {
        "params": {
          "_newOwner": "The new owner of the contract"
        }
      },
      "setStashAccess(address,bool)": {
        "params": {
          "_stash": "The address of the stash",
          "_status": "The new access status"
        }
      },
      "voteGaugeWeight(address,uint256)": {
        "params": {
          "_gauge": "The gauge to vote for",
          "_weight": "The weight for a gauge in basis points (units of 0.01%). Minimal is 0.01%. Ignored if 0"
        }
      },
      "voteMultipleGauges(address[],uint256[])": {
        "details": "Input arrays must have same length",
        "params": {
          "_gauges": "The gauges to vote for",
          "_weights": "The weights for a gauge in basis points (units of 0.01%). Minimal is 0.01%. Ignored if 0"
        }
      },
      "withdraw(address)": {
        "params": {
          "_asset": "ERC20 token address"
        },
        "returns": {
          "_0": "amount of tokens withdrawn"
        }
      },
      "withdraw(address,address,uint256)": {
        "details": "If this contract doesn't have enough tokens it will withdraw them from gauge",
        "params": {
          "_amount": "The amount of tokens to withdraw",
          "_gauge": "The gauge to withdraw from",
          "_token": "ERC20 token address"
        }
      },
      "withdrawAll(address,address)": {
        "details": "If this contract doesn't have enough tokens it will withdraw them from gauge",
        "params": {
          "_gauge": "The gauge to withdraw from",
          "_token": "ERC20 token address"
        }
      },
      "withdrawWethBal(address,address,uint256)": {
        "details": "If contract doesn't have asked _amount tokens it will withdraw all tokens",
        "params": {
          "_amount": "The amount to withdraw",
          "_gauge": "The gauge",
          "_to": "send to address"
        }
      }
    },
    "title": "VoterProxy contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "balanceOfPool(address)": {
        "notice": "Balance of gauge"
      },
      "claimBal(address)": {
        "notice": "Claims VeBal tokens"
      },
      "claimFees(address,address)": {
        "notice": "Claims fees"
      },
      "claimRewards(address)": {
        "notice": "Claims rewards_gauge The gauge to claim from"
      },
      "createLock(uint256,uint256)": {
        "notice": "Locks BAL tokens to veBal"
      },
      "deposit(address,address)": {
        "notice": "Used to deposit tokens"
      },
      "execute(address,uint256,bytes)": {
        "notice": "Executes a call to `_to` with calldata `_data`"
      },
      "increaseAmount(uint256)": {
        "notice": "Increases amount of veBal tokens without modifying the unlock time"
      },
      "increaseTime(uint256)": {
        "notice": "Extend the unlock time"
      },
      "release()": {
        "notice": "Redeems veBal tokens"
      },
      "setDepositor(address)": {
        "notice": "Changes the depositor of the contract"
      },
      "setOperator(address)": {
        "notice": "Changes the operator of the contract"
      },
      "setOwner(address)": {
        "notice": "Used to change the owner of the contract"
      },
      "setStashAccess(address,bool)": {
        "notice": "Sets `_stash` access to `_status`"
      },
      "voteGaugeWeight(address,uint256)": {
        "notice": "Votes for gauge weight"
      },
      "voteMultipleGauges(address[],uint256[])": {
        "notice": "Votes for multiple gauge weights"
      },
      "withdraw(address)": {
        "notice": "Used for pulling extra incentive reward tokens out"
      },
      "withdraw(address,address,uint256)": {
        "notice": "Used for withdrawing tokens"
      },
      "withdrawAll(address,address)": {
        "notice": "Used for withdrawing tokens"
      },
      "withdrawWethBal(address,address,uint256)": {
        "notice": "Used for withdrawing wethBal tokens to address"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6612,
        "contract": "contracts/VoterProxy.sol:VoterProxy",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 6614,
        "contract": "contracts/VoterProxy.sol:VoterProxy",
        "label": "operator",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 6616,
        "contract": "contracts/VoterProxy.sol:VoterProxy",
        "label": "depositor",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 6620,
        "contract": "contracts/VoterProxy.sol:VoterProxy",
        "label": "stashAccess",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 6624,
        "contract": "contracts/VoterProxy.sol:VoterProxy",
        "label": "protectedTokens",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      }
    }
  }
}