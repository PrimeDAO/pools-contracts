{
  "address": "0x8177e4479D0ea3308Bc71Fb3034a2b8af37658f3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_bal",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "Unauthorized",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "stash",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "AccessChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "poolAddress",
          "type": "address"
        }
      ],
      "name": "BaseRewardPoolCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "reward",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        }
      ],
      "name": "ExtraRewardAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "reward",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        }
      ],
      "name": "ExtraRewardRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "poolAddress",
          "type": "address"
        }
      ],
      "name": "VirtualBalanceRewardPoolCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_reward",
          "type": "address"
        }
      ],
      "name": "activeRewardCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_reward",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "addActiveReward",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bal",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_depositToken",
          "type": "address"
        }
      ],
      "name": "createBalRewards",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_mainRewards",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_rewardPoolOwner",
          "type": "address"
        }
      ],
      "name": "createTokenRewards",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "operator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_reward",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "removeActiveReward",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rewardActiveList",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stash",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_status",
          "type": "bool"
        }
      ],
      "name": "setAccess",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x3a639212d4ab360c0170e897ddff7015069f0a1ebb55a816dec72e0cd5a6a803",
  "receipt": {
    "to": null,
    "from": "0xbF63Afb77A49159b4502E91CD3f4EbDcc161431f",
    "contractAddress": "0x8177e4479D0ea3308Bc71Fb3034a2b8af37658f3",
    "transactionIndex": 0,
    "gasUsed": "3275405",
    "logsBloom": "0x
    "blockHash": "0x894521b3beb7f52218c891626164d68cdb15163457841d96ccfd8a4828bae310",
    "transactionHash": "0x3a639212d4ab360c0170e897ddff7015069f0a1ebb55a816dec72e0cd5a6a803",
    "logs": [],
    "blockNumber": 32151467,
    "cumulativeGasUsed": "3275405",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xC50F287ec1d60EB89412589f90D807e29Ee4E7fd",
    "0xcb355677e36f390ccc4a5d4beadfbf1eb2071c81"
  ],
  "solcInputHash": "e3e766566fe34d0ad4122b4efba89aaf",
  "metadata": "{\"compiler\":{\"version\":\"0.8.14+commit.80d49f37\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bal\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"stash\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"AccessChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"}],\"name\":\"BaseRewardPoolCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"reward\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"ExtraRewardAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"reward\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"ExtraRewardRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"}],\"name\":\"VirtualBalanceRewardPoolCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_reward\",\"type\":\"address\"}],\"name\":\"activeRewardCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_reward\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"addActiveReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_depositToken\",\"type\":\"address\"}],\"name\":\"createBalRewards\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mainRewards\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardPoolOwner\",\"type\":\"address\"}],\"name\":\"createTokenRewards\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_reward\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"removeActiveReward\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardActiveList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stash\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setAccess\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"activeRewardCount(address)\":{\"returns\":{\"_0\":\"uint256 number of active rewards\"}},\"addActiveReward(address,uint256)\":{\"returns\":{\"_0\":\"true on success\"}},\"createBalRewards(uint256,address)\":{\"params\":{\"_depositToken\":\"address of the token\",\"_pid\":\"The pid of the pool\"}},\"createTokenRewards(address,address,address)\":{\"details\":\"used for extra incentive tokens(ex. snx) as well as vebal fees\",\"params\":{\"_mainRewards\":\"address of the main reward pool contract\",\"_rewardPoolOwner\":\"address of the reward pool owner\",\"_token\":\"address of the token\"},\"returns\":{\"_0\":\"address of the new reward pool\"}},\"removeActiveReward(address,uint256)\":{\"params\":{\"_pid\":\"The pid of the pool\",\"_reward\":\"The address of the reward contract\"},\"returns\":{\"_0\":\"true on success\"}},\"setAccess(address,bool)\":{\"details\":\"Stash contracts need access to create new Virtual balance pools for extra gauge incentives(ex. snx)\"}},\"title\":\"RewardFactory contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"activeRewardCount(address)\":{\"notice\":\"Get active rewards count\"},\"addActiveReward(address,uint256)\":{\"notice\":\"Adds a new reward to the active list\"},\"createBalRewards(uint256,address)\":{\"notice\":\"Creates a new Reward pool\"},\"createTokenRewards(address,address,address)\":{\"notice\":\"Create a virtual balance reward pool that mimicks the balance of a pool's main reward contract\"},\"removeActiveReward(address,uint256)\":{\"notice\":\"Removes active reward\"},\"setAccess(address,bool)\":{\"notice\":\"Sets rewardAccess to stash\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/factories/RewardFactory.sol\":\"RewardFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"contracts/BaseRewardPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.14;\\n\\nimport \\\"./utils/Interfaces.sol\\\";\\nimport \\\"./utils/MathUtil.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @title Base Reward Pool contract\\n/// @dev Rewards contract for Prime Pools is based on the convex contract\\ncontract BaseRewardPool {\\n    event RewardAdded(uint256 reward);\\n    event Staked(address indexed user, uint256 amount);\\n    event Withdrawn(address indexed user, uint256 amount);\\n    event RewardPaid(address indexed user, uint256 reward);\\n\\n    error Unauthorized();\\n    error InvalidAmount();\\n\\n    uint256 public constant DURATION = 7 days;\\n    uint256 public constant NEW_REWARD_RATIO = 830;\\n\\n    // Rewards token is Bal\\n    IERC20 public immutable rewardToken;\\n    IERC20 public immutable stakingToken;\\n\\n    // Operator is Controller smart contract\\n    address public immutable operator;\\n    address public immutable rewardManager;\\n\\n    uint256 public pid;\\n    uint256 public periodFinish;\\n    uint256 public rewardRate;\\n    uint256 public lastUpdateTime;\\n    uint256 public rewardPerTokenStored;\\n    uint256 public queuedRewards;\\n    uint256 public currentRewards;\\n    uint256 public historicalRewards;\\n    uint256 private _totalSupply;\\n\\n    mapping(address => uint256) public userRewardPerTokenPaid;\\n    mapping(address => uint256) public rewards;\\n    mapping(address => uint256) private _balances;\\n\\n    address[] public extraRewards;\\n\\n    constructor(\\n        uint256 pid_,\\n        address stakingToken_,\\n        address rewardToken_,\\n        address operator_,\\n        address rewardManager_\\n    ) {\\n        pid = pid_;\\n        stakingToken = IERC20(stakingToken_);\\n        rewardToken = IERC20(rewardToken_);\\n        operator = operator_;\\n        rewardManager = rewardManager_;\\n    }\\n\\n    modifier updateReward(address account) {\\n        rewardPerTokenStored = rewardPerToken();\\n        lastUpdateTime = lastTimeRewardApplicable();\\n        if (account != address(0)) {\\n            rewards[account] = earned(account);\\n            userRewardPerTokenPaid[account] = rewardPerTokenStored;\\n        }\\n        _;\\n    }\\n\\n    modifier onlyAddress(address authorizedAddress) {\\n        if (msg.sender != authorizedAddress) {\\n            revert Unauthorized();\\n        }\\n        _;\\n    }\\n\\n    /// @notice Returns total supply\\n    function totalSupply() public view returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /// @notice Get the specified address' balance\\n    /// @param account The address of the token holder\\n    /// @return The `account`'s balance\\n    function balanceOf(address account) public view returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /// @notice Returns number of extra rewards\\n    function extraRewardsLength() external view returns (uint256) {\\n        return extraRewards.length;\\n    }\\n\\n    /// @notice Adds an extra reward\\n    /// @dev only `rewardManager` can add extra rewards\\n    /// @param _reward token address of the reward\\n    /// @return true on success\\n    function addExtraReward(address _reward)\\n        external\\n        onlyAddress(rewardManager)\\n        returns (bool)\\n    {\\n        require(_reward != address(0), \\\"!reward setting\\\");\\n        extraRewards.push(_reward);\\n        return true;\\n    }\\n\\n    /// @notice Returns last time reward applicable\\n    /// @return The lower value of current block.timestamp or last time reward applicable\\n    function lastTimeRewardApplicable() public view returns (uint256) {\\n        // solhint-disable-next-line\\n        return MathUtil.min(block.timestamp, periodFinish);\\n    }\\n\\n    /// @notice Returns rewards per token staked\\n    /// @return The rewards per token staked\\n    function rewardPerToken() public view returns (uint256) {\\n        if (totalSupply() == 0) {\\n            return rewardPerTokenStored;\\n        }\\n        return\\n            rewardPerTokenStored +\\n            (((lastTimeRewardApplicable() - lastUpdateTime) *\\n                rewardRate *\\n                1e18) / totalSupply());\\n    }\\n\\n    /// @notice Returns the `account`'s earned rewards\\n    /// @param account The address of the token holder\\n    /// @return The `account`'s earned rewards\\n    function earned(address account) public view returns (uint256) {\\n        return\\n            (balanceOf(account) *\\n                (rewardPerToken() - userRewardPerTokenPaid[account])) /\\n            1e18 +\\n            rewards[account];\\n    }\\n\\n    /// @notice Stakes `amount` tokens\\n    /// @param _amount The amount of tokens user wants to stake\\n    /// @return true on success\\n    function stake(uint256 _amount)\\n        public\\n        updateReward(msg.sender)\\n        returns (bool)\\n    {\\n        if (_amount < 1) {\\n            revert InvalidAmount();\\n        }\\n\\n        stakeToExtraRewards(msg.sender, _amount);\\n\\n        _totalSupply = _totalSupply + (_amount);\\n        _balances[msg.sender] = _balances[msg.sender] + (_amount);\\n\\n        stakingToken.transferFrom(msg.sender, address(this), _amount);\\n        emit Staked(msg.sender, _amount);\\n\\n        return true;\\n    }\\n\\n    /// @notice Stakes all BAL tokens\\n    /// @return true on success\\n    function stakeAll() external returns (bool) {\\n        uint256 balance = stakingToken.balanceOf(msg.sender);\\n        stake(balance);\\n        return true;\\n    }\\n\\n    /// @notice Stakes `amount` tokens for `_for`\\n    /// @param _for Who are we staking for\\n    /// @param _amount The amount of tokens user wants to stake\\n    function stakeFor(address _for, uint256 _amount)\\n        public\\n        updateReward(_for)\\n        returns (bool)\\n    {\\n        if (_amount < 1) {\\n            revert InvalidAmount();\\n        }\\n\\n        stakeToExtraRewards(_for, _amount);\\n\\n        _totalSupply = _totalSupply + (_amount);\\n        // update _for balances\\n        _balances[_for] = _balances[_for] + (_amount);\\n\\n        // take away from sender\\n        stakingToken.transferFrom(msg.sender, address(this), _amount);\\n        emit Staked(_for, _amount);\\n\\n        return true;\\n    }\\n\\n    /// @notice Unstakes `amount` tokens\\n    /// @param _amount The amount of tokens that the user wants to withdraw\\n    /// @param _claim Whether or not the user wants to claim their rewards\\n    function withdraw(uint256 _amount, bool _claim)\\n        public\\n        updateReward(msg.sender)\\n        returns (bool)\\n    {\\n        if (_amount < 1) {\\n            revert InvalidAmount();\\n        }\\n\\n        // withdraw from linked rewards\\n        withdrawExtraRewards(msg.sender, _amount);\\n\\n        _totalSupply = _totalSupply - (_amount);\\n        _balances[msg.sender] = _balances[msg.sender] - (_amount);\\n\\n        // return staked tokens to sender\\n        stakingToken.transfer(msg.sender, _amount);\\n        emit Withdrawn(msg.sender, _amount);\\n\\n        // claim staking rewards\\n        if (_claim) {\\n            getReward(msg.sender, true);\\n        }\\n\\n        return true;\\n    }\\n\\n    /// @notice Withdraw all tokens\\n    function withdrawAll(bool _claim) external {\\n        withdraw(_balances[msg.sender], _claim);\\n    }\\n\\n    /// @notice Withdraw `amount` tokens and unwrap\\n    /// @param _amount The amount of tokens that the user wants to withdraw\\n    /// @param _claim Whether or not the user wants to claim their rewards\\n    function withdrawAndUnwrap(uint256 _amount, bool _claim)\\n        public\\n        updateReward(msg.sender)\\n        returns (bool)\\n    {\\n        if (_amount < 1) {\\n            revert InvalidAmount();\\n        }\\n\\n        withdrawExtraRewards(msg.sender, _amount);\\n\\n        _totalSupply = _totalSupply - (_amount);\\n        _balances[msg.sender] = _balances[msg.sender] - (_amount);\\n\\n        // tell operator to withdraw from here directly to user\\n        IDeposit(operator).withdrawTo(pid, _amount, msg.sender);\\n        emit Withdrawn(msg.sender, _amount);\\n\\n        //get rewards too\\n        if (_claim) {\\n            getReward(msg.sender, true);\\n        }\\n        return true;\\n    }\\n\\n    /// @notice Withdraw all tokens and unwrap\\n    /// @param _claim Whether or not the user wants to claim their rewards\\n    function withdrawAllAndUnwrap(bool _claim) external {\\n        withdrawAndUnwrap(_balances[msg.sender], _claim);\\n    }\\n\\n    /// @notice Claims Rewards for `_account`\\n    /// @param _account The account to claim rewards for\\n    /// @param _claimExtras Whether or not the user wants to claim extra rewards\\n    function getReward(address _account, bool _claimExtras)\\n        public\\n        updateReward(_account)\\n        returns (bool)\\n    {\\n        uint256 reward = earned(_account);\\n        if (reward > 0) {\\n            rewards[_account] = 0;\\n            rewardToken.transfer(_account, reward);\\n            IDeposit(operator).rewardClaimed(pid, _account, reward);\\n            emit RewardPaid(_account, reward);\\n        }\\n\\n        // also get rewards from linked rewards\\n        if (_claimExtras) {\\n            address[] memory extraRewardsMemory = extraRewards;\\n            for (\\n                uint256 i = 0;\\n                i < extraRewardsMemory.length;\\n                i = unsafeInc(i)\\n            ) {\\n                IRewards(extraRewardsMemory[i]).getReward(_account);\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /// @notice Claims Reward for signer\\n    /// @return true on success\\n    function getReward() external returns (bool) {\\n        getReward(msg.sender, true);\\n        return true;\\n    }\\n\\n    /// @notice Donates reward token to this contract\\n    /// @param _amount The amount of tokens to donate\\n    /// @return true on success\\n    function donate(uint256 _amount) external returns (bool) {\\n        IERC20(rewardToken).transferFrom(msg.sender, address(this), _amount);\\n        queuedRewards = queuedRewards + _amount;\\n        return true;\\n    }\\n\\n    /// @notice Queue new rewards\\n    /// @dev Only the operator can queue new rewards\\n    /// @param _rewards The amount of tokens to queue\\n    /// @return true on success\\n    function queueNewRewards(uint256 _rewards)\\n        external\\n        onlyAddress(operator)\\n        returns (bool)\\n    {\\n        _rewards = _rewards + queuedRewards;\\n\\n        // solhint-disable-next-line\\n        if (block.timestamp >= periodFinish) {\\n            notifyRewardAmount(_rewards);\\n            queuedRewards = 0;\\n            return true;\\n        }\\n\\n        // solhint-disable-next-line\\n        uint256 elapsedTime = block.timestamp - (periodFinish - DURATION);\\n        uint256 currentAtNow = rewardRate * elapsedTime;\\n        uint256 queuedRatio = (currentAtNow * 1000) / _rewards;\\n\\n        if (queuedRatio < NEW_REWARD_RATIO) {\\n            notifyRewardAmount(_rewards);\\n            queuedRewards = 0;\\n        } else {\\n            queuedRewards = _rewards;\\n        }\\n        return true;\\n    }\\n\\n    /// @dev Gas optimization for loops that iterate over extra rewards\\n    /// We know that this can't overflow because we can't interate over big arrays\\n    function unsafeInc(uint256 x) internal pure returns (uint256) {\\n        unchecked {\\n            return x + 1;\\n        }\\n    }\\n\\n    /// @dev Stakes `amount` tokens for address `for` to extra rewards tokens\\n    /// RewardManager `rewardManager` is responsible for adding reward tokens\\n    /// @param _for Who are we staking for\\n    /// @param _amount The amount of tokens user wants to stake\\n    function stakeToExtraRewards(address _for, uint256 _amount) internal {\\n        address[] memory extraRewardsMemory = extraRewards;\\n        for (uint256 i = 0; i < extraRewardsMemory.length; i = unsafeInc(i)) {\\n            IRewards(extraRewardsMemory[i]).stake(_for, _amount);\\n        }\\n    }\\n\\n    /// @dev Stakes `amount` tokens for address `for` to extra rewards tokens\\n    /// RewardManager `rewardManager` is responsible for adding reward tokens\\n    /// @param _for Who are we staking for\\n    /// @param _amount The amount of tokens user wants to stake\\n    function withdrawExtraRewards(address _for, uint256 _amount) internal {\\n        address[] memory extraRewardsMemory = extraRewards;\\n        for (uint256 i = 0; i < extraRewardsMemory.length; i = unsafeInc(i)) {\\n            IRewards(extraRewardsMemory[i]).withdraw(_for, _amount);\\n        }\\n    }\\n\\n    function notifyRewardAmount(uint256 reward)\\n        internal\\n        updateReward(address(0))\\n    {\\n        historicalRewards = historicalRewards + reward;\\n        // solhint-disable-next-line\\n        if (block.timestamp >= periodFinish) {\\n            rewardRate = reward / DURATION;\\n        } else {\\n            // solhint-disable-next-line\\n            uint256 remaining = periodFinish - block.timestamp;\\n            uint256 leftover = remaining * rewardRate;\\n            reward = reward + leftover;\\n            rewardRate = reward / DURATION;\\n        }\\n        currentRewards = reward;\\n        // solhint-disable-next-line\\n        lastUpdateTime = block.timestamp;\\n        // solhint-disable-next-line\\n        periodFinish = block.timestamp + DURATION;\\n        emit RewardAdded(reward);\\n    }\\n}\\n\",\"keccak256\":\"0x4cf429970734b26ac5bb6f8ef380282ef319b3a089c4f20eb8bdd7b7dd18b076\",\"license\":\"MIT\"},\"contracts/VirtualBalanceRewardPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.14;\\n/**\\n *Submitted for verification at Etherscan.io on 2020-07-17\\n */\\n\\n/*\\n   ____            __   __        __   _\\n  / __/__ __ ___  / /_ / /  ___  / /_ (_)__ __\\n _\\\\ \\\\ / // // _ \\\\/ __// _ \\\\/ -_)/ __// / \\\\ \\\\ /\\n/___/ \\\\_, //_//_/\\\\__//_//_/\\\\__/ \\\\__//_/ /_\\\\_\\\\\\n     /___/\\n* Synthetix: VirtualBalanceRewardPool.sol\\n*\\n* Docs: https://docs.synthetix.io/\\n*\\n*\\n* MIT License\\n* ===========\\n*\\n* Copyright (c) 2020 Synthetix\\n*\\n* Permission is hereby granted, free of charge, to any person obtaining a copy\\n* of this software and associated documentation files (the \\\"Software\\\"), to deal\\n* in the Software without restriction, including without limitation the rights\\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n* copies of the Software, and to permit persons to whom the Software is\\n* furnished to do so, subject to the following conditions:\\n*\\n* The above copyright notice and this permission notice shall be included in all\\n* copies or substantial portions of the Software.\\n*\\n* THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n*/\\n\\nimport \\\"./utils/Interfaces.sol\\\";\\nimport \\\"./utils/MathUtil.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\ncontract VirtualBalanceWrapper {\\n    IDeposit public deposits;\\n\\n    function totalSupply() public view returns (uint256) {\\n        return deposits.totalSupply();\\n    }\\n\\n    function balanceOf(address account) public view returns (uint256) {\\n        return deposits.balanceOf(account);\\n    }\\n}\\n\\ncontract VirtualBalanceRewardPool is VirtualBalanceWrapper {\\n    IERC20 public rewardToken;\\n    uint256 public constant duration = 7 days;\\n\\n    address public operator;\\n\\n    uint256 public periodFinish = 0;\\n    uint256 public rewardRate = 0;\\n    uint256 public lastUpdateTime;\\n    uint256 public rewardPerTokenStored;\\n    uint256 public queuedRewards = 0;\\n    uint256 public currentRewards = 0;\\n    uint256 public historicalRewards = 0;\\n    uint256 public newRewardRatio = 830;\\n    mapping(address => uint256) public userRewardPerTokenPaid;\\n    mapping(address => uint256) public rewards;\\n\\n    event RewardAdded(uint256 reward);\\n    event Staked(address indexed user, uint256 amount);\\n    event Withdrawn(address indexed user, uint256 amount);\\n    event RewardPaid(address indexed user, uint256 reward);\\n\\n    constructor(\\n        address deposit_,\\n        address reward_,\\n        address op_\\n    ) {\\n        deposits = IDeposit(deposit_);\\n        rewardToken = IERC20(reward_);\\n        operator = op_;\\n    }\\n\\n    modifier updateReward(address account) {\\n        rewardPerTokenStored = rewardPerToken();\\n        lastUpdateTime = lastTimeRewardApplicable();\\n        if (account != address(0)) {\\n            rewards[account] = earned(account);\\n            userRewardPerTokenPaid[account] = rewardPerTokenStored;\\n        }\\n        _;\\n    }\\n\\n    function lastTimeRewardApplicable() public view returns (uint256) {\\n        return MathUtil.min(block.timestamp, periodFinish);\\n    }\\n\\n    function rewardPerToken() public view returns (uint256) {\\n        if (totalSupply() == 0) {\\n            return rewardPerTokenStored;\\n        }\\n        return\\n            rewardPerTokenStored +\\n            (((lastTimeRewardApplicable() - lastUpdateTime) *\\n                rewardRate *\\n                1e18) / totalSupply());\\n    }\\n\\n    function earned(address account) public view returns (uint256) {\\n        return\\n            (balanceOf(account) *\\n                (rewardPerToken() - userRewardPerTokenPaid[account])) /\\n            1e18 +\\n            rewards[account];\\n    }\\n\\n    //update reward, emit, call linked reward's stake\\n    function stake(address _account, uint256 amount)\\n        external\\n        updateReward(_account)\\n    {\\n        require(msg.sender == address(deposits), \\\"!authorized\\\");\\n        require(amount > 0, \\\"VirtualDepositRewardPool: Cannot stake 0\\\");\\n        emit Staked(_account, amount);\\n    }\\n\\n    function withdraw(address _account, uint256 amount)\\n        public\\n        updateReward(_account)\\n    {\\n        require(msg.sender == address(deposits), \\\"!authorized\\\");\\n        //require(amount > 0, 'VirtualDepositRewardPool : Cannot withdraw 0');\\n\\n        emit Withdrawn(_account, amount);\\n    }\\n\\n    function getReward(address _account) public updateReward(_account) {\\n        uint256 reward = earned(_account);\\n        if (reward > 0) {\\n            rewards[_account] = 0;\\n            rewardToken.transfer(_account, reward);\\n            emit RewardPaid(_account, reward);\\n        }\\n    }\\n\\n    function getReward() external {\\n        getReward(msg.sender);\\n    }\\n\\n    function donate(uint256 _amount) external {\\n        IERC20(rewardToken).transferFrom(msg.sender, address(this), _amount);\\n        queuedRewards = queuedRewards + _amount;\\n    }\\n\\n    function queueNewRewards(uint256 _rewards) external {\\n        require(msg.sender == operator, \\\"!authorized\\\");\\n\\n        _rewards = _rewards + queuedRewards;\\n\\n        if (block.timestamp >= periodFinish) {\\n            notifyRewardAmount(_rewards);\\n            queuedRewards = 0;\\n            return;\\n        }\\n\\n        //et = now - (finish-duration)\\n        uint256 elapsedTime = block.timestamp - (periodFinish - duration);\\n        //current at now: rewardRate * elapsedTime\\n        uint256 currentAtNow = rewardRate * elapsedTime;\\n        uint256 queuedRatio = (currentAtNow * 1000) / _rewards;\\n        if (queuedRatio < newRewardRatio) {\\n            notifyRewardAmount(_rewards);\\n            queuedRewards = 0;\\n        } else {\\n            queuedRewards = _rewards;\\n        }\\n    }\\n\\n    function notifyRewardAmount(uint256 reward)\\n        internal\\n        updateReward(address(0))\\n    {\\n        historicalRewards = historicalRewards + reward;\\n        if (block.timestamp >= periodFinish) {\\n            rewardRate = reward / duration;\\n        } else {\\n            uint256 remaining = periodFinish - block.timestamp;\\n            uint256 leftover = remaining * rewardRate;\\n            reward = reward + leftover;\\n            rewardRate = reward / duration;\\n        }\\n        currentRewards = reward;\\n        lastUpdateTime = block.timestamp;\\n        periodFinish = block.timestamp + duration;\\n        emit RewardAdded(reward);\\n    }\\n}\\n\",\"keccak256\":\"0x4e4e22f2625722f90ae40de59df74c5e2170729040a9a5dd1146c4f94440e8a6\",\"license\":\"MIT\"},\"contracts/factories/RewardFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.14;\\n\\nimport \\\"../utils/Interfaces.sol\\\";\\nimport \\\"../BaseRewardPool.sol\\\";\\nimport \\\"../VirtualBalanceRewardPool.sol\\\";\\nimport \\\"../utils/MathUtil.sol\\\";\\n\\n/// @title RewardFactory contract\\ncontract RewardFactory {\\n    using MathUtil for uint256;\\n\\n    event ExtraRewardAdded(address reward, uint256 pid);\\n    event ExtraRewardRemoved(address reward, uint256 pid);\\n    event AccessChanged(address stash, bool status);\\n    event BaseRewardPoolCreated(address poolAddress);\\n    event VirtualBalanceRewardPoolCreated(address poolAddress);\\n\\n    error Unauthorized();\\n\\n    address public immutable bal;\\n    address public immutable operator;\\n\\n    mapping(address => bool) private rewardAccess;\\n    mapping(address => uint256[]) public rewardActiveList;\\n\\n    constructor(address _operator, address _bal) {\\n        operator = _operator;\\n        bal = _bal;\\n    }\\n\\n    /// @notice Get active rewards count\\n    /// @return uint256 number of active rewards\\n    function activeRewardCount(address _reward)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return rewardActiveList[_reward].length;\\n    }\\n\\n    /// @notice Adds a new reward to the active list\\n    /// @return true on success\\n    function addActiveReward(address _reward, uint256 _pid)\\n        external\\n        returns (bool)\\n    {\\n        if (!rewardAccess[msg.sender]) {\\n            revert Unauthorized();\\n        }\\n        uint256 pid = _pid + 1; // offset by 1 so that we can use 0 as empty\\n\\n        uint256[] memory activeListMemory = rewardActiveList[_reward];\\n        for (uint256 i = 0; i < activeListMemory.length; i = i.unsafeInc()) {\\n            if (activeListMemory[i] == pid) return true;\\n        }\\n        rewardActiveList[_reward].push(pid);\\n        emit ExtraRewardAdded(_reward, _pid);\\n        return true;\\n    }\\n\\n    /// @notice Removes active reward\\n    /// @param _reward The address of the reward contract\\n    /// @param _pid The pid of the pool\\n    /// @return true on success\\n    function removeActiveReward(address _reward, uint256 _pid)\\n        external\\n        returns (bool)\\n    {\\n        if (!rewardAccess[msg.sender]) {\\n            revert Unauthorized();\\n        }\\n        uint256 pid = _pid + 1; //offset by 1 so that we can use 0 as empty\\n\\n        uint256[] memory activeListMemory = rewardActiveList[_reward];\\n        for (uint256 i = 0; i < activeListMemory.length; i = i.unsafeInc()) {\\n            if (activeListMemory[i] == pid) {\\n                if (i != activeListMemory.length - 1) {\\n                    rewardActiveList[_reward][i] = rewardActiveList[_reward][\\n                        activeListMemory.length - 1\\n                    ];\\n                }\\n                rewardActiveList[_reward].pop();\\n                emit ExtraRewardRemoved(_reward, _pid);\\n                break;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /// @notice Sets rewardAccess to stash\\n    /// @dev Stash contracts need access to create new Virtual balance pools for extra gauge incentives(ex. snx)\\n    function setAccess(address _stash, bool _status) external {\\n        if (msg.sender != operator) {\\n            revert Unauthorized();\\n        }\\n        rewardAccess[_stash] = _status;\\n        emit AccessChanged(_stash, _status);\\n    }\\n\\n    //Create a Managed Reward Pool to handle distribution of all bal mined in a pool\\n    /// @notice Creates a new Reward pool\\n    /// @param _pid The pid of the pool\\n    /// @param _depositToken address of the token\\n    function createBalRewards(uint256 _pid, address _depositToken)\\n        external\\n        returns (address)\\n    {\\n        if (msg.sender != operator) {\\n            revert Unauthorized();\\n        }\\n\\n        BaseRewardPool rewardPool = new BaseRewardPool(\\n            _pid,\\n            _depositToken,\\n            bal,\\n            msg.sender,\\n            address(this)\\n        );\\n        emit BaseRewardPoolCreated(address(rewardPool));\\n\\n        return address(rewardPool);\\n    }\\n\\n    /// @notice Create a virtual balance reward pool that mimicks the balance of a pool's main reward contract\\n    /// @dev used for extra incentive tokens(ex. snx) as well as vebal fees\\n    /// @param _token address of the token\\n    /// @param _mainRewards address of the main reward pool contract\\n    /// @param _rewardPoolOwner address of the reward pool owner\\n    /// @return address of the new reward pool\\n    function createTokenRewards(\\n        address _token,\\n        address _mainRewards,\\n        address _rewardPoolOwner\\n    ) external returns (address) {\\n        if (msg.sender != operator && !rewardAccess[msg.sender]) {\\n            revert Unauthorized();\\n        }\\n\\n        // create new pool, use main pool for balance lookup\\n        VirtualBalanceRewardPool rewardPool = new VirtualBalanceRewardPool(\\n            _mainRewards,\\n            _token,\\n            _rewardPoolOwner\\n        );\\n        emit VirtualBalanceRewardPoolCreated(address(rewardPool));\\n\\n        address rAddress = address(rewardPool);\\n        // add the new pool to main pool's list of extra rewards, assuming this factory has \\\"reward manager\\\" role\\n        IRewards(_mainRewards).addExtraReward(rAddress);\\n        return rAddress;\\n    }\\n}\\n\",\"keccak256\":\"0x93f91c0351f2e7cd5a95e2404bb49f4ead800b80d22ab9dd89bd77113a66f56a\",\"license\":\"MIT\"},\"contracts/utils/Interfaces.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.14;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IBalGauge {\\n    function deposit(uint256) external;\\n\\n    function balanceOf(address) external view returns (uint256);\\n\\n    function withdraw(uint256) external;\\n\\n    function claim_rewards() external;\\n\\n    function reward_tokens(uint256) external view returns (address);\\n\\n    function lp_token() external view returns (address);\\n}\\n\\ninterface IBalVoteEscrow {\\n    function create_lock(uint256, uint256) external;\\n\\n    function increase_amount(uint256) external;\\n\\n    function increase_unlock_time(uint256) external;\\n\\n    function withdraw() external;\\n\\n    function smart_wallet_checker() external view returns (address);\\n\\n    function balanceOf(address, uint256) external view returns (uint256);\\n\\n    function balanceOfAt(address, uint256) external view returns (uint256);\\n}\\n\\ninterface IWalletChecker {\\n    function check(address) external view returns (bool);\\n}\\n\\ninterface IVoting {\\n    function vote(\\n        uint256,\\n        bool,\\n        bool\\n    ) external; //voteId, support, executeIfDecided\\n\\n    function vote_for_gauge_weights(address, uint256) external;\\n}\\n\\ninterface IMinter {\\n    function mint(address) external;\\n}\\n\\ninterface IVoterProxy {\\n    function deposit(address _token, address _gauge) external;\\n\\n    function withdrawWethBal(\\n        address,\\n        address,\\n        uint256\\n    ) external returns (bool);\\n\\n    function withdraw(IERC20 _asset) external returns (uint256 balance);\\n\\n    function withdraw(\\n        address _token,\\n        address _gauge,\\n        uint256 _amount\\n    ) external;\\n\\n    function withdrawAll(address _token, address _gauge) external;\\n\\n    function createLock(uint256 _value, uint256 _unlockTime) external;\\n\\n    function increaseAmount(uint256 _value) external;\\n\\n    function increaseTime(uint256 _unlockTimestamp) external;\\n\\n    function release() external;\\n\\n    function claimBal(address _gauge) external returns (uint256);\\n\\n    function claimRewards(address _gauge) external;\\n\\n    function claimFees(address _distroContract, IERC20 _token)\\n        external\\n        returns (uint256);\\n\\n    function setStashAccess(address _stash, bool _status) external;\\n\\n    function vote(\\n        uint256 _voteId,\\n        address _votingAddress,\\n        bool _support\\n    ) external;\\n\\n    function voteGaugeWeight(address _gauge, uint256 _weight) external;\\n\\n    function balanceOfPool(address _gauge) external view returns (uint256);\\n\\n    function operator() external view returns (address);\\n\\n    function execute(\\n        address _to,\\n        uint256 _value,\\n        bytes calldata _data\\n    ) external returns (bool, bytes memory);\\n}\\n\\ninterface IRewards {\\n    function stake(address, uint256) external;\\n\\n    function stakeFor(address, uint256) external;\\n\\n    function withdraw(address, uint256) external;\\n\\n    function exit(address) external;\\n\\n    function getReward(address) external;\\n\\n    function queueNewRewards(uint256) external;\\n\\n    function notifyRewardAmount(uint256) external;\\n\\n    function addExtraReward(address) external;\\n\\n    function stakingToken() external view returns (address);\\n\\n    function rewardToken() external view returns (address);\\n\\n    function earned(address account) external view returns (uint256);\\n}\\n\\ninterface IStash {\\n    function stashRewards() external returns (bool);\\n\\n    function processStash() external returns (bool);\\n\\n    function claimRewards() external returns (bool);\\n\\n    function initialize(\\n        uint256 _pid,\\n        address _operator,\\n        address _staker,\\n        address _gauge,\\n        address _rewardFactory\\n    ) external;\\n}\\n\\ninterface IFeeDistro {\\n    /**\\n     * @notice Claims all pending distributions of the provided token for a user.\\n     * @dev It's not necessary to explicitly checkpoint before calling this function, it will ensure the FeeDistributor\\n     * is up to date before calculating the amount of tokens to be claimed.\\n     * @param user - The user on behalf of which to claim.\\n     * @param token - The ERC20 token address to be claimed.\\n     * @return The amount of `token` sent to `user` as a result of claiming.\\n     */\\n    function claimToken(address user, IERC20 token) external returns (uint256);\\n\\n    /**\\n     * @notice Claims a number of tokens on behalf of a user.\\n     * @dev A version of `claimToken` which supports claiming multiple `tokens` on behalf of `user`.\\n     * See `claimToken` for more details.\\n     * @param user - The user on behalf of which to claim.\\n     * @param tokens - An array of ERC20 token addresses to be claimed.\\n     * @return An array of the amounts of each token in `tokens` sent to `user` as a result of claiming.\\n     */\\n    function claimTokens(address user, IERC20[] calldata tokens)\\n        external\\n        returns (uint256[] memory);\\n}\\n\\ninterface ITokenMinter {\\n    function mint(address, uint256) external;\\n\\n    function burn(address, uint256) external;\\n}\\n\\ninterface IDeposit {\\n    function isShutdown() external view returns (bool);\\n\\n    function balanceOf(address _account) external view returns (uint256);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function poolInfo(uint256)\\n        external\\n        view\\n        returns (\\n            address,\\n            address,\\n            address,\\n            address,\\n            address,\\n            bool\\n        );\\n\\n    function rewardClaimed(\\n        uint256,\\n        address,\\n        uint256\\n    ) external;\\n\\n    function withdrawTo(\\n        uint256,\\n        uint256,\\n        address\\n    ) external;\\n\\n    function claimRewards(uint256, address) external returns (bool);\\n\\n    function rewardArbitrator() external returns (address);\\n\\n    function setGaugeRedirect(uint256 _pid) external returns (bool);\\n\\n    function owner() external returns (address);\\n}\\n\\ninterface ICrvDeposit {\\n    function deposit(uint256, bool) external;\\n\\n    function lockIncentive() external view returns (uint256);\\n}\\n\\ninterface IRewardFactory {\\n    function setAccess(address, bool) external;\\n\\n    function createBalRewards(uint256, address) external returns (address);\\n\\n    function createTokenRewards(\\n        address,\\n        address,\\n        address\\n    ) external returns (address);\\n\\n    function activeRewardCount(address) external view returns (uint256);\\n\\n    function addActiveReward(address, uint256) external returns (bool);\\n\\n    function removeActiveReward(address, uint256) external returns (bool);\\n}\\n\\ninterface IStashFactory {\\n    function createStash(\\n        uint256,\\n        address,\\n        address\\n    ) external returns (address);\\n}\\n\\ninterface ITokenFactory {\\n    function createDepositToken(address) external returns (address);\\n}\\n\\ninterface IPools {\\n    function addPool(address, address) external returns (bool);\\n\\n    function forceAddPool(address, address) external returns (bool);\\n\\n    function shutdownPool(uint256) external returns (bool);\\n\\n    function poolInfo(uint256)\\n        external\\n        view\\n        returns (\\n            address,\\n            address,\\n            address,\\n            address,\\n            address,\\n            bool\\n        );\\n\\n    function poolLength() external view returns (uint256);\\n\\n    function gaugeMap(address) external view returns (bool);\\n\\n    function setPoolManager(address _poolM) external;\\n}\\n\\ninterface IVestedEscrow {\\n    function fund(address[] calldata _recipient, uint256[] calldata _amount)\\n        external\\n        returns (bool);\\n}\\n\\ninterface GaugeController {\\n    function gauge_types(address _addr) external returns (int128);\\n}\\n\\ninterface LiquidityGauge {\\n    function integrate_fraction(address _address) external returns (uint256);\\n\\n    function user_checkpoint(address _address) external returns (bool);\\n}\\n\\ninterface IProxyFactory {\\n    function clone(address _target) external returns (address);\\n}\\n\\ninterface IRewardHook {\\n    function onRewardClaim() external;\\n}\\n\",\"keccak256\":\"0xcd7740e1d1cdc1e4e4e34d3d122877418b32ee8aa42f27b497d194d651cb1b0b\",\"license\":\"MIT\"},\"contracts/utils/MathUtil.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.14;\\n\\n// copied from https://github.com/Uniswap/v2-core/blob/master/contracts/libraries/SafeMath.sol\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUtil {\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /// @dev Gas optimization for loops that iterate over extra rewards\\n    /// We know that this can't overflow because we can't interate over big arrays\\n    function unsafeInc(uint256 x) internal pure returns (uint256) {\\n        unchecked {\\n            return x + 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x537a968bce2ed8c6ece0aed375995311568ebf791c3804ff2274a9117274377b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c060405234801561001057600080fd5b50604051613b77380380613b7783398101604081905261002f91610062565b6001600160a01b0391821660a05216608052610095565b80516001600160a01b038116811461005d57600080fd5b919050565b6000806040838503121561007557600080fd5b61007e83610046565b915061008c60208401610046565b90509250929050565b60805160a051613aa16100d660003960008181610168015281816102020152818161035001526106cc015260008181610141015261025f0152613aa16000f3fe608060405234801561001057600080fd5b50600436106100a35760003560e01c8063570ca73511610076578063b7f927b11161005b578063b7f927b11461019d578063b84614a5146101c0578063ef9126ad146101d557600080fd5b8063570ca735146101635780638d9622d91461018a57600080fd5b80630d5843f7146100a857806315914c99146100f15780632f1b3271146101295780633d79d1c81461013c575b600080fd5b6100de6100b6366004610a69565b73ffffffffffffffffffffffffffffffffffffffff1660009081526001602052604090205490565b6040519081526020015b60405180910390f35b6101046100ff366004610a8b565b6101e8565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100e8565b610104610137366004610ab7565b610336565b6101047f000000000000000000000000000000000000000000000000000000000000000081565b6101047f000000000000000000000000000000000000000000000000000000000000000081565b6100de610198366004610afa565b6104fa565b6101b06101ab366004610afa565b61052b565b60405190151581526020016100e8565b6101d36101ce366004610b24565b6106b4565b005b6101b06101e3366004610afa565b6107af565b60003373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610259576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600083837f0000000000000000000000000000000000000000000000000000000000000000333060405161028c90610a26565b94855273ffffffffffffffffffffffffffffffffffffffff938416602086015291831660408501528216606084015216608082015260a001604051809103906000f0801580156102e0573d6000803e3d6000fd5b5060405173ffffffffffffffffffffffffffffffffffffffff821681529091507f5bd44d764a58e71a25d2b30b54bed1ee46db8a4e6cae6b612922e01753648cd89060200160405180910390a190505b92915050565b60003373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000161480159061038e57503360009081526020819052604090205460ff16155b156103c5576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008385846040516103d690610a33565b73ffffffffffffffffffffffffffffffffffffffff938416815291831660208301529091166040820152606001604051809103906000f08015801561041f573d6000803e3d6000fd5b5060405173ffffffffffffffffffffffffffffffffffffffff821681529091507f3bdb7bff5c5800be51c063c354e1ddc160e38051607f3971932c403173406c6a9060200160405180910390a16040517f5e43c47b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8083166004830152829190861690635e43c47b90602401600060405180830381600087803b1580156104d857600080fd5b505af11580156104ec573d6000803e3d6000fd5b509298975050505050505050565b6001602052816000526040600020818154811061051657600080fd5b90600052602060002001600091509150505481565b3360009081526020819052604081205460ff16610574576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610581836001610b8f565b73ffffffffffffffffffffffffffffffffffffffff85166000908152600160209081526040808320805482518185028101850190935280835294955092939092918301828280156105f157602002820191906000526020600020905b8154815260200190600101908083116105dd575b5050505050905060005b8151811015610638578282828151811061061757610617610ba7565b6020026020010151036106305760019350505050610330565b6001016105fb565b5073ffffffffffffffffffffffffffffffffffffffff8516600081815260016020818152604080842080549384018155845292819020909101859055815192835282018690527fccaa4228edc196fe326dc22a0e85f8229bb3ade47ee6aaa15ce84cd8f655103c910160405180910390a1506001949350505050565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610723576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff82166000818152602081815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00168515159081179091558251938452908301527fa4db2f7b38cef7c9aa9b5b2ae37b4a06e94048ba87583a6de6b5fd51e45b29fb910160405180910390a15050565b3360009081526020819052604081205460ff166107f8576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610805836001610b8f565b73ffffffffffffffffffffffffffffffffffffffff851660009081526001602090815260408083208054825181850281018501909352808352949550929390929183018282801561087557602002820191906000526020600020905b815481526020019060010190808311610861575b5050505050905060005b8151811015610a1a578282828151811061089b5761089b610ba7565b602002602001015103610a1257600182516108b69190610bd6565b81146109695773ffffffffffffffffffffffffffffffffffffffff86166000908152600160208190526040909120835190916108f191610bd6565b8154811061090157610901610ba7565b9060005260206000200154600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020828154811061095c5761095c610ba7565b6000918252602090912001555b73ffffffffffffffffffffffffffffffffffffffff8616600090815260016020526040902080548061099d5761099d610bed565b600190038181906000526020600020016000905590557fbc9ef12cf81dc2bfe808c00e39a5cf69b38ff4e9e7f8bd964be6d463254a24668686604051610a0592919073ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b60405180910390a1610a1a565b60010161087f565b50600195945050505050565b611e1380610c1d83390190565b61103c80612a3083390190565b803573ffffffffffffffffffffffffffffffffffffffff81168114610a6457600080fd5b919050565b600060208284031215610a7b57600080fd5b610a8482610a40565b9392505050565b60008060408385031215610a9e57600080fd5b82359150610aae60208401610a40565b90509250929050565b600080600060608486031215610acc57600080fd5b610ad584610a40565b9250610ae360208501610a40565b9150610af160408501610a40565b90509250925092565b60008060408385031215610b0d57600080fd5b610b1683610a40565b946020939093013593505050565b60008060408385031215610b3757600080fd5b610b4083610a40565b915060208301358015158114610b5557600080fd5b809150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008219821115610ba257610ba2610b60565b500190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082821015610be857610be8610b60565b500390565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfe6101006040523480156200001257600080fd5b5060405162001e1338038062001e1383398101604081905262000035916200007b565b6000949094556001600160a01b0392831660a052908216608052811660c0521660e052620000e2565b80516001600160a01b03811681146200007657600080fd5b919050565b600080600080600060a086880312156200009457600080fd5b85519450620000a6602087016200005e565b9350620000b6604087016200005e565b9250620000c6606087016200005e565b9150620000d6608087016200005e565b90509295509295909350565b60805160a05160c05160e051611cb162000162600039600081816102900152610b8401526000818161037901528181610a6601528181610e9f01526114a9015260008181610418015281816107290152818161093b015281816110e301526112b00152600081816104ee01528181610dd801526115dc0152611cb16000f3fe608060405234801561001057600080fd5b50600436106102405760003560e01c80637050ccd911610145578063c32e7202116100bd578063df136d651161008c578063f106845411610071578063f1068454146104cd578063f14faf6f146104d6578063f7c618c1146104e957600080fd5b8063df136d65146104bb578063ebe2b12b146104c457600080fd5b8063c32e72021461048f578063c8f33c91146104a2578063cd3daf9d146104ab578063d55a23f4146104b357600080fd5b806380faa57d116101145780638dcb4061116100f95780638dcb40611461046b578063901a7d5314610473578063a694fc3a1461047c57600080fd5b806380faa57d146104435780638b8763471461044b57600080fd5b80637050ccd9146103ca57806370a08231146103dd57806372f702f3146104135780637b0a47ee1461043a57600080fd5b806338d07436116101d85780634cfe2f4a116101a7578063590a41f51161018c578063590a41f51461039b5780635e43c47b146103ae57806363d38c3b146103c157600080fd5b80634cfe2f4a1461036b578063570ca7351461037457600080fd5b806338d074361461032a5780633d18b9121461033d57806340c354461461034557806349f039a21461035857600080fd5b80631be05289116102145780631be05289146102df5780631c1c6fe5146102e9578063262d3d6d146102fe5780632ee409081461030757600080fd5b80628cc262146102455780630700037d1461026b5780630f4ef8a61461028b57806318160ddd146102d7575b600080fd5b610258610253366004611a58565b610510565b6040519081526020015b60405180910390f35b610258610279366004611a58565b600a6020526000908152604090205481565b6102b27f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610262565b600854610258565b61025862093a8081565b6102fc6102f7366004611a84565b6105a7565b005b61025860075481565b61031a610315366004611aa1565b6105c5565b6040519015158152602001610262565b61031a610338366004611acb565b6107f3565b61031a6109fc565b6102b2610353366004611afb565b610a11565b6102fc610366366004611a84565b610a48565b61025861033e81565b6102b27f000000000000000000000000000000000000000000000000000000000000000081565b61031a6103a9366004611afb565b610a62565b61031a6103bc366004611a58565b610b80565b61025860055481565b61031a6103d8366004611b14565b610cee565b6102586103eb366004611a58565b73ffffffffffffffffffffffffffffffffffffffff166000908152600b602052604090205490565b6102b27f000000000000000000000000000000000000000000000000000000000000000081565b61025860025481565b610258611088565b610258610459366004611a58565b60096020526000908152604090205481565b61031a61109b565b61025860065481565b61031a61048a366004611afb565b611162565b61031a61049d366004611acb565b61135c565b61025860035481565b610258611537565b600c54610258565b61025860045481565b61025860015481565b61025860005481565b61031a6104e4366004611afb565b61159e565b6102b27f000000000000000000000000000000000000000000000000000000000000000081565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600a60209081526040808320546009909252822054670de0b6b3a764000090610553611537565b61055d9190611b6f565b73ffffffffffffffffffffffffffffffffffffffff85166000908152600b602052604090205461058d9190611b86565b6105979190611bc3565b6105a19190611bfe565b92915050565b336000908152600b60205260409020546105c190826107f3565b5050565b6000826105d0611537565b6004556105db611088565b60035573ffffffffffffffffffffffffffffffffffffffff81161561063c5761060381610510565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600a60209081526040808320939093556004546009909152919020555b6001831015610677576040517f2c5211c600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6106818484611678565b8260085461068f9190611bfe565b60085573ffffffffffffffffffffffffffffffffffffffff84166000908152600b60205260409020546106c3908490611bfe565b73ffffffffffffffffffffffffffffffffffffffff8581166000908152600b6020526040908190209290925590517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018590527f0000000000000000000000000000000000000000000000000000000000000000909116906323b872dd906064016020604051808303816000875af1158015610774573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107989190611c16565b508373ffffffffffffffffffffffffffffffffffffffff167f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d846040516107e191815260200190565b60405180910390a25060019392505050565b6000336107fe611537565b600455610809611088565b60035573ffffffffffffffffffffffffffffffffffffffff81161561086a5761083181610510565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600a60209081526040808320939093556004546009909152919020555b60018410156108a5576040517f2c5211c600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6108af33856117ad565b836008546108bd9190611b6f565b600855336000908152600b60205260409020546108db908590611b6f565b336000818152600b6020526040908190209290925590517fa9059cbb00000000000000000000000000000000000000000000000000000000815260048101919091526024810185905273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303816000875af1158015610984573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109a89190611c16565b5060405184815233907f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5906020015b60405180910390a282156109f2576109f0336001610cee565b505b5060019392505050565b6000610a09336001610cee565b506001905090565b600c8181548110610a2157600080fd5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b336000908152600b60205260409020546105c1908261135c565b60007f00000000000000000000000000000000000000000000000000000000000000003373ffffffffffffffffffffffffffffffffffffffff821614610ad4576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600554610ae19084611bfe565b92506001544210610b0357610af5836118dc565b600060055560019150610b7a565b600062093a80600154610b169190611b6f565b610b209042611b6f565b9050600081600254610b329190611b86565b9050600085610b43836103e8611b86565b610b4d9190611bc3565b905061033e811015610b6c57610b62866118dc565b6000600555610b72565b60058690555b600194505050505b50919050565b60007f00000000000000000000000000000000000000000000000000000000000000003373ffffffffffffffffffffffffffffffffffffffff821614610bf2576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8316610c73576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f217265776172642073657474696e670000000000000000000000000000000000604482015260640160405180910390fd5b600c8054600181810183556000929092527fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c701805473ffffffffffffffffffffffffffffffffffffffff86167fffffffffffffffffffffffff0000000000000000000000000000000000000000909116179055915050919050565b600082610cf9611537565b600455610d04611088565b60035573ffffffffffffffffffffffffffffffffffffffff811615610d6557610d2c81610510565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600a60209081526040808320939093556004546009909152919020555b6000610d7085610510565b90508015610f4c5773ffffffffffffffffffffffffffffffffffffffff8581166000818152600a602052604080822091909155517fa9059cbb0000000000000000000000000000000000000000000000000000000081526004810191909152602481018390527f00000000000000000000000000000000000000000000000000000000000000009091169063a9059cbb906044016020604051808303816000875af1158015610e23573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e479190611c16565b506000546040517f71192b17000000000000000000000000000000000000000000000000000000008152600481019190915273ffffffffffffffffffffffffffffffffffffffff8681166024830152604482018390527f000000000000000000000000000000000000000000000000000000000000000016906371192b1790606401600060405180830381600087803b158015610ee357600080fd5b505af1158015610ef7573d6000803e3d6000fd5b505050508473ffffffffffffffffffffffffffffffffffffffff167fe2403640ba68fed3a2f88b7557551d1993f84b99bb10ff833f0cf8db0c5e048682604051610f4391815260200190565b60405180910390a25b831561107d576000600c805480602002602001604051908101604052809291908181526020018280548015610fb757602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311610f8c575b5050505050905060005b815181101561107a57818181518110610fdc57610fdc611c33565b60209081029190910101516040517fc00007b000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff89811660048301529091169063c00007b090602401600060405180830381600087803b15801561105157600080fd5b505af1158015611065573d6000803e3d6000fd5b505050506110738160010190565b9050610fc1565b50505b506001949350505050565b600061109642600154611a17565b905090565b6040517f70a08231000000000000000000000000000000000000000000000000000000008152336004820152600090819073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa15801561112a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061114e9190611c62565b905061115981611162565b50600191505090565b60003361116d611537565b600455611178611088565b60035573ffffffffffffffffffffffffffffffffffffffff8116156111d9576111a081610510565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600a60209081526040808320939093556004546009909152919020555b6001831015611214576040517f2c5211c600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61121e3384611678565b8260085461122c9190611bfe565b600855336000908152600b602052604090205461124a908490611bfe565b336000818152600b6020526040908190209290925590517f23b872dd00000000000000000000000000000000000000000000000000000000815260048101919091523060248201526044810184905273ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016906323b872dd906064016020604051808303816000875af11580156112f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061131d9190611c16565b5060405183815233907f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d9060200160405180910390a250600192915050565b600033611367611537565b600455611372611088565b60035573ffffffffffffffffffffffffffffffffffffffff8116156113d35761139a81610510565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600a60209081526040808320939093556004546009909152919020555b600184101561140e576040517f2c5211c600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61141833856117ad565b836008546114269190611b6f565b600855336000908152600b6020526040902054611444908590611b6f565b336000818152600b6020526040808220939093555491517f14cd70e4000000000000000000000000000000000000000000000000000000008152600481019290925260248201869052604482015273ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016906314cd70e490606401600060405180830381600087803b1580156114ed57600080fd5b505af1158015611501573d6000803e3d6000fd5b50506040518681523392507f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d591506020016109d7565b600061154260085490565b600003611550575060045490565b600854600254600354611561611088565b61156b9190611b6f565b6115759190611b86565b61158790670de0b6b3a7640000611b86565b6115919190611bc3565b6004546110969190611bfe565b6040517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018290526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906323b872dd906064016020604051808303816000875af115801561163a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061165e9190611c16565b508160055461166d9190611bfe565b600555506001919050565b6000600c8054806020026020016040519081016040528092919081815260200182805480156116dd57602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff1681526001909101906020018083116116b2575b5050505050905060005b81518110156117a75781818151811061170257611702611c33565b60209081029190910101516040517fadc9772e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8681166004830152602482018690529091169063adc9772e90604401600060405180830381600087803b15801561177e57600080fd5b505af1158015611792573d6000803e3d6000fd5b505050506117a08160010190565b90506116e7565b50505050565b6000600c80548060200260200160405190810160405280929190818152602001828054801561181257602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff1681526001909101906020018083116117e7575b5050505050905060005b81518110156117a75781818151811061183757611837611c33565b60209081029190910101516040517ff3fef3a300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8681166004830152602482018690529091169063f3fef3a390604401600060405180830381600087803b1580156118b357600080fd5b505af11580156118c7573d6000803e3d6000fd5b505050506118d58160010190565b905061181c565b60006118e6611537565b6004556118f1611088565b60035573ffffffffffffffffffffffffffffffffffffffff8116156119525761191981610510565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600a60209081526040808320939093556004546009909152919020555b816007546119609190611bfe565b60075560015442106119815761197962093a8083611bc3565b6002556119c4565b6000426001546119919190611b6f565b90506000600254826119a39190611b86565b90506119af8185611bfe565b93506119be62093a8085611bc3565b60025550505b60068290554260038190556119dd9062093a8090611bfe565b6001556040518281527fde88a922e0d3b88b24e9623efeb464919c6bf9f66857a65e2bfcf2ce87a9433d9060200160405180910390a15050565b6000818310611a265781611a28565b825b9392505050565b803573ffffffffffffffffffffffffffffffffffffffff81168114611a5357600080fd5b919050565b600060208284031215611a6a57600080fd5b611a2882611a2f565b8015158114611a8157600080fd5b50565b600060208284031215611a9657600080fd5b8135611a2881611a73565b60008060408385031215611ab457600080fd5b611abd83611a2f565b946020939093013593505050565b60008060408385031215611ade57600080fd5b823591506020830135611af081611a73565b809150509250929050565b600060208284031215611b0d57600080fd5b5035919050565b60008060408385031215611b2757600080fd5b611b3083611a2f565b91506020830135611af081611a73565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082821015611b8157611b81611b40565b500390565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611bbe57611bbe611b40565b500290565b600082611bf9577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b60008219821115611c1157611c11611b40565b500190565b600060208284031215611c2857600080fd5b8151611a2881611a73565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600060208284031215611c7457600080fd5b505191905056fea26469706673582212209185c5f36939e9cb24edfdbcb31e9faa5caad57ae38cf22aaf936be6ad8d294764736f6c634300080e003360806040526000600355600060045560006007556000600855600060095561033e600a5534801561002f57600080fd5b5060405161103c38038061103c83398101604081905261004e916100ac565b600080546001600160a01b039485166001600160a01b0319918216179091556001805493851693821693909317909255600280549190931691161790556100ef565b80516001600160a01b03811681146100a757600080fd5b919050565b6000806000606084860312156100c157600080fd5b6100ca84610090565b92506100d860208501610090565b91506100e660408501610090565b90509250925092565b610f3e806100fe6000396000f3fe608060405234801561001057600080fd5b50600436106101a25760003560e01c80637b0a47ee116100ee578063c8f33c9111610097578063ebe2b12b11610071578063ebe2b12b14610329578063f14faf6f14610332578063f3fef3a314610345578063f7c618c11461035857600080fd5b8063c8f33c911461030f578063cd3daf9d14610318578063df136d651461032057600080fd5b8063901a7d53116100c8578063901a7d53146102e0578063adc9772e146102e9578063c00007b0146102fc57600080fd5b80637b0a47ee146102af57806380faa57d146102b85780638b876347146102c057600080fd5b80633d18b9121161015057806363d38c3b1161012a57806363d38c3b1461028a5780636c8bcee81461029357806370a082311461029c57600080fd5b80633d18b9121461024d578063570ca73514610257578063590a41f51461027757600080fd5b806318160ddd1161018157806318160ddd146101f7578063262d3d6d146101ff578063323a5e0b1461020857600080fd5b80628cc262146101a75780630700037d146101cd5780630fb5a6b4146101ed575b600080fd5b6101ba6101b5366004610d99565b610378565b6040519081526020015b60405180910390f35b6101ba6101db366004610d99565b600c6020526000908152604090205481565b6101ba62093a8081565b6101ba6103f2565b6101ba60095481565b6000546102289073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101c4565b610255610489565b005b6002546102289073ffffffffffffffffffffffffffffffffffffffff1681565b610255610285366004610db4565b610494565b6101ba60075481565b6101ba600a5481565b6101ba6102aa366004610d99565b6105b8565b6101ba60045481565b6101ba61064d565b6101ba6102ce366004610d99565b600b6020526000908152604090205481565b6101ba60085481565b6102556102f7366004610dcd565b61065b565b61025561030a366004610d99565b610836565b6101ba60055481565b6101ba6109be565b6101ba60065481565b6101ba60035481565b610255610340366004610db4565b610a29565b610255610353366004610dcd565b610adf565b6001546102289073ffffffffffffffffffffffffffffffffffffffff1681565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600c6020908152604080832054600b909252822054670de0b6b3a7640000906103bb6109be565b6103c59190610e26565b6103ce856105b8565b6103d89190610e3d565b6103e29190610e7a565b6103ec9190610eb5565b92915050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610460573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104849190610ecd565b905090565b61049233610836565b565b60025473ffffffffffffffffffffffffffffffffffffffff16331461051a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f21617574686f72697a656400000000000000000000000000000000000000000060448201526064015b60405180910390fd5b6007546105279082610eb5565b905060035442106105435761053b81610c1d565b506000600755565b600062093a806003546105569190610e26565b6105609042610e26565b90506000816004546105729190610e3d565b9050600083610583836103e8610e3d565b61058d9190610e7a565b9050600a548110156105ac576105a284610c1d565b60006007556105b2565b60078490555b50505050565b600080546040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8481166004830152909116906370a0823190602401602060405180830381865afa158015610629573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ec9190610ecd565b600061048442600354610d58565b816106646109be565b60065561066f61064d565b60055573ffffffffffffffffffffffffffffffffffffffff8116156106d05761069781610378565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600c6020908152604080832093909355600654600b909152919020555b60005473ffffffffffffffffffffffffffffffffffffffff163314610751576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f21617574686f72697a65640000000000000000000000000000000000000000006044820152606401610511565b600082116107e1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f5669727475616c4465706f736974526577617264506f6f6c3a2043616e6e6f7460448201527f207374616b6520300000000000000000000000000000000000000000000000006064820152608401610511565b8273ffffffffffffffffffffffffffffffffffffffff167f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d8360405161082991815260200190565b60405180910390a2505050565b8061083f6109be565b60065561084a61064d565b60055573ffffffffffffffffffffffffffffffffffffffff8116156108ab5761087281610378565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600c6020908152604080832093909355600654600b909152919020555b60006108b683610378565b905080156109b95773ffffffffffffffffffffffffffffffffffffffff8381166000818152600c60205260408082209190915560015490517fa9059cbb0000000000000000000000000000000000000000000000000000000081526004810192909252602482018490529091169063a9059cbb906044016020604051808303816000875af115801561094c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109709190610ee6565b508273ffffffffffffffffffffffffffffffffffffffff167fe2403640ba68fed3a2f88b7557551d1993f84b99bb10ff833f0cf8db0c5e04868260405161082991815260200190565b505050565b60006109c86103f2565b6000036109d6575060065490565b6109de6103f2565b6004546005546109ec61064d565b6109f69190610e26565b610a009190610e3d565b610a1290670de0b6b3a7640000610e3d565b610a1c9190610e7a565b6006546104849190610eb5565b6001546040517f23b872dd0000000000000000000000000000000000000000000000000000000081523360048201523060248201526044810183905273ffffffffffffffffffffffffffffffffffffffff909116906323b872dd906064016020604051808303816000875af1158015610aa6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aca9190610ee6565b5080600754610ad99190610eb5565b60075550565b81610ae86109be565b600655610af361064d565b60055573ffffffffffffffffffffffffffffffffffffffff811615610b5457610b1b81610378565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600c6020908152604080832093909355600654600b909152919020555b60005473ffffffffffffffffffffffffffffffffffffffff163314610bd5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f21617574686f72697a65640000000000000000000000000000000000000000006044820152606401610511565b8273ffffffffffffffffffffffffffffffffffffffff167f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d58360405161082991815260200190565b6000610c276109be565b600655610c3261064d565b60055573ffffffffffffffffffffffffffffffffffffffff811615610c9357610c5a81610378565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600c6020908152604080832093909355600654600b909152919020555b81600954610ca19190610eb5565b6009556003544210610cc257610cba62093a8083610e7a565b600455610d05565b600042600354610cd29190610e26565b9050600060045482610ce49190610e3d565b9050610cf08185610eb5565b9350610cff62093a8085610e7a565b60045550505b6008829055426005819055610d1e9062093a8090610eb5565b6003556040518281527fde88a922e0d3b88b24e9623efeb464919c6bf9f66857a65e2bfcf2ce87a9433d9060200160405180910390a15050565b6000818310610d675781610d69565b825b9392505050565b803573ffffffffffffffffffffffffffffffffffffffff81168114610d9457600080fd5b919050565b600060208284031215610dab57600080fd5b610d6982610d70565b600060208284031215610dc657600080fd5b5035919050565b60008060408385031215610de057600080fd5b610de983610d70565b946020939093013593505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082821015610e3857610e38610df7565b500390565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610e7557610e75610df7565b500290565b600082610eb0577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b60008219821115610ec857610ec8610df7565b500190565b600060208284031215610edf57600080fd5b5051919050565b600060208284031215610ef857600080fd5b81518015158114610d6957600080fdfea2646970667358221220ff30394f583f5fe38833f3bdb8c2b90cd7da8ce928af9203ecd19f336a9496c364736f6c634300080e0033a2646970667358221220e0b30cf68657cb4d76301092f4fe94de7f5798d87e6ee17e985ae5d596fd984c64736f6c634300080e0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100a35760003560e01c8063570ca73511610076578063b7f927b11161005b578063b7f927b11461019d578063b84614a5146101c0578063ef9126ad146101d557600080fd5b8063570ca735146101635780638d9622d91461018a57600080fd5b80630d5843f7146100a857806315914c99146100f15780632f1b3271146101295780633d79d1c81461013c575b600080fd5b6100de6100b6366004610a69565b73ffffffffffffffffffffffffffffffffffffffff1660009081526001602052604090205490565b6040519081526020015b60405180910390f35b6101046100ff366004610a8b565b6101e8565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100e8565b610104610137366004610ab7565b610336565b6101047f000000000000000000000000000000000000000000000000000000000000000081565b6101047f000000000000000000000000000000000000000000000000000000000000000081565b6100de610198366004610afa565b6104fa565b6101b06101ab366004610afa565b61052b565b60405190151581526020016100e8565b6101d36101ce366004610b24565b6106b4565b005b6101b06101e3366004610afa565b6107af565b60003373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610259576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600083837f0000000000000000000000000000000000000000000000000000000000000000333060405161028c90610a26565b94855273ffffffffffffffffffffffffffffffffffffffff938416602086015291831660408501528216606084015216608082015260a001604051809103906000f0801580156102e0573d6000803e3d6000fd5b5060405173ffffffffffffffffffffffffffffffffffffffff821681529091507f5bd44d764a58e71a25d2b30b54bed1ee46db8a4e6cae6b612922e01753648cd89060200160405180910390a190505b92915050565b60003373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000161480159061038e57503360009081526020819052604090205460ff16155b156103c5576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008385846040516103d690610a33565b73ffffffffffffffffffffffffffffffffffffffff938416815291831660208301529091166040820152606001604051809103906000f08015801561041f573d6000803e3d6000fd5b5060405173ffffffffffffffffffffffffffffffffffffffff821681529091507f3bdb7bff5c5800be51c063c354e1ddc160e38051607f3971932c403173406c6a9060200160405180910390a16040517f5e43c47b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8083166004830152829190861690635e43c47b90602401600060405180830381600087803b1580156104d857600080fd5b505af11580156104ec573d6000803e3d6000fd5b509298975050505050505050565b6001602052816000526040600020818154811061051657600080fd5b90600052602060002001600091509150505481565b3360009081526020819052604081205460ff16610574576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610581836001610b8f565b73ffffffffffffffffffffffffffffffffffffffff85166000908152600160209081526040808320805482518185028101850190935280835294955092939092918301828280156105f157602002820191906000526020600020905b8154815260200190600101908083116105dd575b5050505050905060005b8151811015610638578282828151811061061757610617610ba7565b6020026020010151036106305760019350505050610330565b6001016105fb565b5073ffffffffffffffffffffffffffffffffffffffff8516600081815260016020818152604080842080549384018155845292819020909101859055815192835282018690527fccaa4228edc196fe326dc22a0e85f8229bb3ade47ee6aaa15ce84cd8f655103c910160405180910390a1506001949350505050565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610723576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff82166000818152602081815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00168515159081179091558251938452908301527fa4db2f7b38cef7c9aa9b5b2ae37b4a06e94048ba87583a6de6b5fd51e45b29fb910160405180910390a15050565b3360009081526020819052604081205460ff166107f8576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610805836001610b8f565b73ffffffffffffffffffffffffffffffffffffffff851660009081526001602090815260408083208054825181850281018501909352808352949550929390929183018282801561087557602002820191906000526020600020905b815481526020019060010190808311610861575b5050505050905060005b8151811015610a1a578282828151811061089b5761089b610ba7565b602002602001015103610a1257600182516108b69190610bd6565b81146109695773ffffffffffffffffffffffffffffffffffffffff86166000908152600160208190526040909120835190916108f191610bd6565b8154811061090157610901610ba7565b9060005260206000200154600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020828154811061095c5761095c610ba7565b6000918252602090912001555b73ffffffffffffffffffffffffffffffffffffffff8616600090815260016020526040902080548061099d5761099d610bed565b600190038181906000526020600020016000905590557fbc9ef12cf81dc2bfe808c00e39a5cf69b38ff4e9e7f8bd964be6d463254a24668686604051610a0592919073ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b60405180910390a1610a1a565b60010161087f565b50600195945050505050565b611e1380610c1d83390190565b61103c80612a3083390190565b803573ffffffffffffffffffffffffffffffffffffffff81168114610a6457600080fd5b919050565b600060208284031215610a7b57600080fd5b610a8482610a40565b9392505050565b60008060408385031215610a9e57600080fd5b82359150610aae60208401610a40565b90509250929050565b600080600060608486031215610acc57600080fd5b610ad584610a40565b9250610ae360208501610a40565b9150610af160408501610a40565b90509250925092565b60008060408385031215610b0d57600080fd5b610b1683610a40565b946020939093013593505050565b60008060408385031215610b3757600080fd5b610b4083610a40565b915060208301358015158114610b5557600080fd5b809150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008219821115610ba257610ba2610b60565b500190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082821015610be857610be8610b60565b500390565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfe6101006040523480156200001257600080fd5b5060405162001e1338038062001e1383398101604081905262000035916200007b565b6000949094556001600160a01b0392831660a052908216608052811660c0521660e052620000e2565b80516001600160a01b03811681146200007657600080fd5b919050565b600080600080600060a086880312156200009457600080fd5b85519450620000a6602087016200005e565b9350620000b6604087016200005e565b9250620000c6606087016200005e565b9150620000d6608087016200005e565b90509295509295909350565b60805160a05160c05160e051611cb162000162600039600081816102900152610b8401526000818161037901528181610a6601528181610e9f01526114a9015260008181610418015281816107290152818161093b015281816110e301526112b00152600081816104ee01528181610dd801526115dc0152611cb16000f3fe608060405234801561001057600080fd5b50600436106102405760003560e01c80637050ccd911610145578063c32e7202116100bd578063df136d651161008c578063f106845411610071578063f1068454146104cd578063f14faf6f146104d6578063f7c618c1146104e957600080fd5b8063df136d65146104bb578063ebe2b12b146104c457600080fd5b8063c32e72021461048f578063c8f33c91146104a2578063cd3daf9d146104ab578063d55a23f4146104b357600080fd5b806380faa57d116101145780638dcb4061116100f95780638dcb40611461046b578063901a7d5314610473578063a694fc3a1461047c57600080fd5b806380faa57d146104435780638b8763471461044b57600080fd5b80637050ccd9146103ca57806370a08231146103dd57806372f702f3146104135780637b0a47ee1461043a57600080fd5b806338d07436116101d85780634cfe2f4a116101a7578063590a41f51161018c578063590a41f51461039b5780635e43c47b146103ae57806363d38c3b146103c157600080fd5b80634cfe2f4a1461036b578063570ca7351461037457600080fd5b806338d074361461032a5780633d18b9121461033d57806340c354461461034557806349f039a21461035857600080fd5b80631be05289116102145780631be05289146102df5780631c1c6fe5146102e9578063262d3d6d146102fe5780632ee409081461030757600080fd5b80628cc262146102455780630700037d1461026b5780630f4ef8a61461028b57806318160ddd146102d7575b600080fd5b610258610253366004611a58565b610510565b6040519081526020015b60405180910390f35b610258610279366004611a58565b600a6020526000908152604090205481565b6102b27f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610262565b600854610258565b61025862093a8081565b6102fc6102f7366004611a84565b6105a7565b005b61025860075481565b61031a610315366004611aa1565b6105c5565b6040519015158152602001610262565b61031a610338366004611acb565b6107f3565b61031a6109fc565b6102b2610353366004611afb565b610a11565b6102fc610366366004611a84565b610a48565b61025861033e81565b6102b27f000000000000000000000000000000000000000000000000000000000000000081565b61031a6103a9366004611afb565b610a62565b61031a6103bc366004611a58565b610b80565b61025860055481565b61031a6103d8366004611b14565b610cee565b6102586103eb366004611a58565b73ffffffffffffffffffffffffffffffffffffffff166000908152600b602052604090205490565b6102b27f000000000000000000000000000000000000000000000000000000000000000081565b61025860025481565b610258611088565b610258610459366004611a58565b60096020526000908152604090205481565b61031a61109b565b61025860065481565b61031a61048a366004611afb565b611162565b61031a61049d366004611acb565b61135c565b61025860035481565b610258611537565b600c54610258565b61025860045481565b61025860015481565b61025860005481565b61031a6104e4366004611afb565b61159e565b6102b27f000000000000000000000000000000000000000000000000000000000000000081565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600a60209081526040808320546009909252822054670de0b6b3a764000090610553611537565b61055d9190611b6f565b73ffffffffffffffffffffffffffffffffffffffff85166000908152600b602052604090205461058d9190611b86565b6105979190611bc3565b6105a19190611bfe565b92915050565b336000908152600b60205260409020546105c190826107f3565b5050565b6000826105d0611537565b6004556105db611088565b60035573ffffffffffffffffffffffffffffffffffffffff81161561063c5761060381610510565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600a60209081526040808320939093556004546009909152919020555b6001831015610677576040517f2c5211c600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6106818484611678565b8260085461068f9190611bfe565b60085573ffffffffffffffffffffffffffffffffffffffff84166000908152600b60205260409020546106c3908490611bfe565b73ffffffffffffffffffffffffffffffffffffffff8581166000908152600b6020526040908190209290925590517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018590527f0000000000000000000000000000000000000000000000000000000000000000909116906323b872dd906064016020604051808303816000875af1158015610774573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107989190611c16565b508373ffffffffffffffffffffffffffffffffffffffff167f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d846040516107e191815260200190565b60405180910390a25060019392505050565b6000336107fe611537565b600455610809611088565b60035573ffffffffffffffffffffffffffffffffffffffff81161561086a5761083181610510565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600a60209081526040808320939093556004546009909152919020555b60018410156108a5576040517f2c5211c600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6108af33856117ad565b836008546108bd9190611b6f565b600855336000908152600b60205260409020546108db908590611b6f565b336000818152600b6020526040908190209290925590517fa9059cbb00000000000000000000000000000000000000000000000000000000815260048101919091526024810185905273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303816000875af1158015610984573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109a89190611c16565b5060405184815233907f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5906020015b60405180910390a282156109f2576109f0336001610cee565b505b5060019392505050565b6000610a09336001610cee565b506001905090565b600c8181548110610a2157600080fd5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b336000908152600b60205260409020546105c1908261135c565b60007f00000000000000000000000000000000000000000000000000000000000000003373ffffffffffffffffffffffffffffffffffffffff821614610ad4576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600554610ae19084611bfe565b92506001544210610b0357610af5836118dc565b600060055560019150610b7a565b600062093a80600154610b169190611b6f565b610b209042611b6f565b9050600081600254610b329190611b86565b9050600085610b43836103e8611b86565b610b4d9190611bc3565b905061033e811015610b6c57610b62866118dc565b6000600555610b72565b60058690555b600194505050505b50919050565b60007f00000000000000000000000000000000000000000000000000000000000000003373ffffffffffffffffffffffffffffffffffffffff821614610bf2576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8316610c73576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f217265776172642073657474696e670000000000000000000000000000000000604482015260640160405180910390fd5b600c8054600181810183556000929092527fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c701805473ffffffffffffffffffffffffffffffffffffffff86167fffffffffffffffffffffffff0000000000000000000000000000000000000000909116179055915050919050565b600082610cf9611537565b600455610d04611088565b60035573ffffffffffffffffffffffffffffffffffffffff811615610d6557610d2c81610510565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600a60209081526040808320939093556004546009909152919020555b6000610d7085610510565b90508015610f4c5773ffffffffffffffffffffffffffffffffffffffff8581166000818152600a602052604080822091909155517fa9059cbb0000000000000000000000000000000000000000000000000000000081526004810191909152602481018390527f00000000000000000000000000000000000000000000000000000000000000009091169063a9059cbb906044016020604051808303816000875af1158015610e23573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e479190611c16565b506000546040517f71192b17000000000000000000000000000000000000000000000000000000008152600481019190915273ffffffffffffffffffffffffffffffffffffffff8681166024830152604482018390527f000000000000000000000000000000000000000000000000000000000000000016906371192b1790606401600060405180830381600087803b158015610ee357600080fd5b505af1158015610ef7573d6000803e3d6000fd5b505050508473ffffffffffffffffffffffffffffffffffffffff167fe2403640ba68fed3a2f88b7557551d1993f84b99bb10ff833f0cf8db0c5e048682604051610f4391815260200190565b60405180910390a25b831561107d576000600c805480602002602001604051908101604052809291908181526020018280548015610fb757602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311610f8c575b5050505050905060005b815181101561107a57818181518110610fdc57610fdc611c33565b60209081029190910101516040517fc00007b000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff89811660048301529091169063c00007b090602401600060405180830381600087803b15801561105157600080fd5b505af1158015611065573d6000803e3d6000fd5b505050506110738160010190565b9050610fc1565b50505b506001949350505050565b600061109642600154611a17565b905090565b6040517f70a08231000000000000000000000000000000000000000000000000000000008152336004820152600090819073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa15801561112a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061114e9190611c62565b905061115981611162565b50600191505090565b60003361116d611537565b600455611178611088565b60035573ffffffffffffffffffffffffffffffffffffffff8116156111d9576111a081610510565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600a60209081526040808320939093556004546009909152919020555b6001831015611214576040517f2c5211c600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61121e3384611678565b8260085461122c9190611bfe565b600855336000908152600b602052604090205461124a908490611bfe565b336000818152600b6020526040908190209290925590517f23b872dd00000000000000000000000000000000000000000000000000000000815260048101919091523060248201526044810184905273ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016906323b872dd906064016020604051808303816000875af11580156112f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061131d9190611c16565b5060405183815233907f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d9060200160405180910390a250600192915050565b600033611367611537565b600455611372611088565b60035573ffffffffffffffffffffffffffffffffffffffff8116156113d35761139a81610510565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600a60209081526040808320939093556004546009909152919020555b600184101561140e576040517f2c5211c600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61141833856117ad565b836008546114269190611b6f565b600855336000908152600b6020526040902054611444908590611b6f565b336000818152600b6020526040808220939093555491517f14cd70e4000000000000000000000000000000000000000000000000000000008152600481019290925260248201869052604482015273ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016906314cd70e490606401600060405180830381600087803b1580156114ed57600080fd5b505af1158015611501573d6000803e3d6000fd5b50506040518681523392507f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d591506020016109d7565b600061154260085490565b600003611550575060045490565b600854600254600354611561611088565b61156b9190611b6f565b6115759190611b86565b61158790670de0b6b3a7640000611b86565b6115919190611bc3565b6004546110969190611bfe565b6040517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018290526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906323b872dd906064016020604051808303816000875af115801561163a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061165e9190611c16565b508160055461166d9190611bfe565b600555506001919050565b6000600c8054806020026020016040519081016040528092919081815260200182805480156116dd57602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff1681526001909101906020018083116116b2575b5050505050905060005b81518110156117a75781818151811061170257611702611c33565b60209081029190910101516040517fadc9772e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8681166004830152602482018690529091169063adc9772e90604401600060405180830381600087803b15801561177e57600080fd5b505af1158015611792573d6000803e3d6000fd5b505050506117a08160010190565b90506116e7565b50505050565b6000600c80548060200260200160405190810160405280929190818152602001828054801561181257602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff1681526001909101906020018083116117e7575b5050505050905060005b81518110156117a75781818151811061183757611837611c33565b60209081029190910101516040517ff3fef3a300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8681166004830152602482018690529091169063f3fef3a390604401600060405180830381600087803b1580156118b357600080fd5b505af11580156118c7573d6000803e3d6000fd5b505050506118d58160010190565b905061181c565b60006118e6611537565b6004556118f1611088565b60035573ffffffffffffffffffffffffffffffffffffffff8116156119525761191981610510565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600a60209081526040808320939093556004546009909152919020555b816007546119609190611bfe565b60075560015442106119815761197962093a8083611bc3565b6002556119c4565b6000426001546119919190611b6f565b90506000600254826119a39190611b86565b90506119af8185611bfe565b93506119be62093a8085611bc3565b60025550505b60068290554260038190556119dd9062093a8090611bfe565b6001556040518281527fde88a922e0d3b88b24e9623efeb464919c6bf9f66857a65e2bfcf2ce87a9433d9060200160405180910390a15050565b6000818310611a265781611a28565b825b9392505050565b803573ffffffffffffffffffffffffffffffffffffffff81168114611a5357600080fd5b919050565b600060208284031215611a6a57600080fd5b611a2882611a2f565b8015158114611a8157600080fd5b50565b600060208284031215611a9657600080fd5b8135611a2881611a73565b60008060408385031215611ab457600080fd5b611abd83611a2f565b946020939093013593505050565b60008060408385031215611ade57600080fd5b823591506020830135611af081611a73565b809150509250929050565b600060208284031215611b0d57600080fd5b5035919050565b60008060408385031215611b2757600080fd5b611b3083611a2f565b91506020830135611af081611a73565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082821015611b8157611b81611b40565b500390565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611bbe57611bbe611b40565b500290565b600082611bf9577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b60008219821115611c1157611c11611b40565b500190565b600060208284031215611c2857600080fd5b8151611a2881611a73565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600060208284031215611c7457600080fd5b505191905056fea26469706673582212209185c5f36939e9cb24edfdbcb31e9faa5caad57ae38cf22aaf936be6ad8d294764736f6c634300080e003360806040526000600355600060045560006007556000600855600060095561033e600a5534801561002f57600080fd5b5060405161103c38038061103c83398101604081905261004e916100ac565b600080546001600160a01b039485166001600160a01b0319918216179091556001805493851693821693909317909255600280549190931691161790556100ef565b80516001600160a01b03811681146100a757600080fd5b919050565b6000806000606084860312156100c157600080fd5b6100ca84610090565b92506100d860208501610090565b91506100e660408501610090565b90509250925092565b610f3e806100fe6000396000f3fe608060405234801561001057600080fd5b50600436106101a25760003560e01c80637b0a47ee116100ee578063c8f33c9111610097578063ebe2b12b11610071578063ebe2b12b14610329578063f14faf6f14610332578063f3fef3a314610345578063f7c618c11461035857600080fd5b8063c8f33c911461030f578063cd3daf9d14610318578063df136d651461032057600080fd5b8063901a7d53116100c8578063901a7d53146102e0578063adc9772e146102e9578063c00007b0146102fc57600080fd5b80637b0a47ee146102af57806380faa57d146102b85780638b876347146102c057600080fd5b80633d18b9121161015057806363d38c3b1161012a57806363d38c3b1461028a5780636c8bcee81461029357806370a082311461029c57600080fd5b80633d18b9121461024d578063570ca73514610257578063590a41f51461027757600080fd5b806318160ddd1161018157806318160ddd146101f7578063262d3d6d146101ff578063323a5e0b1461020857600080fd5b80628cc262146101a75780630700037d146101cd5780630fb5a6b4146101ed575b600080fd5b6101ba6101b5366004610d99565b610378565b6040519081526020015b60405180910390f35b6101ba6101db366004610d99565b600c6020526000908152604090205481565b6101ba62093a8081565b6101ba6103f2565b6101ba60095481565b6000546102289073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101c4565b610255610489565b005b6002546102289073ffffffffffffffffffffffffffffffffffffffff1681565b610255610285366004610db4565b610494565b6101ba60075481565b6101ba600a5481565b6101ba6102aa366004610d99565b6105b8565b6101ba60045481565b6101ba61064d565b6101ba6102ce366004610d99565b600b6020526000908152604090205481565b6101ba60085481565b6102556102f7366004610dcd565b61065b565b61025561030a366004610d99565b610836565b6101ba60055481565b6101ba6109be565b6101ba60065481565b6101ba60035481565b610255610340366004610db4565b610a29565b610255610353366004610dcd565b610adf565b6001546102289073ffffffffffffffffffffffffffffffffffffffff1681565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600c6020908152604080832054600b909252822054670de0b6b3a7640000906103bb6109be565b6103c59190610e26565b6103ce856105b8565b6103d89190610e3d565b6103e29190610e7a565b6103ec9190610eb5565b92915050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610460573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104849190610ecd565b905090565b61049233610836565b565b60025473ffffffffffffffffffffffffffffffffffffffff16331461051a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f21617574686f72697a656400000000000000000000000000000000000000000060448201526064015b60405180910390fd5b6007546105279082610eb5565b905060035442106105435761053b81610c1d565b506000600755565b600062093a806003546105569190610e26565b6105609042610e26565b90506000816004546105729190610e3d565b9050600083610583836103e8610e3d565b61058d9190610e7a565b9050600a548110156105ac576105a284610c1d565b60006007556105b2565b60078490555b50505050565b600080546040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8481166004830152909116906370a0823190602401602060405180830381865afa158015610629573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ec9190610ecd565b600061048442600354610d58565b816106646109be565b60065561066f61064d565b60055573ffffffffffffffffffffffffffffffffffffffff8116156106d05761069781610378565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600c6020908152604080832093909355600654600b909152919020555b60005473ffffffffffffffffffffffffffffffffffffffff163314610751576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f21617574686f72697a65640000000000000000000000000000000000000000006044820152606401610511565b600082116107e1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f5669727475616c4465706f736974526577617264506f6f6c3a2043616e6e6f7460448201527f207374616b6520300000000000000000000000000000000000000000000000006064820152608401610511565b8273ffffffffffffffffffffffffffffffffffffffff167f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d8360405161082991815260200190565b60405180910390a2505050565b8061083f6109be565b60065561084a61064d565b60055573ffffffffffffffffffffffffffffffffffffffff8116156108ab5761087281610378565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600c6020908152604080832093909355600654600b909152919020555b60006108b683610378565b905080156109b95773ffffffffffffffffffffffffffffffffffffffff8381166000818152600c60205260408082209190915560015490517fa9059cbb0000000000000000000000000000000000000000000000000000000081526004810192909252602482018490529091169063a9059cbb906044016020604051808303816000875af115801561094c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109709190610ee6565b508273ffffffffffffffffffffffffffffffffffffffff167fe2403640ba68fed3a2f88b7557551d1993f84b99bb10ff833f0cf8db0c5e04868260405161082991815260200190565b505050565b60006109c86103f2565b6000036109d6575060065490565b6109de6103f2565b6004546005546109ec61064d565b6109f69190610e26565b610a009190610e3d565b610a1290670de0b6b3a7640000610e3d565b610a1c9190610e7a565b6006546104849190610eb5565b6001546040517f23b872dd0000000000000000000000000000000000000000000000000000000081523360048201523060248201526044810183905273ffffffffffffffffffffffffffffffffffffffff909116906323b872dd906064016020604051808303816000875af1158015610aa6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aca9190610ee6565b5080600754610ad99190610eb5565b60075550565b81610ae86109be565b600655610af361064d565b60055573ffffffffffffffffffffffffffffffffffffffff811615610b5457610b1b81610378565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600c6020908152604080832093909355600654600b909152919020555b60005473ffffffffffffffffffffffffffffffffffffffff163314610bd5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f21617574686f72697a65640000000000000000000000000000000000000000006044820152606401610511565b8273ffffffffffffffffffffffffffffffffffffffff167f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d58360405161082991815260200190565b6000610c276109be565b600655610c3261064d565b60055573ffffffffffffffffffffffffffffffffffffffff811615610c9357610c5a81610378565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600c6020908152604080832093909355600654600b909152919020555b81600954610ca19190610eb5565b6009556003544210610cc257610cba62093a8083610e7a565b600455610d05565b600042600354610cd29190610e26565b9050600060045482610ce49190610e3d565b9050610cf08185610eb5565b9350610cff62093a8085610e7a565b60045550505b6008829055426005819055610d1e9062093a8090610eb5565b6003556040518281527fde88a922e0d3b88b24e9623efeb464919c6bf9f66857a65e2bfcf2ce87a9433d9060200160405180910390a15050565b6000818310610d675781610d69565b825b9392505050565b803573ffffffffffffffffffffffffffffffffffffffff81168114610d9457600080fd5b919050565b600060208284031215610dab57600080fd5b610d6982610d70565b600060208284031215610dc657600080fd5b5035919050565b60008060408385031215610de057600080fd5b610de983610d70565b946020939093013593505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082821015610e3857610e38610df7565b500390565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610e7557610e75610df7565b500290565b600082610eb0577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b60008219821115610ec857610ec8610df7565b500190565b600060208284031215610edf57600080fd5b5051919050565b600060208284031215610ef857600080fd5b81518015158114610d6957600080fdfea2646970667358221220ff30394f583f5fe38833f3bdb8c2b90cd7da8ce928af9203ecd19f336a9496c364736f6c634300080e0033a2646970667358221220e0b30cf68657cb4d76301092f4fe94de7f5798d87e6ee17e985ae5d596fd984c64736f6c634300080e0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "activeRewardCount(address)": {
        "returns": {
          "_0": "uint256 number of active rewards"
        }
      },
      "addActiveReward(address,uint256)": {
        "returns": {
          "_0": "true on success"
        }
      },
      "createBalRewards(uint256,address)": {
        "params": {
          "_depositToken": "address of the token",
          "_pid": "The pid of the pool"
        }
      },
      "createTokenRewards(address,address,address)": {
        "details": "used for extra incentive tokens(ex. snx) as well as vebal fees",
        "params": {
          "_mainRewards": "address of the main reward pool contract",
          "_rewardPoolOwner": "address of the reward pool owner",
          "_token": "address of the token"
        },
        "returns": {
          "_0": "address of the new reward pool"
        }
      },
      "removeActiveReward(address,uint256)": {
        "params": {
          "_pid": "The pid of the pool",
          "_reward": "The address of the reward contract"
        },
        "returns": {
          "_0": "true on success"
        }
      },
      "setAccess(address,bool)": {
        "details": "Stash contracts need access to create new Virtual balance pools for extra gauge incentives(ex. snx)"
      }
    },
    "title": "RewardFactory contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "activeRewardCount(address)": {
        "notice": "Get active rewards count"
      },
      "addActiveReward(address,uint256)": {
        "notice": "Adds a new reward to the active list"
      },
      "createBalRewards(uint256,address)": {
        "notice": "Creates a new Reward pool"
      },
      "createTokenRewards(address,address,address)": {
        "notice": "Create a virtual balance reward pool that mimicks the balance of a pool's main reward contract"
      },
      "removeActiveReward(address,uint256)": {
        "notice": "Removes active reward"
      },
      "setAccess(address,bool)": {
        "notice": "Sets rewardAccess to stash"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7431,
        "contract": "contracts/factories/RewardFactory.sol:RewardFactory",
        "label": "rewardAccess",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 7436,
        "contract": "contracts/factories/RewardFactory.sol:RewardFactory",
        "label": "rewardActiveList",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}